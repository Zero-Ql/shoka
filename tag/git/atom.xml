<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yunyat.cloud</id>
    <title>上善若水 • Posts by &#34;git&#34; tag</title>
    <link href="http://yunyat.cloud" />
    <updated>2023-10-26T11:30:24.000Z</updated>
    <category term="hexo" />
    <category term="原创" />
    <category term="Linux" />
    <category term="电脑技术" />
    <category term="SSH" />
    <category term="Docker" />
    <category term="harbor" />
    <category term="markdown" />
    <category term="mermaid" />
    <category term="可道云" />
    <category term="测试" />
    <category term="2023" />
    <category term="年度总结" />
    <category term="记录" />
    <category term="暑假工" />
    <category term="java" />
    <category term="junit" />
    <category term="python" />
    <category term="selenium" />
    <category term="MySQL" />
    <category term="JavaScript" />
    <category term="JSON" />
    <category term="lambda表达式" />
    <category term="java线程" />
    <category term="Java" />
    <category term="servlet" />
    <category term="javafx" />
    <category term="集合" />
    <category term="shell" />
    <category term="游戏" />
    <category term="我的世界" />
    <category term="Hexo" />
    <category term="教程" />
    <category term="Git" />
    <category term="maven" />
    <category term="cAdvisor" />
    <category term="Prometheus" />
    <category term="Grafana" />
    <category term="frp" />
    <category term="破解" />
    <category term="Typora" />
    <category term="xmind" />
    <category term="思维导图" />
    <category term="Ubuntu" />
    <category term="分享" />
    <category term="计算机" />
    <category term="mybatis" />
    <category term="mybatisplus" />
    <category term="spring" />
    <category term="ResponseEntity" />
    <category term="springboot" />
    <category term="springmvc" />
    <category term="spring注解" />
    <category term="HTML" />
    <category term="异常处理" />
    <category term="问题解决" />
    <category term="数据结构" />
    <category term="算法" />
    <entry>
        <id>http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>Git的使用</title>
        <link rel="alternate" href="http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h4 id=&#34;git概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git概念&#34;&gt;#&lt;/a&gt; Git 概念&lt;/h4&gt;
&lt;p&gt;git 分为工作区、暂存区和版本库&lt;/p&gt;
&lt;p&gt;工作区：就是你能直接看见的文件&lt;/p&gt;
&lt;p&gt;暂存区：暂存区位于 .git/index 文件中，暂存区中存储的都是索引&lt;/p&gt;
&lt;p&gt;版本库：整个 .git 文件夹即为版本库&lt;/p&gt;
&lt;p&gt;在版本库中还存有 master 分支所代表的目录树&lt;/p&gt;
&lt;p&gt;一般用 HEAD 来代指当前分支，HEAD 是一个指向 master 分支的指针&lt;/p&gt;
&lt;h5 id=&#34;推送流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送流程&#34;&gt;#&lt;/a&gt; 推送流程&lt;/h5&gt;
&lt;p&gt;git add . # 将当前目录下的所有内容添加到暂存区，此时并不会 commit 到版本库&lt;/p&gt;
&lt;p&gt;git commit -m “update” # 将暂存区的文件提交到版本库，后面的字符串为提交说明&lt;/p&gt;
&lt;p&gt;git push git 仓库位置 # 此时会将版本库中的文件提交到远程 git 仓库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add  》 git commit  》git push&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图解：&lt;/p&gt;
&lt;figure class=&#34;highlight mermaid&#34;&gt;&lt;figcaption data-lang=&#34;mermaid&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;sequenceDiagram&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	工作区&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;暂存区&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; add # 添加&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	暂存区&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;版本库&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; commit # 提交&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	版本库&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;远程仓库&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; push # 推送&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	远程仓库&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;版本库&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; clone # 克隆&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	远程仓库&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;工作区&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; pull # 拉取&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	版本库&lt;span class=&#34;token arrow operator&#34;&gt;-&gt;&gt;&lt;/span&gt;工作区&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; checkout # 分支切换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;p&gt;add ：添加文件到暂存区&lt;/p&gt;
&lt;p&gt;commit ：提交文件到版本库 / 本地仓库&lt;/p&gt;
&lt;p&gt;push：推送文件到远程仓库&lt;/p&gt;
&lt;p&gt;clone：将一个项目克隆到本地仓库&lt;/p&gt;
&lt;p&gt;pull：拉取一个仓库到本地&lt;/p&gt;
&lt;p&gt;checkout：切换分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;git-的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-的基本操作&#34;&gt;#&lt;/a&gt; Git 的基本操作&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;命令&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;参数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git init&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[file]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始化仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[-s]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查看仓库当前的状态，显示有变更的文件，加 -s 参数使其简短输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git diff&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[--cached]&lt;/code&gt;   &lt;code&gt;[HEAD]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;比较文件的不同，即暂存区和工作区的差异，可以使用 --cachaed 显示已缓存的改动，使用 HEAD 显示所有已缓存和未缓存的改动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[HEAD~1]&lt;/code&gt;   &lt;code&gt;[file]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回退版本，回退到添加或提交之前，或使用 --soft HEAD~3 参数指定回退到上上上个版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git rm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将文件从暂存区和工作区删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;git mv&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[-f] [file] [newfile]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移动或重命名工作区文件，添加 -f 参数来重命名文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git switch&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;branch-name&amp;gt;&lt;/code&gt;   &lt;code&gt;[-c] &amp;lt;new-branch-name&amp;gt;&lt;/code&gt;   &lt;code&gt;tags/&amp;lt;tag-name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;更清晰的切换分支，切换到指定分支。使用 -c 创建分支并切换到新创建的分支。使用 tags/ 切换到标签所指向的提交状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git restore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;   &lt;code&gt;--staged &amp;lt;file&amp;gt;&lt;/code&gt;   &lt;code&gt;--source=&amp;lt;commit&amp;gt; &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;恢复或撤销文件的更改。指定文件名将其恢复至最新的提交状态，丢弃所有未提交的更改。使用 --staged 将文件还原到添加到暂存区之前。使用 --source 将文件还原到指定的历史版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;git branch&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[new-branch-name]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查看可用分支和标签。加参数新建分支&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;git-分支管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-分支管理&#34;&gt;#&lt;/a&gt; Git 分支管理&lt;/h4&gt;
&lt;figure class=&#34;highlight mermaid&#34;&gt;&lt;figcaption data-lang=&#34;mermaid&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;graph&lt;/span&gt; LR&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	A&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;B&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	B&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;D&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	D&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;E&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	E&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;F&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	B&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;B1&lt;span class=&#34;token text string&#34;&gt;(b1)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	B1&lt;span class=&#34;token text string&#34;&gt;(b1)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;B2&lt;span class=&#34;token text string&#34;&gt;(b2)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	E&lt;span class=&#34;token text string&#34;&gt;(master)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;E1&lt;span class=&#34;token text string&#34;&gt;(e1)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	E1&lt;span class=&#34;token text string&#34;&gt;(e1)&lt;/span&gt;&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;E2&lt;span class=&#34;token text string&#34;&gt;(e2)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	HEAD&lt;span class=&#34;token arrow operator&#34;&gt;--&gt;&lt;/span&gt;E2&lt;span class=&#34;token text string&#34;&gt;(head)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	图解&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;合并分支-删除分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#合并分支-删除分支&#34;&gt;#&lt;/a&gt; 合并分支 &amp;amp; 删除分支&lt;/h5&gt;
&lt;p&gt;如上图所示，创建一个分支之后就是从那个提交历史节点 clone 一个新的节点，在此节点上所做的任何更改都不会影响到主分支。主分支所做的改动同样也不会影响到别的分支节点，但是要注意，可以使用以下命令来将指定的分支合并到主分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在分支被合并之后就可以删除此分支&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git branch -d &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;合并冲突&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#合并冲突&#34;&gt;#&lt;/a&gt; 合并冲突&lt;/h5&gt;
&lt;p&gt;当你在主分支更改了一个文件并且将更改提交到了版本库，又在另一个分支上同样更改了这个文件并且也提交到了版本库时，这个时候假设你想要将这个分支合并到主分支上，此时会出现合并冲突问题，这需要我们去手动解决&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;## Decimal-conversion
进制转换
- 按照提示输入即可

&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
hello world
=======
你好世界
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的文件 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1JFQURNRS5tZA==&#34;&gt;README.md&lt;/span&gt; 中，我们在主分支中添加了 hello world 内容。在 master 分支中添加了 你好世界 内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决冲突只需要将 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1JFQURNRS5tZA==&#34;&gt;README.md&lt;/span&gt; 中的标记删除然后重新添加和提交即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;## Decimal-conversion
进制转换
- 按照提示输入即可

hello world
你好世界
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改之后用 git add 添加和 git commit 提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;查看-git-的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看-git-的提交历史&#34;&gt;#&lt;/a&gt; 查看 Git 的提交历史&lt;/h4&gt;
&lt;h5 id=&#34;git-log&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-log&#34;&gt;#&lt;/a&gt; Git log&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用此命令会显示从最新到最旧的所有提交信息，包括提交的哈希值、作者、提交日期、提交说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令语法：&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;git log [选项] [分支名/提交哈希]&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;选项&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示提交的具体更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--oneline&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以简洁的一行格式显示提交信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以图形化的方式显示分支和合并历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--decorate&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示分支和标签指向的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--author=&amp;lt;作者&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只显示指定的作者的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--since=&amp;lt;时间&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只显示特定时间之后的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--until=&amp;lt;时间&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只显示特定时间之前的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--grep=&amp;lt;模式&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只显示包含特定模式的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--no-merges&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不显示合并提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示简略统计信息，包括修改的文件和行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用短提交哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--pretty=&amp;lt;格式&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用自定义的提交信息的显示格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--reverse&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逆向显示所有日志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;使用  &lt;code&gt;git log&lt;/code&gt;  命令会输出以下内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log
commit 0c98d56e9822f23406758d2339833ffec7af0c1a (HEAD -&amp;gt; main)
Merge: 434acee e6e3e72
Author: 清天 &amp;lt;2704984649@qq.com&amp;gt;
Date:   Thu Oct 26 11:11:19 2023 +0800

	test3

commit e6e3e72d10cf8b1218e0118beac857af06ff57cd (master)
Author: 清天 &amp;lt;2704984649@qq.com&amp;gt;
Date:   Thu Oct 26 10:59:53 2023 +0800

	test2

commit 434aceeb3a6fbac0ec94fdbedb15d74455528f2f
Author: 清天 &amp;lt;2704984649@qq.com&amp;gt;
Date:   Thu Oct 26 10:58:50 2023 +0800

	 test

commit 33e6c64449e0e094e19d7aea162bfddc23a10832
Author: 清天 &amp;lt;2704984649@qq.com&amp;gt;
Date:   Wed Oct 25 10:29:18 2023 +0800

	README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用  &lt;code&gt;git log --oneline --graph&lt;/code&gt;  以图形化的方式显示简洁的一行提交信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log --oneline --graph
*   0c98d56 (HEAD -&amp;gt; main) test3
|\
| * e6e3e72 (master) test2
* | 434acee test
|/
* 33e6c64 README.md
* 4fa856d README.md
* aaba7d0 (origin/main, origin/HEAD) Create README.md
* 76836c5 Delete .gitignore
* 4e6c20b Add files via upload
* cb5ab48 Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时可以清晰的看见何时工作分叉，又何时合并分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用  &lt;code&gt;git log --help&lt;/code&gt;  查看帮助信息&lt;/p&gt;
&lt;h5 id=&#34;git-blame&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-blame&#34;&gt;#&lt;/a&gt; Git blame&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git blame&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用此命令可以查看指定文件的每一行代码是由谁在什么时候引入或修改的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;命令语法：&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;git blame [选项] &amp;lt;文件路径&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;选项&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-L &amp;lt;起始行号&amp;gt;,&amp;lt;结束行号&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只显示指定行号范围内的代码注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-C&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对于重命名或拷贝的代码行，也进行代码行溯源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-M&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对于移动的代码行，也进行代码行溯源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-C -C&lt;/code&gt;  or  &lt;code&gt;-M -M&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对于较多改动的代码行，进行更进一步的溯源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;--show-stats&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示包含每个作者的行数统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更多用法可以使用  &lt;code&gt;git blame --help&lt;/code&gt;  查看帮助文档&lt;/p&gt;
&lt;h4 id=&#34;git-标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-标签&#34;&gt;#&lt;/a&gt; Git 标签&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git tag -a &amp;lt;标签名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在发布版本的时候，可以使用 tag 来给本次提交打上标签。使用 -a 参数来创建一个带注解的标签，加上这个参数它会记录此标签是何时打的，谁打的，以及让你添加一个标签的注解&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -a &amp;lt;标签名&amp;gt; &amp;lt;提交哈希&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你可以使用上面的命令给以前的提交追加 tag 标签。我给  &lt;code&gt;e6e3e72&lt;/code&gt;  这个提交追加了  &lt;code&gt;v0.9&lt;/code&gt;  的标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git tag -a v0.9 e6e3e72
*   0c98d56 (HEAD -&amp;gt; main, tag: v1.0) test3
|\
| * e6e3e72 (tag: v0.9, master) test2 	# 此处显示了追加的标签
* | 434acee test
|/
* 33e6c64 README.md
* 4fa856d README.md
* aaba7d0 (origin/main, origin/HEAD) Create README.md
* 76836c5 Delete .gitignore
* 4e6c20b Add files via upload
* cb5ab48 Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git log --decorate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用此命令来查看我们打的标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log --oneline --decorate --graph
*   0c98d56 (HEAD -&amp;gt; main, tag: v1.0) test3
|\
| * e6e3e72 (tag: v0.9, master) test2
* | 434acee test
|/
* 33e6c64 README.md
* 4fa856d README.md
* aaba7d0 (origin/main, origin/HEAD) Create README.md
* 76836c5 Delete .gitignore
* 4e6c20b Add files via upload
* cb5ab48 Initial commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以使用  &lt;code&gt;git tag&lt;/code&gt;  来查看所有的标签&lt;/p&gt;
&lt;p&gt;指定标签信息的命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -a &amp;lt;标签名&amp;gt; -m &amp;lt;标签信息&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PGP 签名标签命令：&lt;br&gt;
 &lt;code&gt;git tag -s &amp;lt;标签名&amp;gt; -m &amp;lt;标签信息&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gti tag -d v0.9&lt;/code&gt; &lt;br&gt;
 使用上面的命令删除指定的标签&lt;/p&gt;
&lt;h4 id=&#34;git-远程仓库操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-远程仓库操作&#34;&gt;#&lt;/a&gt; Git 远程仓库操作&lt;/h4&gt;
&lt;h5 id=&#34;添加远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加远程仓库&#34;&gt;#&lt;/a&gt; 添加远程仓库&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;git remote add &amp;lt;仓库别名&amp;gt; &amp;lt;仓库的 ssh url 地址&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用以上命令可以添加一个远程仓库并设置别名，别名在推送时会用的上&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;推送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送&#34;&gt;#&lt;/a&gt; 推送&lt;/h5&gt;
&lt;p&gt;推送代码到仓库里有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;然后使用  &lt;code&gt;git push -u &amp;lt;仓库别名&amp;gt; master&lt;/code&gt;  来将本地的 master 分支推送到 origin 的 master 分支上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以使用  &lt;code&gt;git push &amp;lt;仓库地址&amp;gt;&lt;/code&gt;  来推送你的当前分支&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这两种方法的区别是第一种方法来推送是将本地的 master 分支推送到 origin 主机的 master 分支，并且指定 你所设置的仓库别名所代表的主机为默认主机，这样在以后推送时就可以不加任何参数的使用  &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种方法只是单纯的将本地的当前分支上传到指定的远程仓库地址，并不会指定默认主机，也不会创建或更改远程分支，只是简单的上传代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看当前配置有哪些仓库，可以加上 -v 参数来显示所有的仓库别名的实际连接地址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote [-v]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;提取远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提取远程仓库&#34;&gt;#&lt;/a&gt; 提取远程仓库&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;先使用  &lt;code&gt;git fetch [仓库名] [分支名]&lt;/code&gt;  将远程仓库的分支下载到本地主机，因为时拉取，所以需要指定远程仓库名和分支名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ git fetch origin main
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 996 bytes | 90.00 KiB/s, done.
From gitee.com:Zero_Li_Fun/Decimal-conversion
 * branch            main       -&amp;gt; FETCH_HEAD
   dfb4d6e..9d5cf43  main       -&amp;gt; origin/main
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;然后使用  &lt;code&gt;git merge [origin/master]&lt;/code&gt;  来合并远程分支到本地的当前分支，合并分支要指定被合并的分支名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ git merge origin/main
Updating dfb4d6e..9d5cf43
Fast-forward
 README.md | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;删除远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除远程仓库&#34;&gt;#&lt;/a&gt; 删除远程仓库&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;git remote rm &amp;lt;仓库别名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;END&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2023-10-26T11:30:24.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/</id>
        <title>Git同时部署多个仓库</title>
        <link rel="alternate" href="http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/"/>
        <content type="html">&lt;h4 id=&#34;私有仓库的配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#私有仓库的配置&#34;&gt;#&lt;/a&gt; 私有仓库的配置&lt;/h4&gt;
&lt;p&gt;刚需：先在服务器端创建 git 用户，并且配置用户密码&lt;/p&gt;
&lt;p&gt;可以使用下面的命令创建和修改&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;useradd git&lt;/p&gt;
&lt;p&gt;passwd git&lt;/p&gt;
&lt;p&gt;#注：密码要输入两次确认&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;服务器端配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器端配置&#34;&gt;#&lt;/a&gt; 服务器端配置：&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;su git 	# 切换到 git 用户&lt;/p&gt;
&lt;p&gt;cd 	# 进入用户家目录&lt;/p&gt;
&lt;p&gt;mkdir .ssh ; cd .ssh  	# 创建 .ssh 配置目录并进入&lt;/p&gt;
&lt;p&gt;touch authorized_keys 	# 创建 authorized_keys 来存放公钥&lt;/p&gt;
&lt;p&gt;chmod 700 /home/git/.ssh/ ; chmod 600 /home/git/.ssh/authorized_keys 	# 修改 .ssh 及 authorized_keys 的权限&lt;/p&gt;
&lt;p&gt;vim /etc/ssh/sshd_config&lt;/p&gt;
&lt;p&gt;#在此文件中查找以下字段是否存在或取消注释&lt;/p&gt;
&lt;p&gt;#1. RSAAuthentication yes&lt;/p&gt;
&lt;p&gt;#2. PubkeyAuthentication yes&lt;/p&gt;
&lt;p&gt;#3. AuthorizedkeysFile .ssh/authorized_keys&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;客户端生成公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#客户端生成公钥&#34;&gt;#&lt;/a&gt; 客户端生成公钥：&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t rsa -C “git” -f “id_rsa_git” 	&lt;br&gt;
# 使用 -f 来指定生成的密钥文件名&lt;br&gt;
 #使用 -C 来指定生成密钥的注释信息，以便使用 -v 调试时区分密钥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;配置-github-和-gitee-仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置-github-和-gitee-仓库&#34;&gt;#&lt;/a&gt; 配置 Github 和 Gitee 仓库&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t rsa -C “&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRlZS5jb20=&#34;&gt;git@gitee.com&lt;/span&gt;” -f “id_rsa_gitee”&lt;/p&gt;
&lt;p&gt;ssh-keygen -t rsa -C “&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRodWIuY29t&#34;&gt;git@github.com&lt;/span&gt;” -f “id_rsa_github”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;生成公钥请在 C:\Users\ 用户名 \ .ssh\ 这个目录下的终端里进行，文件名为 .pub 后缀的文件为公钥文件&lt;/p&gt;
&lt;p&gt;然后将不同仓库的公钥里的值分别添加到不同的仓库里即可&lt;/p&gt;
&lt;p&gt;私有仓库则将值添加到 git 用户的 .ssh/authorized_keys 里&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;注：可以使用 echo “值” &amp;gt;&amp;gt; authorized_keys 将值追加到文件里，这样可以防止覆盖以前配置的 ssh 公钥，防止其他用户无法使用免密登录&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然后配置本地主机的 C:\Users\ 用户名 \ .ssh\ 这个目录下的  &lt;code&gt;config&lt;/code&gt;  文件来解决  &lt;code&gt;ssh&lt;/code&gt;  冲突问题 ，没有就创建一个，然后填入以下内容&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;创建的 config 文件没有后缀名&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;#hexo 用户&lt;/p&gt;
&lt;p&gt;Host hexohost 	# 别名&lt;br&gt;
 HostName 8.222.153.91 	# 主机地址&lt;br&gt;
 Post 5213 	# 端口&lt;br&gt;
 User hexo 	# 用户名&lt;br&gt;
 IdentityFile ~/.ssh/id_rsa_hexo 	# 私钥位置，一般位于 C:\\Users\username\.ssh\ 下&lt;/p&gt;
&lt;p&gt;#root 用户&lt;/p&gt;
&lt;p&gt;Host roothost&lt;br&gt;
HostName 8.222.153.91&lt;br&gt;
Post 5213&lt;br&gt;
User root&lt;br&gt;
IdentityFile ~/.ssh/id_rsa&lt;/p&gt;
&lt;p&gt;#git 登录 github&lt;/p&gt;
&lt;p&gt;Host &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdGh1Yi5jb20=&#34;&gt;github.com&lt;/span&gt;&lt;br&gt;
HostName &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdGh1Yi5jb20=&#34;&gt;github.com&lt;/span&gt;&lt;br&gt;
User git&lt;br&gt;
IdentityFile ~/.ssh/id_rsa_github&lt;/p&gt;
&lt;p&gt;#git 登录 gitee&lt;/p&gt;
&lt;p&gt;Host &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdGVlLmNvbQ==&#34;&gt;gitee.com&lt;/span&gt;&lt;br&gt;
HostName &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dpdGVlLmNvbQ==&#34;&gt;gitee.com&lt;/span&gt;&lt;br&gt;
User git&lt;br&gt;
IdentityFile ~/.ssh/id_rsa_gitee&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也可以在使用 ssh 的时候在后面使用 -p 参数指定端口&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmhleG9AOC4yMjIuMTUzLjkx&#34;&gt;hexo@8.222.153.91&lt;/span&gt; -p 5213&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后可以使用下面的命令测试登录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh -T &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRlZS5jb20=&#34;&gt;git@gitee.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ssh -T &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRodWIuY29t&#34;&gt;git@github.com&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;查看-git-的-push-模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看-git-的-push-模式&#34;&gt;#&lt;/a&gt; 查看 git 的 push 模式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;git remote -v&lt;/p&gt;
&lt;p&gt;git remote set-url origin 你的仓库地址 	# 修改不同的模式用不同的仓库地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;坑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#坑&#34;&gt;#&lt;/a&gt; 坑&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;如果使用 ssh -T &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRlZS5jb20=&#34;&gt;git@gitee.com&lt;/span&gt; 或者 ssh -T &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRodWIuY29t&#34;&gt;git@github.com&lt;/span&gt; 来测试登录显示如下报错：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmdpdEBnaXRlZS5jb20=&#34;&gt;git@gitee.com&lt;/span&gt;: Permission denied (publickey).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;解决&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决&#34;&gt;#&lt;/a&gt; 解决&lt;/h5&gt;
&lt;p&gt;如果检查公钥配置没有问题，使用下面的命令将本机的 git 仓库与相对应的 SSH Key 关联上即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh-agent bash 	# 打开身份代理验证连接&lt;/p&gt;
&lt;p&gt;ssh-add ~/.ssh/id_rsa_gitee 	# 你的 gitee 私钥文件位置&lt;/p&gt;
&lt;p&gt;ssh-add ~/.ssh/id_rsa_github 	# 你的 github 私钥文件位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2023-10-26T03:20:32.000Z</updated>
    </entry>
</feed>
