{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"git\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Git的使用",
            "date_published": "2023-10-26T11:30:24.000Z",
            "content_html": "<h4 id=\"git概念\"><a class=\"markdownIt-Anchor\" href=\"#git概念\">#</a> Git 概念</h4>\n<p>git 分为工作区、暂存区和版本库</p>\n<p>工作区：就是你能直接看见的文件</p>\n<p>暂存区：暂存区位于 .git/index 文件中，暂存区中存储的都是索引</p>\n<p>版本库：整个 .git 文件夹即为版本库</p>\n<p>在版本库中还存有 master 分支所代表的目录树</p>\n<p>一般用 HEAD 来代指当前分支，HEAD 是一个指向 master 分支的指针</p>\n<h5 id=\"推送流程\"><a class=\"markdownIt-Anchor\" href=\"#推送流程\">#</a> 推送流程</h5>\n<p>git add . # 将当前目录下的所有内容添加到暂存区，此时并不会 commit 到版本库</p>\n<p>git commit -m “update” # 将暂存区的文件提交到版本库，后面的字符串为提交说明</p>\n<p>git push git 仓库位置 # 此时会将版本库中的文件提交到远程 git 仓库</p>\n<blockquote>\n<p>git add  》 git commit  》git push</p>\n</blockquote>\n<p>图解：</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t工作区<span class=\"token arrow operator\">->></span>暂存区<span class=\"token operator\">:</span> add # 添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t暂存区<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> commit # 提交</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>远程仓库<span class=\"token operator\">:</span> push # 推送</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> clone # 克隆</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> pull # 拉取</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> checkout # 分支切换</pre></td></tr></table></figure><blockquote>\n<p>参数解析：</p>\n<p>add ：添加文件到暂存区</p>\n<p>commit ：提交文件到版本库 / 本地仓库</p>\n<p>push：推送文件到远程仓库</p>\n<p>clone：将一个项目克隆到本地仓库</p>\n<p>pull：拉取一个仓库到本地</p>\n<p>checkout：切换分支</p>\n</blockquote>\n<h4 id=\"git-的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#git-的基本操作\">#</a> Git 的基本操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git init</td>\n<td style=\"text-align:center\"><code>[file]</code></td>\n<td style=\"text-align:center\">初始化仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git status</code></td>\n<td style=\"text-align:center\"><code>[-s]</code></td>\n<td style=\"text-align:center\">查看仓库当前的状态，显示有变更的文件，加 -s 参数使其简短输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git diff</td>\n<td style=\"text-align:center\"><code>[--cached]</code>   <code>[HEAD]</code></td>\n<td style=\"text-align:center\">比较文件的不同，即暂存区和工作区的差异，可以使用 --cachaed 显示已缓存的改动，使用 HEAD 显示所有已缓存和未缓存的改动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git reset</code></td>\n<td style=\"text-align:center\"><code>[HEAD~1]</code>   <code>[file]</code></td>\n<td style=\"text-align:center\">回退版本，回退到添加或提交之前，或使用 --soft HEAD~3 参数指定回退到上上上个版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rm</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">将文件从暂存区和工作区删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git mv</code></td>\n<td style=\"text-align:center\"><code>[-f] [file] [newfile]</code></td>\n<td style=\"text-align:center\">移动或重命名工作区文件，添加 -f 参数来重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git switch</td>\n<td style=\"text-align:center\"><code>&lt;branch-name&gt;</code>   <code>[-c] &lt;new-branch-name&gt;</code>   <code>tags/&lt;tag-name&gt;</code></td>\n<td style=\"text-align:center\">更清晰的切换分支，切换到指定分支。使用 -c 创建分支并切换到新创建的分支。使用 tags/ 切换到标签所指向的提交状态</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git restore</td>\n<td style=\"text-align:center\"><code>&lt;file&gt;</code>   <code>--staged &lt;file&gt;</code>   <code>--source=&lt;commit&gt; &lt;file&gt;</code></td>\n<td style=\"text-align:center\">恢复或撤销文件的更改。指定文件名将其恢复至最新的提交状态，丢弃所有未提交的更改。使用 --staged 将文件还原到添加到暂存区之前。使用 --source 将文件还原到指定的历史版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch</td>\n<td style=\"text-align:center\"><code>[new-branch-name]</code></td>\n<td style=\"text-align:center\">查看可用分支和标签。加参数新建分支</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"git-分支管理\"><a class=\"markdownIt-Anchor\" href=\"#git-分支管理\">#</a> Git 分支管理</h4>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tB<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tD<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>F<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tB<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B1<span class=\"token text string\">(b1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tB1<span class=\"token text string\">(b1)</span><span class=\"token arrow operator\">--></span>B2<span class=\"token text string\">(b2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E1<span class=\"token text string\">(e1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tE1<span class=\"token text string\">(e1)</span><span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(e2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tHEAD<span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(head)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t图解</pre></td></tr></table></figure><h5 id=\"合并分支-删除分支\"><a class=\"markdownIt-Anchor\" href=\"#合并分支-删除分支\">#</a> 合并分支 &amp; 删除分支</h5>\n<p>如上图所示，创建一个分支之后就是从那个提交历史节点 clone 一个新的节点，在此节点上所做的任何更改都不会影响到主分支。主分支所做的改动同样也不会影响到别的分支节点，但是要注意，可以使用以下命令来将指定的分支合并到主分支</p>\n<blockquote>\n<p><code>git merge &lt;branch-name&gt;</code></p>\n</blockquote>\n<p>在分支被合并之后就可以删除此分支</p>\n<blockquote>\n<p><code>git branch -d &lt;branch-name&gt;</code></p>\n</blockquote>\n<h5 id=\"合并冲突\"><a class=\"markdownIt-Anchor\" href=\"#合并冲突\">#</a> 合并冲突</h5>\n<p>当你在主分支更改了一个文件并且将更改提交到了版本库，又在另一个分支上同样更改了这个文件并且也提交到了版本库时，这个时候假设你想要将这个分支合并到主分支上，此时会出现合并冲突问题，这需要我们去手动解决</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nhello world\n=======\n你好世界\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre>\n<p>在上面的文件 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中，我们在主分支中添加了 hello world 内容。在 master 分支中添加了 你好世界 内容。</p>\n</blockquote>\n<p>解决冲突只需要将 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中的标记删除然后重新添加和提交即可</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\nhello world\n你好世界\n</code></pre>\n<p>修改之后用 git add 添加和 git commit 提交</p>\n</blockquote>\n<h4 id=\"查看-git-的提交历史\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的提交历史\">#</a> 查看 Git 的提交历史</h4>\n<h5 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a> Git log</h5>\n<blockquote>\n<p><code>git log</code></p>\n<p>使用此命令会显示从最新到最旧的所有提交信息，包括提交的哈希值、作者、提交日期、提交说明</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git log [选项] [分支名/提交哈希]</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-p</code></td>\n<td style=\"text-align:center\">显示提交的具体更改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--oneline</code></td>\n<td style=\"text-align:center\">以简洁的一行格式显示提交信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--graph</code></td>\n<td style=\"text-align:center\">以图形化的方式显示分支和合并历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--decorate</code></td>\n<td style=\"text-align:center\">显示分支和标签指向的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--author=&lt;作者&gt;</code></td>\n<td style=\"text-align:center\">只显示指定的作者的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--since=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之后的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--until=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之前的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--grep=&lt;模式&gt;</code></td>\n<td style=\"text-align:center\">只显示包含特定模式的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--no-merges</code></td>\n<td style=\"text-align:center\">不显示合并提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--stat</code></td>\n<td style=\"text-align:center\">显示简略统计信息，包括修改的文件和行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--abbrev-commit</code></td>\n<td style=\"text-align:center\">使用短提交哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--pretty=&lt;格式&gt;</code></td>\n<td style=\"text-align:center\">使用自定义的提交信息的显示格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--reverse</code></td>\n<td style=\"text-align:center\">逆向显示所有日志</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用  <code>git log</code>  命令会输出以下内容</p>\n<pre><code>$ git log\ncommit 0c98d56e9822f23406758d2339833ffec7af0c1a (HEAD -&gt; main)\nMerge: 434acee e6e3e72\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 11:11:19 2023 +0800\n\n\ttest3\n\ncommit e6e3e72d10cf8b1218e0118beac857af06ff57cd (master)\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:59:53 2023 +0800\n\n\ttest2\n\ncommit 434aceeb3a6fbac0ec94fdbedb15d74455528f2f\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:58:50 2023 +0800\n\n\t test\n\ncommit 33e6c64449e0e094e19d7aea162bfddc23a10832\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Wed Oct 25 10:29:18 2023 +0800\n\n\tREADME.md\n</code></pre>\n<p>使用  <code>git log --oneline --graph</code>  以图形化的方式显示简洁的一行提交信息</p>\n<pre><code>$ git log --oneline --graph\n*   0c98d56 (HEAD -&gt; main) test3\n|\\\n| * e6e3e72 (master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>此时可以清晰的看见何时工作分叉，又何时合并分支</p>\n</blockquote>\n<p>可以使用  <code>git log --help</code>  查看帮助信息</p>\n<h5 id=\"git-blame\"><a class=\"markdownIt-Anchor\" href=\"#git-blame\">#</a> Git blame</h5>\n<blockquote>\n<p><code>git blame</code></p>\n<p>使用此命令可以查看指定文件的每一行代码是由谁在什么时候引入或修改的</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git blame [选项] &lt;文件路径&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-L &lt;起始行号&gt;,&lt;结束行号&gt;</code></td>\n<td style=\"text-align:center\">只显示指定行号范围内的代码注释</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C</code></td>\n<td style=\"text-align:center\">对于重命名或拷贝的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-M</code></td>\n<td style=\"text-align:center\">对于移动的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C -C</code>  or  <code>-M -M</code></td>\n<td style=\"text-align:center\">对于较多改动的代码行，进行更进一步的溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--show-stats</code></td>\n<td style=\"text-align:center\">显示包含每个作者的行数统计信息</td>\n</tr>\n</tbody>\n</table>\n<p>更多用法可以使用  <code>git blame --help</code>  查看帮助文档</p>\n<h4 id=\"git-标签\"><a class=\"markdownIt-Anchor\" href=\"#git-标签\">#</a> Git 标签</h4>\n<p><code>git tag -a &lt;标签名&gt;</code></p>\n<p>在发布版本的时候，可以使用 tag 来给本次提交打上标签。使用 -a 参数来创建一个带注解的标签，加上这个参数它会记录此标签是何时打的，谁打的，以及让你添加一个标签的注解</p>\n<p><code>git tag -a &lt;标签名&gt; &lt;提交哈希&gt;</code></p>\n<p>你可以使用上面的命令给以前的提交追加 tag 标签。我给  <code>e6e3e72</code>  这个提交追加了  <code>v0.9</code>  的标签</p>\n<pre><code>$ git tag -a v0.9 e6e3e72\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2 \t# 此处显示了追加的标签\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p><code>git log --decorate</code></p>\n<p>使用此命令来查看我们打的标签</p>\n<pre><code>$ git log --oneline --decorate --graph\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>也可以使用  <code>git tag</code>  来查看所有的标签</p>\n<p>指定标签信息的命令：</p>\n<p><code>git tag -a &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p>PGP 签名标签命令：<br>\n <code>git tag -s &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p><code>gti tag -d v0.9</code> <br>\n 使用上面的命令删除指定的标签</p>\n<h4 id=\"git-远程仓库操作\"><a class=\"markdownIt-Anchor\" href=\"#git-远程仓库操作\">#</a> Git 远程仓库操作</h4>\n<h5 id=\"添加远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#添加远程仓库\">#</a> 添加远程仓库</h5>\n<p><code>git remote add &lt;仓库别名&gt; &lt;仓库的 ssh url 地址&gt;</code></p>\n<ul>\n<li>使用以上命令可以添加一个远程仓库并设置别名，别名在推送时会用的上</li>\n</ul>\n<h5 id=\"推送\"><a class=\"markdownIt-Anchor\" href=\"#推送\">#</a> 推送</h5>\n<p>推送代码到仓库里有两种方法：</p>\n<ol>\n<li>\n<p>然后使用  <code>git push -u &lt;仓库别名&gt; master</code>  来将本地的 master 分支推送到 origin 的 master 分支上</p>\n</li>\n<li>\n<p>也可以使用  <code>git push &lt;仓库地址&gt;</code>  来推送你的当前分支</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>这两种方法的区别是第一种方法来推送是将本地的 master 分支推送到 origin 主机的 master 分支，并且指定 你所设置的仓库别名所代表的主机为默认主机，这样在以后推送时就可以不加任何参数的使用  <code>git push</code></p>\n</li>\n<li>\n<p>第二种方法只是单纯的将本地的当前分支上传到指定的远程仓库地址，并不会指定默认主机，也不会创建或更改远程分支，只是简单的上传代码。</p>\n</li>\n<li>\n<p>查看当前配置有哪些仓库，可以加上 -v 参数来显示所有的仓库别名的实际连接地址</p>\n<p><code>git remote [-v]</code></p>\n</li>\n</ul>\n<h5 id=\"提取远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#提取远程仓库\">#</a> 提取远程仓库</h5>\n<ol>\n<li>先使用  <code>git fetch [仓库名] [分支名]</code>  将远程仓库的分支下载到本地主机，因为时拉取，所以需要指定远程仓库名和分支名</li>\n</ol>\n<pre><code>$ git fetch origin main\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 996 bytes | 90.00 KiB/s, done.\nFrom gitee.com:Zero_Li_Fun/Decimal-conversion\n * branch            main       -&gt; FETCH_HEAD\n   dfb4d6e..9d5cf43  main       -&gt; origin/main\n</code></pre>\n<ol start=\"2\">\n<li>然后使用  <code>git merge [origin/master]</code>  来合并远程分支到本地的当前分支，合并分支要指定被合并的分支名</li>\n</ol>\n<pre><code>$ git merge origin/main\nUpdating dfb4d6e..9d5cf43\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<h5 id=\"删除远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#删除远程仓库\">#</a> 删除远程仓库</h5>\n<p><code>git remote rm &lt;仓库别名&gt;</code></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "title": "Git同时部署多个仓库",
            "date_published": "2023-10-26T03:20:32.000Z",
            "content_html": "<h4 id=\"私有仓库的配置\"><a class=\"markdownIt-Anchor\" href=\"#私有仓库的配置\">#</a> 私有仓库的配置</h4>\n<p>刚需：先在服务器端创建 git 用户，并且配置用户密码</p>\n<p>可以使用下面的命令创建和修改</p>\n<blockquote>\n<p>useradd git</p>\n<p>passwd git</p>\n<p>#注：密码要输入两次确认</p>\n</blockquote>\n<h5 id=\"服务器端配置\"><a class=\"markdownIt-Anchor\" href=\"#服务器端配置\">#</a> 服务器端配置：</h5>\n<blockquote>\n<p>su git \t# 切换到 git 用户</p>\n<p>cd \t# 进入用户家目录</p>\n<p>mkdir .ssh ; cd .ssh  \t# 创建 .ssh 配置目录并进入</p>\n<p>touch authorized_keys \t# 创建 authorized_keys 来存放公钥</p>\n<p>chmod 700 /home/git/.ssh/ ; chmod 600 /home/git/.ssh/authorized_keys \t# 修改 .ssh 及 authorized_keys 的权限</p>\n<p>vim /etc/ssh/sshd_config</p>\n<p>#在此文件中查找以下字段是否存在或取消注释</p>\n<p>#1. RSAAuthentication yes</p>\n<p>#2. PubkeyAuthentication yes</p>\n<p>#3. AuthorizedkeysFile .ssh/authorized_keys</p>\n</blockquote>\n<h5 id=\"客户端生成公钥\"><a class=\"markdownIt-Anchor\" href=\"#客户端生成公钥\">#</a> 客户端生成公钥：</h5>\n<blockquote>\n<p>ssh-keygen -t rsa -f “id_rsa_git” \t# 使用 -f 来区分生成的公钥文件</p>\n</blockquote>\n<h4 id=\"配置-github-和-gitee-仓库\"><a class=\"markdownIt-Anchor\" href=\"#配置-github-和-gitee-仓库\">#</a> 配置 Github 和 Gitee 仓库</h4>\n<blockquote>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOjI3MDQ5ODQ2NDlAcXEuY29t\">2704984649@qq.com</span>” -f “id_rsa_gitee”</p>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOjI3MDQ5ODQ2NDlAcXEuY29t\">2704984649@qq.com</span>” -f “id_rsa_github”</p>\n</blockquote>\n<p>注：生成公钥请在 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的终端里进行，文件名为 .pub 后缀的文件为公钥文件</p>\n<p>然后将不同仓库的公钥里的值分别添加到不同的仓库里即可</p>\n<p>私有仓库则将值添加到 git 用户的 .ssh/authorized_keys 里</p>\n<p>注：可以使用 echo “值” &gt;&gt; authorized_keys 将值追加到文件里，这样可以防止覆盖以前配置的 ssh 公钥，防止其他用户无法使用免密登录</p>\n<p>然后配置本地主机的 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的 config.config 文件来解决 ssh 冲突问题 ，没有就创建一个，然后填入以下内容</p>\n<blockquote>\n<p>#git 用户</p>\n<p>Host githost \t# 别名<br>\n HostName 8.222.153.91 \t# 主机地址<br>\n Post 5213 \t# 端口<br>\n User git \t# 用户名<br>\n IdentityFile ~/.ssh/id_rsa.pub \t# 公钥位置，一般位于 C:\\\\Users\\qingtian\\.ssh\\ 下</p>\n<p>#root 用户</p>\n<p>Host roothost<br>\nHostName 8.222.153.91<br>\nPost 5213<br>\nUser root<br>\nIdentityFile ~/.ssh/id_rsa.pub</p>\n<p>#git 登录 github</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_github.pub</p>\n<p>#git 登录 gitee</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_gitee.pub</p>\n</blockquote>\n<p>也可以在使用 ssh 的时候在后面使用 -p 参数指定端口</p>\n<blockquote>\n<p>ssh <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEA4LjIyMi4xNTMuOTE=\">git@8.222.153.91</span> -p 5213</p>\n</blockquote>\n<p>然后可以使用下面的命令测试登录：</p>\n<blockquote>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span></p>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span></p>\n</blockquote>\n<h4 id=\"查看-git-的-push-模式\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的-push-模式\">#</a> 查看 git 的 push 模式</h4>\n<blockquote>\n<p>git remote -v</p>\n<p>git remote set-url origin 你的仓库地址 \t# 修改不同的模式用不同的仓库地址</p>\n</blockquote>\n<h4 id=\"坑\"><a class=\"markdownIt-Anchor\" href=\"#坑\">#</a> 坑</h4>\n<ol>\n<li>如果使用 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span> 或者 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span> 来测试登录显示如下报错：</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span>: Permission denied (publickey).</p>\n</blockquote>\n<h5 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h5>\n<p>如果检查公钥配置没有问题，使用下面的命令将本机的 git 仓库与相对应的 SSH Key 关联上即可</p>\n<blockquote>\n<p>ssh-agent bash \t# 打开身份代理验证连接</p>\n<p>ssh-add ~/.ssh/id_rsa_gitee \t# 你的 gitee 私钥文件位置</p>\n<p>ssh-add ~/.ssh/id_rsa_github \t# 你的 github 私钥文件位置</p>\n</blockquote>\n<ol start=\"2\">\n<li>在关闭 git bash 窗口后要重新添加关联，暂无解决办法</li>\n</ol>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}