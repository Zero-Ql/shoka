{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"集合\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "title": "集合接口的继承及实现概览",
            "date_published": "2023-05-14T13:45:06.000Z",
            "content_html": "<h5 id=\"map-根接口包含键和值\"><a class=\"markdownIt-Anchor\" href=\"#map-根接口包含键和值\">#</a> Map    -- 根接口 (包含键和值)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>Bindings</li>\n<li>ConcurrentMap\n<ul>\n<li>ConcurrentNavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n<li>SoredMap\n<ul>\n<li>NavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Map 接口的类</p>\n<p><code>AbstractMap</code> ,<br>\n <code>Attributes</code> ,<br>\n <code>AuthProvider</code> ,<br>\n <code>ConcurrentHashMap</code> ,<br>\n <code>ConcurrentSkipListMap</code> ,<br>\n <code>EnumMap</code> ,<br>\n <code>HashMap</code> ,<br>\n <code>Hashtable</code> ,<br>\n <code>Headers</code> ,<br>\n <code>IdentityHashMap</code> ,<br>\n <code>LinkedHashMap</code> ,<br>\n <code>PrinterStateReasons</code> ,<br>\n <code>Properties</code> ,<br>\n <code>Provider</code> ,<br>\n <code>RenderingHints</code> ,<br>\n <code>SimpleBindings</code> ,<br>\n <code>TabularDataSupport</code> ,<br>\n <code>TreeMap</code> ,<br>\n <code>UIDefaults</code> ,<br>\n <code>WeakHashMap</code></p>\n<h5 id=\"collection-根接口只有元素\"><a class=\"markdownIt-Anchor\" href=\"#collection-根接口只有元素\">#</a> Collection    -- 根接口 (只有元素)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>BeanContext\n<ul>\n<li>BeanContextServices</li>\n</ul>\n</li>\n<li>Queue<E>\n<ul>\n<li>BlockingQueue<E>\n<ul>\n<li>BlockingDeque<E></li>\n<li>TransferQueue<E></li>\n</ul>\n</li>\n<li>Deque<E></li>\n</ul>\n</li>\n<li>List<E></li>\n<li>Set<E>\n<ul>\n<li>EventSet</li>\n<li>SortedSet<E>\n<ul>\n<li>NavigableSet<E></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Collection 的类</p>\n<p><code>AbstractCollection</code> ,<br>\n <code>AbstractList</code> ,<br>\n <code>AbstractQueue</code> ,<br>\n <code>AbstractSequentialList</code> ,<br>\n <code>AbstractSet</code> ,<br>\n <code>ArrayBlockingQueue</code> ,<br>\n <code>ArrayDeque</code> ,<br>\n <code>ArrayList</code> ,<br>\n <code>AttributeList</code> ,<br>\n <code>BeanContextServicesSupport</code> ,  <code>BeanContextSupport</code> ,  <code>ConcurrentHashMap.KeySetView</code> ,  <code>ConcurrentLinkedDeque</code> ,<br>\n <code>ConcurrentLinkedQueue</code> ,<br>\n <code>ConcurrentSkipListSet</code> ,<br>\n <code>CopyOnWriteArrayList</code> ,<br>\n <code>CopyOnWriteArraySet</code> ,<br>\n <code>DelayQueue</code> ,<br>\n <code>EnumSet</code> ,<br>\n <code>HashSet</code> ,<br>\n <code>JobStateReasons</code> ,<br>\n <code>LinkedBlockingDeque</code> ,<br>\n <code>LinkedBlockingQueue</code> ,<br>\n <code>LinkedHashSet</code> ,<br>\n <code>LinkedList</code> ,<br>\n <code>LinkedTransferQueue</code> ,<br>\n <code>PriorityBlockingQueue</code> ,<br>\n <code>PriorityQueue</code> ,<br>\n <code>RoleList</code> ,<br>\n <code>RoleUnresolvedList</code> ,<br>\n <code>Stack</code> ,<br>\n <code>SynchronousQueue</code> ,<br>\n <code>TreeSet</code> ,<br>\n <code>Vector</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88-Map/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88-Map/",
            "title": "集合-Map",
            "date_published": "2023-05-02T09:58:51.000Z",
            "content_html": "<h4 id=\"map接口双列队列\"><a class=\"markdownIt-Anchor\" href=\"#map接口双列队列\">#</a> Map 接口 (双列队列)</h4>\n<ul>\n<li>\n<p><code>HashMap</code>  和 <code>LinkedHashMap</code></p>\n<p><code>HashMap</code>  实现了 <code>Map</code>  接口，而 <code>LinkedHashMap</code>  继承自 <code>HashMap</code>  类</p>\n<ul>\n<li><code>hashmap</code>  和 <code>linkedhashmap</code>  的区别\n<ul>\n<li><code>hashmap</code>  采用了哈希表实现 <code>map</code>  接口，但是它的存储是无序的</li>\n<li><code>linkedhashmap</code>  同样也采用了哈希表实现，但不同的是它同时采用了链表结构，这使得它的存储是有序的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"hashmap构造方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap构造方法\">#</a> HashMap 构造方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 其他构造方法都是在此基础上衍生而来</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token comment\">//initialCapacity 初始容量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token comment\">//loadFactor 初始系数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"hashmap的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的常用方法\">#</a> HashMap 的常用方法</h5>\n<ul>\n<li>\n<p><em> <code>get()</code> </em>、<em> <code>put()</code> </em>、<em> <code>remove()</code> </em></p>\n<p><code>get()</code></p>\n<ul>\n<li>返回指定键的键值</li>\n</ul>\n<p><code>put()</code></p>\n<ul>\n<li>将指定的键值装入列表</li>\n</ul>\n<p><code>remove()</code></p>\n<ul>\n<li>删除指定健的键值，删除后健的值为 <code>null</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 初始容量为 5，初始系数为 0.75</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 可以使用泛型指定存储类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//key 为键值 1，value 为 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 返回键为 “键值 1” 的对应键值 value</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 注意：此 value 为 Object 类型，输出会自动调用 toString 方法将值转换为 String</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 删除键为 “键值 1” 的对应值 value，删除后键 “键值 1” 的值为 null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>LinkedHashMap</code>  的构造方法同 <code>HashMap</code>  相同</p>\n<ul>\n<li>\n<p><em> <code>containsKey</code> </em>、<em> <code>containsValue</code> </em>、<em> <code>isEmpty</code> </em></p>\n<p><code>containskey</code></p>\n<ul>\n<li>如果此列表中包含指定的键就返回 true，反之 false</li>\n</ul>\n<p><code>containsValue</code></p>\n<ul>\n<li>如果此列表将一个或多个健映射到此键值就返回 true，反之 false</li>\n</ul>\n<p><code>isEmpty</code></p>\n<ul>\n<li>如果此列表不包含健和键值就返回 true，反之 false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含健 \"键值\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       \t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containskey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否有指定值的映射</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含键值对</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序执行结果为</p>\n<p><code>b1=true</code>   <code>b2=true</code>   <code>b3=false</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        }
    ]
}