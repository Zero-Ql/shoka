{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"docker\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "url": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "title": "使用cAdvisor+Prometheus+Grafana监控Docker容器",
            "date_published": "2023-09-26T15:22:58.000Z",
            "content_html": "<h4 id=\"10-下载镜像\"><a class=\"markdownIt-Anchor\" href=\"#10-下载镜像\">#</a> 1.0 下载镜像</h4>\n<ol>\n<li>先使用下面的命令下载必要的镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull google/cadvisor <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull prom/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHGeun.png\" alt=\"pPHGeun.png\"></p>\n<h4 id=\"20-cadvisor-的部署\"><a class=\"markdownIt-Anchor\" href=\"#20-cadvisor-的部署\">#</a> 2.0 cAdvisor 的部署</h4>\n<ol>\n<li>使用下面的命令将本地的 根目录、/sys、/var/lib/docker、/dev/disk 等目录以只读形式挂载到容器里，然后使用 -p 将本地端口映射到容器，使用 --privileged 给予容器特权模式，使用 --device=/dev/kmsg 将主机的 /dev/kmsg 设备文件添加到容器中</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> /:/rootfs:ro <span class=\"token parameter variable\">-v</span> /var/run:/var/run:ro <span class=\"token parameter variable\">-v</span> /sys:/sys:ro <span class=\"token parameter variable\">-v</span> /var/lib/docker/:/var/lib/docker:ro <span class=\"token parameter variable\">-v</span> /dev/disk/:/dev/disk:ro <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25571</span>:8080 <span class=\"token parameter variable\">--detach</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>cadvisor <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--device</span><span class=\"token operator\">=</span>/dev/kmsg google/cadvisor</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwpYq.png\" alt=\"pPHwpYq.png\"></p>\n<ol start=\"2\">\n<li>在浏览器输入  <code>你的ip:25571/containers/docker</code>  即可访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwilT.png\" alt=\"pPHwilT.png\"></p>\n<h4 id=\"30-prometheus-的部署\"><a class=\"markdownIt-Anchor\" href=\"#30-prometheus-的部署\">#</a> 3.0 Prometheus 的部署</h4>\n<ol>\n<li>先创建配置文件存放的目录，然后使用 vim 创建并编辑  <code>prometheus.yml</code>  配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> /etc/prometheus/prometheus.yml</pre></td></tr></table></figure><ol start=\"2\">\n<li>然后在 prometheus.yml 文件中写入以下内容</li>\n</ol>\n<p>将 ip 地址跟端口号改为自己的就行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   scrape_interval: 15s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   evaluation_interval: 15s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> alerting:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  alertmanagers:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  - static_configs:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    - targets:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> rule_files:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> scrape_configs:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   - job_name: <span class=\"token string\">'prometheus'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25572'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   - job_name: <span class=\"token string\">'cadvisor'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25571'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>注意：缩进一定要跟我的一样，错一个字符都不行，因为我容器已经运行起来了才截的图，所以你们现在应该是没有这个容器的</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHw9f0.png\" alt=\"pPHw9f0.png\"></p>\n<ol start=\"3\">\n<li>使用 run 将容器运行起来</li>\n</ol>\n<blockquote>\n<p>建议先使用 docker ps -a 查看容器有没有真正运行起来，有时候会出现成功创建但是没有运行起来的情况，这种情况一般都是配置文件有问题导致的</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>prometheus <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25572</span>:9090 <span class=\"token parameter variable\">-v</span> /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus <span class=\"token parameter variable\">--config.file</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus.yml --web.enable-lifecycle</pre></td></tr></table></figure><ol start=\"4\">\n<li>在浏览器输入你的 ip:25572/targets 来访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwPpV.png\" alt=\"pPHwPpV.png\"></p>\n<h4 id=\"40-grafana-的部署\"><a class=\"markdownIt-Anchor\" href=\"#40-grafana-的部署\">#</a> 4.0 Grafana 的部署</h4>\n<ol>\n<li>因为之前已经把所有的镜像都已经下载了，所以直接用 run 来运行就行了，之后在浏览器中使用 你的 IP:25573/login 来访问即可</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>grafana <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25573</span>:3000 grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyPpR.png\" alt=\"pPHyPpR.png\"></p>\n<ol start=\"2\">\n<li>默认账号及密码都为 admin ，登录之后网站会强制你更新密码</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyZ7D.png\" alt=\"pPHyZ7D.png\"></p>\n<ol start=\"3\">\n<li>进入管理界面之后点击 DATA SOURCES 来创建数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyV0O.png\" alt=\"pPHyV0O.png\"></p>\n<ol start=\"4\">\n<li>选择第一个数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyuhd.png\" alt=\"pPHyuhd.png\"></p>\n<ol start=\"5\">\n<li>在 HTTP 的 URL 栏填入你的 Prometheus 访问地址，然后选 Save &amp; test 保存并退出</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//192.168.234.128:25572/targets</span></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy8nf.png\" alt=\"pPHy8nf.png\"></p>\n<ol start=\"6\">\n<li>点击左边工具栏的 ‘+’ 号，然后点击 Import ，输入 193 ，点击后面的 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHytAg.png\" alt=\"pPHytAg.png\"></p>\n<ol start=\"7\">\n<li>在 Prometheus 列选择数据源，之后点击 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy0cq.png\" alt=\"pPHy0cq.png\"></p>\n<ol start=\"8\">\n<li>之后就可以看到仪表盘显示的数据了</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHycEF.png\" alt=\"pPHycEF.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Docker",
                "cAdvisor",
                "Prometheus",
                "Grafana"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Docker之nginx的负载均衡",
            "date_published": "2023-09-12T10:49:35.000Z",
            "content_html": "<h4 id=\"使用docker部署nginx的负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#使用docker部署nginx的负载均衡\">#</a> 使用 docker 部署 nginx 的负载均衡</h4>\n<ol>\n<li>下载 nginx 和 tomcat 镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull nginx <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull tomcat</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Vg10.png\" alt=\"pP2Vg10.png\"></p>\n<ol start=\"2\">\n<li>新建 tomcat 网页</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www1/ROOT <span class=\"token punctuation\">;</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www2/ROOT</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VhBF.png\" alt=\"pP2VhBF.png\"></p>\n<ol start=\"3\">\n<li>进入刚创建的 www1/ROOT 目录里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root/www1/ROOT</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 创建 index.jsp 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> index.jsp</pre></td></tr></table></figure><p>输入以下内容：</p>\n<pre><code class=\"language-jsp\">&lt;html&gt;\n    &lt;head&gt;\n           &lt;title&gt;Tomcat1&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\t\n           &lt;%\n                  out.println(&quot;this is Tomcat1&quot;);\n           %&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VoN9.png\" alt=\"pP2VoN9.png\"></p>\n<p>在 /root/www2/ROOT/ 下同样创建 index.jsp 文件，输入内容同上，将 Tomcat1 改为 Tomcat2 即可</p>\n<ol start=\"5\">\n<li>运行 tomcat1 和 tomcat2 ，并且将 docker 的 /root/www1 和 /root/www2 与容器的 /usr/local/webapps 目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32769</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www1:/usr/local/tomcat/webapps tomcat:latest <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat2 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32770</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www2:/usr/local/tomcat/webapps tomcat:latest</pre></td></tr></table></figure><p>注：上面是一条命令</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Z3uT.png\" alt=\"pP2Z3uT.png\"></p>\n<ol start=\"6\">\n<li>在浏览器分别输入以下语句：</li>\n</ol>\n<blockquote>\n<p>你的 ip:32769</p>\n<p>你的 ip:32770</p>\n<p>示例：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc2OQ==\">tomcat1</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MA==\">tomcat2</span></p>\n</blockquote>\n<ol start=\"7\">\n<li>运行 nginx</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> nginx <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25567</span>:80 nginx:latest</pre></td></tr></table></figure><ol start=\"8\">\n<li>在 /root 目录下使用 vim 创建 nginx.conf 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> nginx.conf</pre></td></tr></table></figure><p>填入以下内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user  nginx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>error_log  /var/log/nginx/error.log warn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid        /var/run/nginx.pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    include       /etc/nginx/mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    log_format  main  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    access_log  /var/log/nginx/access.log  main<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sendfile        on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">#tcp_nopush     on;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#gzip  on;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    include /etc/nginx/conf.d/*.conf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    upstream tomcat <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32772<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32773<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        server_name <span class=\"token number\">192.168</span>.100.100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                proxy_pass http://tomcat<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 server 后面的 ip 改为你的 ip 加端口号，server_name 同理</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2eKde.png\" alt=\"pP2eKde.png\"></p>\n<ol start=\"9\">\n<li>将 nginx.conf 文件 cp 到你的容器里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> nginx.conf e11dd26a3930:/etc/nginx/nginx.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 记住，容器 id 改为自己的 nginx 容器的 id</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MeET.png\" alt=\"pP2MeET.png\"></p>\n<ol start=\"10\">\n<li>重启 nginx 容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> restart 你的nginx容器id</pre></td></tr></table></figure><ol start=\"11\">\n<li>浏览器访问你服务器的 ip，因为我的 80 端口被占用，所以使用 25567 代替</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MmUU.png\" alt=\"pP2MmUU.png\"></p>\n<p>刷新会在 tomcat1 和 tomcat2 切换</p>\n<p>示例：<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2Nw==\">tomcat1 or tomcat2</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "url": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "title": "harbor本地仓库搭建",
            "date_published": "2023-09-12T03:34:02.000Z",
            "content_html": "<h4 id=\"创建-harbor-仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建-harbor-仓库\">#</a> 创建 Harbor 仓库</h4>\n<ol>\n<li>访问官方网站下载官方镜像源</li>\n</ol>\n<blockquote>\n<p>官方网站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2hhcmJvci5pby8=\">Harbor (goharbor.io)</span></p>\n</blockquote>\n<ol start=\"2\">\n<li>使用 scp 将下载的官方镜像上传到服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scp <span class=\"token operator\">-</span>P 2000 <span class=\"token punctuation\">.</span>\\harbor-offline-installer-v2<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>tgz root@你服务器的ip:<span class=\"token operator\">/</span>root/</pre></td></tr></table></figure><p>注：使用 -P 参数可以指定 scp 的端口号</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPg4W1U.png\" alt=\"pPg4W1U.png\"></p>\n<ol start=\"3\">\n<li>使用下面的命令解压文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> harbor-offline-installer-v2.7.3.tgz</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 更改 harbor.yml.tmep 的内容</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> harbor.yml.tmep</pre></td></tr></table></figure><p>将 hostname 修改为自己的 ip 地址，然后将 https 全部注释掉，同时也可以更改密码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgHXgP.png\" alt=\"pPgHXgP.png\"></p>\n<ol start=\"5\">\n<li>使用 yum 下载 epel-release 及 docker-compose</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release <span class=\"token punctuation\">;</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span></pre></td></tr></table></figure><p>注：由于不可抗力的原因（我服务器带不动 [倒] ），下面的所有演示都是在我室友的虚拟机上完成的</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgORaD.png\" alt=\"pPgORaD.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgO2VO.png\" alt=\"pPgO2VO.png\"></p>\n<ol start=\"6\">\n<li>安装 harbor</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> ./harbor.yml.tmep ./harbor.yml <span class=\"token punctuation\">;</span> ./install.sh</pre></td></tr></table></figure><p>注：安装之前请先将 harbor.yml.tmep 文件改为 harbor.yml ，要不然会找不到文件</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgXj0K.png\" alt=\"pPgXj0K.png\"></p>\n<ol start=\"7\">\n<li>在浏览器中访问</li>\n</ol>\n<p>在浏览器中输入：</p>\n<blockquote>\n<p>你的 IP/harbor</p>\n<p>由于我用的是室友的电脑中的虚拟机来做的，在我电脑上是直接访问不到虚拟机里的，所以做了个 net 端口转发使我电脑能够访问，你们在自己的浏览器中就不需要输入端口号了，默认 80</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjrB6.png\" alt=\"pPgjrB6.png\"></p>\n<ol start=\"8\">\n<li>输入账号密码</li>\n</ol>\n<blockquote>\n<p>账号默认为 admin，密码默认为 Harbor12345，如果你更改了默认密码那就填你改的密码</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjXgs.png\" alt=\"pPgjXgs.png\"></p>\n<ol start=\"9\">\n<li>点击新建项目来新建一个仓库</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgvLdK.png\" alt=\"pPgvLdK.png\"></p>\n<ol start=\"10\">\n<li>修改 Docker 配置</li>\n</ol>\n<p>因为我使用的使 http 协议，而 docker 默认为 https，所以需要将本地私有仓库添加到信任仓库中</p>\n<p>使用下面的命令修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/docker/daemon.json</pre></td></tr></table></figure><p>注意：你在配置 daemon 文件的时候，除了最后一个键值对后面不用英文逗号，其他都要</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRpcxe.png\" alt=\"pPRpcxe.png\"></p>\n<ol start=\"11\">\n<li>刷新刚刚编辑的 daemon.json 文件并重启 docker</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon.json <span class=\"token punctuation\">;</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>给要推送的镜像添加 tag 标签</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> tag centos:centos7 <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 注：ip 后面的为你在仓库命名空间创建的仓库名</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAdS0.png\" alt=\"pPRAdS0.png\"></p>\n<ol start=\"13\">\n<li>在终端登录至搭建的 harbor 私有仓库</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> login http://192.168.100.10 <span class=\"token parameter variable\">-u</span> admin <span class=\"token parameter variable\">-p</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAUWq.png\" alt=\"pPRAUWq.png\"></p>\n<ol start=\"14\">\n<li>使用 push 命令上传镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> push <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRANYn.png\" alt=\"pPRANYn.png\"></p>\n<ol start=\"15\">\n<li>从浏览器进入 harbor 仓库管理界面</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAwlV.png\" alt=\"pPRAwlV.png\"></p>\n<p>可以看到，已经上传到 zero 仓库了</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker",
                "harbor"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "title": "Docker构建镜像及使用的笔记",
            "date_published": "2023-09-11T13:52:29.000Z",
            "content_html": "<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>本文并不记录详细过程，只是为了记录一下大概构建及使用的经过（还有踩坑记录，重点！！！）</p>\n<hr>\n<h4 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h4>\n<p>由于一些特殊原因，我需要一个包含 nodejs 的基础镜像来构建一个新的镜像，但是由于各种原因，没能下成，并且我也不知道哪些镜像中含有 nodejs，所以没办法，只能自己构建一个含有 nodejs 的镜像，为了使镜像最小化，我选择了 alpine 发行的 Linux 镜像</p>\n<p>直接 docker pull alpine ，没毛病，下好之后准备 run 的，结果发现根本没有 bash 这个命令，查过资料才发现，它还是用的 sh 。。。。</p>\n<p>好了，重新 run ， <code>docker run -it alpine /bin/sh</code>  .</p>\n<p>这下没毛病了，进了终端，然后竟然发现无从下手！！！（毕竟 alpine 跟 centos 不一样），一开始用的 yum ，结果直接 not found ，，查了资料发现，这玩意儿连 yum 都没有。。只能用 apk ，不愧是最小的 Linux .</p>\n<p>在用 apk 将 nodejs 下好后，直接构建，然后尼玛又少了 npm ，淦！</p>\n<p>同样的方法，用 apk 下好之后，构建！！！不出意外的话又出意外了，构建的时候有一步比较吃 cpu 资源 ，我用服务器构建了两次，</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "title": "Docker的使用-叁",
            "date_published": "2023-09-08T07:00:14.000Z",
            "content_html": "<h4 id=\"dockerfile的使用\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的使用\">#</a> Dockerfile 的使用</h4>\n<p>使用 Dockerfile 部署扫雷 web 程序</p>\n<ol>\n<li>\n<p>先将必要的文件上传至服务器，然后在当前目录创建 init.sh 和 dockerfile 文件</p>\n<p>友情提示：可以使用 scp 上传</p>\n<ul>\n<li>scp 不会用那就用下面的这条命令，我把资源都打包到我服务器上了，可以直接下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-f</span> source/* ./ <span class=\"token punctuation\">;</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> sour*</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6Celd.png\" alt=\"pP6Celd.png\"></p>\n</li>\n<li>\n<p>通过 vim 向 dockerfile  <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbml0LTk5MGcuc2g=\">及 init.sh</span> 写入以下内容：</p>\n</li>\n</ol>\n<blockquote>\n<p>请不要照抄我的配置，每句后面都有注释，稍微动一下脑子就行了，要不然寄</p>\n</blockquote>\n<p>使用 dockerfile 之前，你首先要确保你的当前目录下有以下几个文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><blockquote>\n<p>Centos-7.repo</p>\n<p>epel-7.repo</p>\n<p>saolei.zip</p>\n<p>dockerfile</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2luaXQuc2g=\">init.sh</span></p>\n</blockquote>\n<p>你还要确保你的本地有 centos:centos7 这个镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcdAF1.png\" alt=\"pPcdAF1.png\"></p>\n<p>没有怎么办？凉拌！！！</p>\n<p>用下面这条命令下载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull centos:centos7</pre></td></tr></table></figure><p>要是还报错，那你就自己百度去吧，问题奇奇怪怪的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos:centos7    <span class=\"token comment\"># 这是你要使用的基础镜像，记住改为自己的基础镜像 (如果你使用了上面的 pull 下载了镜像，就不需要改)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ADD Centos-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 这条命令的意思是添加 Centos7.repo 文件到容器的 /etc/yum.repos.d 下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ADD epel-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 同上</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>RUN yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> tomcat <span class=\"token function\">unzip</span> <span class=\"token function\">curl</span>    <span class=\"token comment\"># 运行 yum 命令安装 tomcat 、 unzip 、 curl ，其中 -y 表示安装过程中的选择全部为 yes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>WORKDIR /var/lib/tomcat/webapps/    <span class=\"token comment\"># 指定工作目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>RUN <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/saolei.zip    <span class=\"token comment\"># 从指定站点下载 saolei.zip 资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>RUN <span class=\"token function\">unzip</span> saolei.zip    <span class=\"token comment\"># 解压 saolei.zip 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>RUN <span class=\"token function\">mv</span> saolei ROOT     <span class=\"token comment\"># 将 saolei 移动至 ROOT 文件或目录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ADD init.sh /init.sh    <span class=\"token comment\"># 添加 init.sh 至 /init.sh</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>EXPOSE <span class=\"token number\">8080</span>    <span class=\"token comment\"># 声明 8080 端口 ，此时并没有开放此端口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>CMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span>,<span class=\"token string\">\"/init.sh\"</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 在容器启动时运行 /init.sh 脚本</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/libexec/tomcat/server start    <span class=\"token comment\"># 在指定目录启动 tomcat server 服务器</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>直接构建镜像</li>\n</ol>\n<blockquote>\n<p>docker build -t saolei:v1 .</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PyUf.png\" alt=\"pP6PyUf.png\"></p>\n<ol start=\"4\">\n<li>运行容器</li>\n</ol>\n<blockquote>\n<p>docker run -itd -P saolei:v1</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PWvj.png\" alt=\"pP6PWvj.png\"></p>\n<ol start=\"5\">\n<li>在浏览器通过 ” 你的 IP“: 开放的随机端口 /saolei.jsp 访问</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PjM9.png\" alt=\"pP6PjM9.png\"></p>\n<hr>\n<p>示例: <span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MC9zYW9sZWkuanNwP2xldmVsPTgmYW1wO2xlaU51bT04JmFtcDtzaXplPTg=\">扫雷</span></p>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "url": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "title": "Docker的使用-贰",
            "date_published": "2023-09-05T10:57:03.000Z",
            "content_html": "<h4 id=\"docker容器的应用\"><a class=\"markdownIt-Anchor\" href=\"#docker容器的应用\">#</a> Docker 容器的应用</h4>\n<blockquote>\n<p>前言：使用 Docker 部署 nginx 站点实现外网访问</p>\n</blockquote>\n<p>1. 先创建一个 nginx 站点</p>\n<blockquote>\n<p><code>docker run --name nginx-one -itd -P nginx:latest</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFU6s.png\" alt=\"nginx1\"></p>\n<p>2. 将本地的 <code>./nginx/www</code> 、 <code>./nginx/logs</code> 、 <code>./nginx/conf</code>  分别挂载到容器的 <code>/usr/share/nginx/html</code> 、 <code>/var/log/nginx</code> 、 <code>/etc/nginx/nginx.conf</code>  并且将主机端口 25568 映射到容器的 80 端口</p>\n<blockquote>\n<p><code>docker run -itd -p 25568:80 --name nginx-two -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/logs:/var/log/nginx -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf nginx:latest</code></p>\n<p>注意：挂载之前要用 <code>docker cp f9226f7ac7f7:/etc/nginx/nginx.conf ./nginx/conf/</code>  命令将 <code>nginx.conf</code>  文件 <code>copy</code>  到本地，要不然会报挂载错误，使用本命令时注意将容器 ID 改为自己的</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFwmq.png\" alt=\"nginx2\"></p>\n<p>3. 在本地的 <code>/root/nginx/www</code>  文件夹下创建 <code>index.html</code></p>\n<blockquote>\n<p><code>cd /root/nginx/www; vim index.html</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFaXn.png\" alt=\"nginx3\"></p>\n<p>4. 直接在浏览器访问你服务器的 ip 加之前指定的端口 (由于我服务器防火墙没开放 20000 端口，所以用 25568 代替一下)</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFNlj.png\" alt=\"nginx4\"></p>\n<blockquote>\n<p>点击连接访问<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2OA==\"> nginx 站点</span></p>\n</blockquote>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "title": "Docker的使用-壹",
            "date_published": "2023-09-05T01:14:52.000Z",
            "content_html": "<h4 id=\"docker使用\"><a class=\"markdownIt-Anchor\" href=\"#docker使用\">#</a> Docker 使用</h4>\n<ul>\n<li>在 docker 容器内运行应用程序</li>\n</ul>\n<blockquote>\n<p><code>docker run ubuntu:15.10 /bin/echo &quot;hello world&quot;</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsklv9.png\" alt=\"docker使用1\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>docker</code> :Docker 的二进制执行文件</li>\n<li><code>run</code> : 与 Docker 组合运行一个容器</li>\n<li><code>ubuntu:15.10</code> : 要运行的镜像，本地没有就会从镜像仓库下载</li>\n<li><code>/bin/echo &quot;hello world&quot;</code> : 在启动的容器里执行 <code>echo</code>  命令</li>\n</ol>\n<ul>\n<li>与 docker 容器进行交互</li>\n</ul>\n<blockquote>\n<p><code>docker run -t -i centos:centos7 /bin/bash</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskQgJ.png\" alt=\"docker使用2\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>-t</code> : 在新的容器里指定一个终端</li>\n<li><code>-i</code> : 允许与指定的终端进行交互</li>\n</ol>\n<p>注意：可以用 <code>exit</code>  退出伪终端</p>\n<ul>\n<li>通过 ps 查看正在运行的容器</li>\n</ul>\n<blockquote>\n<p><code>docker ps</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskM34.png\" alt=\"docker的使用3\"></p>\n<p>参数解析：</p>\n<ol>\n<li>\n<p><code>CONTAINER ID</code> : 容器 ID</p>\n</li>\n<li>\n<p><code>IMAGE</code> : 使用的镜像</p>\n</li>\n<li>\n<p><code>COMMAND</code> : 启动镜像时运行的命令</p>\n</li>\n<li>\n<p><code>CREATED</code> : 容器的创建时间</p>\n</li>\n<li>\n<p><code>STATUS</code> : 容器的状态 （容器的七种状态：</p>\n<p>1. <code>created</code>  已创建</p>\n<p>2. <code>restaring</code>  重启中</p>\n<p>3. <code>running</code>  或 <code>Up</code>  运行中</p>\n<p>4. <code>removing </code> 迁移中</p>\n<p>5. <code>paused </code> 暂停</p>\n<p>6. <code>exited </code> 停止</p>\n<p>7. <code>dead </code> 死亡）</p>\n</li>\n<li>\n<p><code>PORTS</code> : 容器的端口信息和使用的连接类型（ <code>TCP/UDP</code> ）</p>\n</li>\n<li>\n<p><code>NAMES</code> : 自动分配的容器名称</p>\n</li>\n</ol>\n<h5 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h5>\n<ol>\n<li><code>docker images</code>         \t列出本地主机上的镜像</li>\n<li><code>docker search centos[:7] </code>       \t 搜索镜像</li>\n<li><code>docker pull centos[:centos7] </code>       \t 下载镜像</li>\n<li><code>docker tag centos:centos7 mycentos:centos7 </code>        \t为镜像添加标签，其中分号前为镜像类型，分号后为镜像版本</li>\n<li><code>docker history centos:centos7 </code>        \t查看镜像的构建历史信息</li>\n<li><code>docker rmi centos:centos7</code>         \t删除镜像（可以使用 <code>-f</code>  强制删除，在删除使用 tag 标签标记的镜像时可以不用加 <code>-f</code>  参数）</li>\n<li><code>docker image prune [-a] [-f]</code>         清理镜像，加 <code>-a</code>  参数即删除所有无用的镜像，不仅仅是临时镜像  <code>-f</code>  参数即可强制删除镜像而不提示</li>\n<li><code>docker image save centos:centos7 &gt; ./my-centos7.tar.gz </code>        导出镜像到当前目录，格式为一个压缩包（可以自行选择导出的位置）</li>\n<li><code>docker image load [-i] [-q] ./my-centos7.tar.gz</code>         将 centos7 的镜像压缩包导入， <code>-i</code>  参数是指定导入的文件， <code>-q</code>  参数是精简输出信息</li>\n<li><code>docker image inspect [-f] &#123; &#123;&quot;.Os&quot;&#125; &#125; centos:centos7</code>         查看镜像信息，可以使用 <code>-f</code>  参数获取指定信息</li>\n<li><code>docker restart $(docker ps -a -q)</code>  重启所有 docker 容器</li>\n</ol>\n<p>注意：[ ] 里的为可选内容，选择具体版本</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "title": "Docker部署",
            "date_published": "2023-09-04T08:53:57.000Z",
            "content_html": "<h3 id=\"docker部署\"><a class=\"markdownIt-Anchor\" href=\"#docker部署\">#</a> Docker 部署</h3>\n<blockquote>\n<p>前言：部署 docker 要先确保 yum 源保持最新</p>\n</blockquote>\n<hr>\n<p>1. 先安装运行 docker 所必要的工具包</p>\n<blockquote>\n<p><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVkQJ.png\" alt=\"docker1\"></p>\n<p>2. 添加 docker 源</p>\n<blockquote>\n<p><code>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrViz4.png\" alt=\"pPrViz4.png\"></p>\n<p>3. 修改 docker 源为阿里源</p>\n<blockquote>\n<p><code>sed -i 's+download.docker.com+mirrors.aliyun.com/docker-ce+' /etc/yum.repos.d/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVPWF.png\" alt=\"pPrVPWF.png\"></p>\n<p>4. 更新 docker 源并安装 docker</p>\n<blockquote>\n<p>更新源  <code>yum makecache fast</code></p>\n<p>安装  <code>yum  -y install docker-ce</code></p>\n<p>注意：在 Centos8 中本命令不适用，将 fast 去掉即可</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrV9iT.png\" alt=\"pPrV9iT.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVSoV.png\" alt=\"pPrVSoV.png\"></p>\n<p>5. 重启 docker 服务并设置下次启动生效</p>\n<blockquote>\n<p>重新启动  <code>systemctl  restart  docker</code></p>\n<p>设置下次启动生效  <code>systemctl  enable  docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVCJU.png\" alt=\"pPrVCJU.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVAy9.png\" alt=\"pPrVAy9.png\"></p>\n<p>6. 配置镜像加速器</p>\n<blockquote>\n<p>用 vim 创建 <code>daemon.json</code>  文件</p>\n<p><code>vim /etc/docker/daemon.json</code></p>\n<p>写入以下内容:</p>\n<pre><code>&#123;\n&quot;registry-mirrors&quot;: [&quot;https://14lrk6zd.mirror.aliyuncs.com&quot;]\n&#125;\n</code></pre>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVELR.png\" alt=\"pPrVELR.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVZe1.png\" alt=\"pPrVZe1.png\"></p>\n<p>7. 重新加载并重启 docker</p>\n<blockquote>\n<p>重新加载  <code>systemctl  daemon-reload</code></p>\n<p>重启  <code>systemctl restart docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVedx.png\" alt=\"pPrVedx.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVmo6.png\" alt=\"pPrVmo6.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        }
    ]
}