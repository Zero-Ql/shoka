{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"json\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%89%8D%E7%AB%AF/javascript/JSON/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%89%8D%E7%AB%AF/javascript/JSON/",
            "title": "JSON",
            "date_published": "2024-04-03T02:05:34.000Z",
            "content_html": "<h3 id=\"json-简介\"><a class=\"markdownIt-Anchor\" href=\"#json-简介\">#</a> JSON 简介</h3>\n<blockquote>\n<p><code>JSON</code> : <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(  <code>JavaScript</code>  对象表示法)</p>\n<p><code>JSON</code>  是存储和交换文本信息的语法，类似  <code>XML</code> 。</p>\n<p><code>JSON</code>  比  <code>XML</code>  更小、更快，更易解析。</p>\n<p><code>JSON</code>  易于人阅读和编写。</p>\n<p><code>C</code> 、 <code>Python</code> 、 <code>C++</code> 、 <code>Java</code> 、 <code>PHP</code> 、 <code>Go</code>  等编程语言都支持  <code>JSON</code></p>\n</blockquote>\n<p>例子：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"sites\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bing\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.bing.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"google\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.google.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"baidu\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.baidu.com\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h3>\n<p>在  <code>JSON</code>  中使用 <code>&#123;&#125;</code>  来定义一个对象。左括号 <code>&#123;</code> 开始，右括号 <code>&#125;</code>  结束。每个  <code>&quot;键&quot;</code>  后跟一个冒号  <code>:</code>  ，名称 / 值对使用逗号  <code>,</code>  分隔</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"嵌套对象\"><a class=\"markdownIt-Anchor\" href=\"#嵌套对象\">#</a> 嵌套对象</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"student\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"namelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"name1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token property\">\"name2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token property\">\"agelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"age1\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token property\">\"age2\"</span><span class=\"token operator\">:</span><span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>中括号  <code>[]</code>  保存的数组是值（ <code>value</code> ）的有序集合。一个数组以左中括号  <code>[</code>  开始， 右中括号  <code>]</code>  结束，值之间使用逗号  <code>,</code>  分隔。</p>\n<p>值（ <code>value</code> ）可以是双引号括起来的字符串（ <code>string</code> ）、数值 ( <code>number</code> )、 <code>true</code> 、 <code>false</code> 、  <code>null</code> 、对象（ <code>object</code> ）或者数组（ <code>array</code> ），它们是可以嵌套，值不能为键值对。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"嵌套数组\"><a class=\"markdownIt-Anchor\" href=\"#嵌套数组\">#</a> 嵌套数组</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"jsonparse\"><a class=\"markdownIt-Anchor\" href=\"#jsonparse\">#</a>  <code>JSON.parse()</code></h3>\n<p>此方法为  <code>JavaScript</code>  的内置函数，用于将  <code>JSON</code>  字符串解析为原生  <code>JavaScript</code>  对象或值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>text</code></p>\n<p>​\t要被解析成  <code>JavaScript</code>  值的字符串</p>\n<p><code>reviver</code>  (可选)</p>\n<p>​\t转换器，如果传入该参数 (函数)，可以用来修改解析生成的原始值，调用时机在  <code>parse</code>  函数返回之前</p>\n<p>返回值</p>\n<p>​\t与给定的  <code>JSON text</code>  相对应的  <code>Object</code> 、 <code>Array</code> 、 <code>string</code> 、 <code>number</code> 、 <code>boolean</code>  或者  <code>null</code>  值</p>\n<p>异常</p>\n<p>​\t若传入的字符串不符合 JSON 规范，则会抛出此异常</p>\n<p>使用  <code>reviver</code>  函数</p>\n<blockquote>\n<p>如果指定了  <code>reviver</code>  函数，则解析出的  <code>JavaScript</code>  值（解析值）会经过一次转换后才将被最终返回（返回值）。更具体点讲就是：解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用  <code>reviver</code>  函数，在调用过程中，当前属性所属的对象会作为  <code>this</code>  值，当前属性名和属性值会分别作为第一个和第二个参数传入  <code>reviver</code>  中。如果  <code>reviver</code>  返回  <code>undefined</code> ，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。</p>\n<p>当遍历到最顶层的值（解析值）时，传入  <code>reviver</code>  函数的参数会是空字符串  <code>&quot;&quot;</code> （因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的  <code>this</code>  值会是  <code>&#123;&quot;&quot;: 修改过的解析值&#125;</code> ，在编写  <code>reviver</code>  函数时，要注意到这个特例。（这个函数的遍历顺序依照：从最内层开始，按照层级顺序，依次向外遍历）</p>\n</blockquote>\n<p>更多请参阅:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9wYXJzZQ==\">JSON.parse() - JavaScript | MDN (mozilla.org)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc29uL2pzb24tdHV0b3JpYWwuaHRtbA==\">JSON 教程 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "JavaScript",
                "JSON"
            ]
        }
    ]
}