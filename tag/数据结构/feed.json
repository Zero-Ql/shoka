{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"数据结构\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/DataStructure/BinaryTree/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "http://yunyat.cloud/MyCodingBook/DataStructure/BinaryTree/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "二叉树之打印二叉树",
            "date_published": "2024-11-15T09:16:25.000Z",
            "content_html": "<h2 id=\"打印\"><a class=\"markdownIt-Anchor\" href=\"#打印\">#</a> 打印</h2>\n<div class=\"note info\">\n<p>二叉树的遍历是指按某种顺序访问二叉树中的所有结点，使得每个节点都被访问，且仅被访问一次。</p>\n</div>\n<p>示例二叉树：</p>\n<figure class=\"highlight mathematica\"><figcaption data-lang=\"mathematica\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">/</span> \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    B   C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">/</span>   <span class=\"token operator\">/</span> \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  D   E   F</pre></td></tr></table></figure><p>源码：</p>\n<details class=\"success\"><summary>test.java</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a 示例</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Node</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Optional</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author: QSky</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date: 2024/11/18 下午 5:25</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @project: BT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @package: PACKAGE_NAME</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">T_Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 构造二叉树</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Node</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 打印二叉树</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 右 - 根 - 左顺序打印二叉树</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归终止条件：当前节点为空</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 递归打印右子树</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 打印当前节点，按深度缩进</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每一层打印四个空格缩进</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 递归打印左子树</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"success\"><summary>Node.java</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a 示例</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>datastructure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Optional</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author: QSky</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @date: 2024/11/15 下午 5:55</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @project: BT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @package: com.example.datastructure</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<p>输出结果：</p>\n<pre><code>        ---F\n    ---C\n        ---E\n---A\n    ---B\n        ---D\n</code></pre>\n<h2 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h2>\n<ol>\n<li>\n<p>进入  <code>printTree(A, 0)</code></p>\n<ol>\n<li>root 节点为  <code>A</code>  ，不为  <code>NULL</code> ，不会返回。</li>\n<li>递归打印右子树：调用  <code>printTree(root.right, 1);</code> ，即  <code>printTree(C, 1);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(C, 1)</code></p>\n<ol>\n<li>root 节点为  <code>C</code>  ，不是  <code>NULL</code>  ，不会返回。</li>\n<li>递归打印右子树，调用  <code>printTree(C.right, 2)</code> ， 即  <code>printTree(F, 2);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(F, 1)</code></p>\n<ol>\n<li>root 节点为  <code>F</code>  ，不是  <code>NULL</code>  ，不会返回。</li>\n<li>递归打印右子树，调用  <code>printTree(F.right, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code></p>\n<ol>\n<li>root 节点为  <code>NULL</code>  ，直接返回，不做任何操作。</li>\n<li>返回到上一层，继续  <code>printTree(F, 2)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(F, 2)</code></p>\n<ol>\n<li>打印  <code>F</code>  的数据， 由于  <code>n = 2</code> ， 会缩进两个层次，输出格式为： <code>\t\t---F</code></li>\n<li>递归打印左子树：调用  <code>printTree(F.left, 3)</code> ，即  <code>printTree(NULL, 3)</code> 。</li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （左子树）</p>\n<ol>\n<li>root 是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(C, 1)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(C, 1)</code></p>\n<ol>\n<li>打印 C 的数据，缩进一个层次，输出格式为： <code>\t---C</code></li>\n<li>递归打印左子树：调用  <code>printTree(C.left, 2)</code> ，即  <code>printTree(E, 2)</code> 。</li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(E, 2)</code></p>\n<ol>\n<li>root 是  <code>E</code> ， 不是  <code>NULL</code> 。</li>\n<li>递归打印右子树，调用  <code>printTree(E.right, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （右子树）</p>\n<ol>\n<li>root 是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(E, 2)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(E, 2)</code></p>\n<ol>\n<li>打印 E 的数据，缩进两个层次，输出格式为： <code>\t\t---E</code></li>\n<li>递归打印左子树，调用  <code>printTree(E.left, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （左子树）</p>\n<ol>\n<li><code>root</code>  是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(A, 0)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(A, 0)</code></p>\n<ol>\n<li>打印 A 的数据，没有缩进，输出格式为： <code>---A</code></li>\n<li>递归打印左子树：调用  <code>printTree(A.left, 1)</code> ，即  <code>printTree(B, 1)</code> 。</li>\n</ol>\n</li>\n</ol>\n<p>…</p>\n<p>省略部分逻辑类比上层，不再赘述。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这个递归遍历过程是按照 “右 - 根 - 左” 的顺序进行的，先遍历右子树，再打印根节点，最后遍历左子树。</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "数据结构",
                "算法"
            ]
        }
    ]
}