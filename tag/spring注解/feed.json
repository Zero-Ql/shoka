{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"spring注解\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "title": "spring开发注解集合",
            "date_published": "2024-04-16T03:35:58.000Z",
            "content_html": "<h3 id=\"spring-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-的常用注解\">#</a> Spring 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Component(value=&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类会被交由  <code>spring</code>  容器管理</p>\n<p>2）value 值为 spring 创建该类对象的 id 值</p>\n<p>3）该注解使用类的无参构造方法创建对象</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Value(&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行基本类型的注入，在括号内的引号中键入属性值</p>\n<p>2）可以给  <code>set</code>  方法进行此注释</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Autowired</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行引用类型的注入，即 <code>bean</code>  对象的注入</p>\n<p>2）可以声明在字段 (属性) 或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byType</code>  注入，通过此注解的对象需要在 <code>IoC</code>  容器中存在，否则需要加上 <code>required=false</code> ，表示忽略当前要注入的 <code>bean</code> ，如果有就直接注入，没有跳过，不会报错</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ComponentScan</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注释使组件扫描器扫描本类此包下的  <code>bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Configuration</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解定义配置类</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Bean</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  中用于方法级别的注解，主要用于在  <code>Java</code>  配置类中定义一个  <code>Bean</code>  。</p>\n<p>2）此注解告诉  <code>spring</code>  这个方法将返回一个对象，该对象应该被注册为  <code>spring</code>  容器中的一个  <code>Bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestControllerAdvice</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  框架的一个注解，用于定义一个全局的异常处理控制器。通常与  <code>@ExceptionHandler</code>  注解一起使用。</p>\n<p>2） <code>@RestControllerAdvice</code>  等同于  <code>@ControllerAdvice</code>  加上  <code>@ResponseBody</code>  注解，表示该类中的方法负责处理异常，并将处理结果作为 <code>HTTP</code>  响应的主体返回。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ResponseStatus</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为  <code>Spring</code>  框架提供的一个注解，用于指示方法应该返回特定的 HTTP 状态码和可选的原因短语。</p>\n<p>2）接收  <code>value</code>  和  <code>code(可选)</code>  ，类型为  <code>HTTPStatus</code>  枚举类的常量值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring-mvc-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc-的常用注解\">#</a> Spring MVC 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Controller</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类，其中的方法如果没有被此注解修饰，一般都是返回一个视图（一个具体的页面），这个视图会和模板引擎结合在一起使用</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestController</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解基本上等于  <code>@RequesBody</code>   +  <code>@Controller</code></p>\n<p>2）使用此注解会直接返回一个 <code>JSON</code>  数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestMapping</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解来映射请求，也就是通过它来指定控制器可以处理那些  <code>URL</code>  请求</p>\n<p>2）此注解除了  <code>name()</code>  方法，其他的方法都可以定义多个属性值，如  <code>value()</code>  和  <code>path()</code>  都可以同时定义多个字符串值来接收多个  <code>URL</code>  请求</p>\n</blockquote>\n<ul>\n<li>\n<p><em>path</em>：可以处理的  <code>url</code>  路径， <code>value</code>  效果和  <code>path</code>  相同</p>\n</li>\n<li>\n<p><em>method</em>：此属性用来定义浏览器的请求方式，可以使用此属性指定方法仅处理哪些请求。有四种基本请求方式：1.  <code>RequestMethod.GET</code> （查）2.  <code>RequestMethod.POST</code> （增） 3.  <code>RequestMethod.PUT</code> （改） 4.  <code>RequestMethod.DELETE</code> （删）。常用的只有 1、2 两种</p>\n</li>\n<li>\n<p><em>params</em>：可以使用此属性限制请求参数，只有带指定参数的请求才会被响应</p>\n</li>\n<li>\n<p><em>headers</em>：此属性表示请求头，可以使用此属性限制客户端发来的请求</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@PathVariable</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）可以通过此注解将  <code>URL</code>  中的占位符绑定到控制器的处理方法的参数中，占位符可以在任何位置，占位符使用 <code>&#123;&#125;</code>  括起来，如： <code>@RequestMapping(&quot;/books/&#123;id&#125;/&#123;authorName&#125;&quot;)</code></p>\n<p>2）通过此注解可以将  <code>URL</code>  中的参数接收，URL 中的参数名需与方法接收参数名保持一致，否则无法接收。可以通过  <code>@PathVariable</code>  的  <code>value</code>  属性指定参数名</p>\n<p>3）此注解是直接放在形参中的，如： <code>public String testBook(@PathVariable Integer id, @PathVariable(value=&quot;authorName&quot;) String name)&#123;&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestParam</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）通过此注解从  <code>request</code> （请求） 中获取数值。</p>\n<p>2）与上一个注解的区别在于请求数据风格不同，如： <code>http://localhost:8080/user?id=1</code></p>\n</blockquote>\n<ul>\n<li><code>value</code> ：当传入的参数和方法参数名不一致时，可以使用  <code>value</code>  指定传入的参数名</li>\n<li><code>required</code> ：是布尔值，用来表示该参数是否为必须传入</li>\n<li><code>defaultValue</code> ：默认值，表示请求中没有同名的参数时的默认值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestBody</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）将  <code>HTTP</code>  请求体数据自动绑定到指定类型的参数</p>\n<p>2）支持多种数据格式（如  <code>JSON</code> 、 <code>XML</code> ）与  <code>Java</code>  类型（如  <code>POJO</code> 、 <code>List</code> 、 <code>Map</code> ）的映射，借助  <code>HttpMessageConverter</code>  实现</p>\n<p>3）可与  <code>@RequestParam</code> 、 <code>@PathVariable</code>  等注解共存，以便在一个方法中处理多种来源的请求数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ExceptionHandler</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是 <code>Spring MVC</code>  中用于标记处理特定异常的方法</p>\n<p>2）可以接受多种异常 <code>@ExceptionHandler(value = &#123;NullPointerException.class, IllegalArgumentException.class, IllegalStateException.class&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他注解\"><a class=\"markdownIt-Anchor\" href=\"#其他注解\">#</a> 其他注解</h3>\n<p><code>@Resource</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为 <code>J2EE</code>  提供</p>\n<p>2）跟 <code>@Autowired</code>  一样，都是为 <code>bean</code>  对象注入，同样可以声明到字段或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byName</code>  注入，没有则通过 <code>byType</code>  方式注入</p>\n<p>更多关于此注解的细节参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTkwNDk0L2FydGljbGUvZGV0YWlscy8xMTQ0NDQzNzE=\">@Autowired 和 @Resource 注解的区别和联系</span></p>\n</blockquote>\n</li>\n</ul>\n<p><code>@WebServlet</code></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"注入方式\"><a class=\"markdownIt-Anchor\" href=\"#注入方式\">#</a> 注入方式</h3>\n<ul>\n<li><code>byName</code>\n<ul>\n<li>简单说就是使用变量名去 <code>IoC</code>  容器中匹配合适 <code>bean</code>  的 <code>id</code>  属性</li>\n</ul>\n</li>\n<li><code>byType</code>\n<ul>\n<li>使用变量类型去匹配 <code>bean</code>  的 <code>class</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>具体可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdhODQyNDI4L2FydGljbGUvZGV0YWlscy81NDY5NDQ4NA==\">Spring 中的 byName 与 byType_springboot byname 和 bytype</span></p>\n<h3 id=\"封装实体类接收表单数据\"><a class=\"markdownIt-Anchor\" href=\"#封装实体类接收表单数据\">#</a> 封装实体类接收表单数据</h3>\n<p>在表单数据过多时，可以封装实体类接收参数</p>\n<p><em>Demo</em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 直接传入实体类的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>getUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "spring注解"
            ]
        }
    ]
}