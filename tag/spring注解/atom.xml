<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yunyat.cloud</id>
    <title>上善若水 • Posts by &#34;spring注解&#34; tag</title>
    <link href="http://yunyat.cloud" />
    <updated>2024-04-16T03:35:58.000Z</updated>
    <category term="hexo" />
    <category term="原创" />
    <category term="Linux" />
    <category term="电脑技术" />
    <category term="SSH" />
    <category term="Docker" />
    <category term="harbor" />
    <category term="可道云" />
    <category term="markdown" />
    <category term="mermaid" />
    <category term="测试" />
    <category term="2023" />
    <category term="年度总结" />
    <category term="记录" />
    <category term="暑假工" />
    <category term="java" />
    <category term="junit" />
    <category term="python" />
    <category term="selenium" />
    <category term="MySQL" />
    <category term="shell" />
    <category term="游戏" />
    <category term="我的世界" />
    <category term="lambda表达式" />
    <category term="java线程" />
    <category term="Java" />
    <category term="servlet" />
    <category term="javafx" />
    <category term="集合" />
    <category term="JavaScript" />
    <category term="JSON" />
    <category term="Hexo" />
    <category term="教程" />
    <category term="Git" />
    <category term="maven" />
    <category term="cAdvisor" />
    <category term="Prometheus" />
    <category term="Grafana" />
    <category term="破解" />
    <category term="Typora" />
    <category term="xmind" />
    <category term="思维导图" />
    <category term="Ubuntu" />
    <category term="frp" />
    <category term="分享" />
    <category term="计算机" />
    <category term="mybatis" />
    <category term="mybatisplus" />
    <category term="spring" />
    <category term="ResponseEntity" />
    <category term="springboot" />
    <category term="springmvc" />
    <category term="spring注解" />
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/</id>
        <title>spring开发注解集合</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/"/>
        <content type="html">&lt;h3 id=&#34;spring-的常用注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-的常用注解&#34;&gt;#&lt;/a&gt; Spring 的常用注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Component(value=&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解的类会被交由  &lt;code&gt;spring&lt;/code&gt;  容器管理&lt;/p&gt;
&lt;p&gt;2）value 值为 spring 创建该类对象的 id 值&lt;/p&gt;
&lt;p&gt;3）该注解使用类的无参构造方法创建对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Value(&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解进行基本类型的注入，在括号内的引号中键入属性值&lt;/p&gt;
&lt;p&gt;2）可以给  &lt;code&gt;set&lt;/code&gt;  方法进行此注释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解进行引用类型的注入，即 &lt;code&gt;bean&lt;/code&gt;  对象的注入&lt;/p&gt;
&lt;p&gt;2）可以声明在字段 (属性) 或 &lt;code&gt;setter&lt;/code&gt;  方法上&lt;/p&gt;
&lt;p&gt;3）默认使用 &lt;code&gt;byType&lt;/code&gt;  注入，通过此注解的对象需要在 &lt;code&gt;IoC&lt;/code&gt;  容器中存在，否则需要加上 &lt;code&gt;required=false&lt;/code&gt; ，表示忽略当前要注入的 &lt;code&gt;bean&lt;/code&gt; ，如果有就直接注入，没有跳过，不会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注释使组件扫描器扫描本类此包下的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解定义配置类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解是  &lt;code&gt;spring&lt;/code&gt;  中用于方法级别的注解，主要用于在  &lt;code&gt;Java&lt;/code&gt;  配置类中定义一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;2）此注解告诉  &lt;code&gt;spring&lt;/code&gt;  这个方法将返回一个对象，该对象应该被注册为  &lt;code&gt;spring&lt;/code&gt;  容器中的一个  &lt;code&gt;Bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RestControllerAdvice&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解是  &lt;code&gt;spring&lt;/code&gt;  框架的一个注解，用于定义一个全局的异常处理控制器。通常与  &lt;code&gt;@ExceptionHandler&lt;/code&gt;  注解一起使用。&lt;/p&gt;
&lt;p&gt;2） &lt;code&gt;@RestControllerAdvice&lt;/code&gt;  等同于  &lt;code&gt;@ControllerAdvice&lt;/code&gt;  加上  &lt;code&gt;@ResponseBody&lt;/code&gt;  注解，表示该类中的方法负责处理异常，并将处理结果作为 &lt;code&gt;HTTP&lt;/code&gt;  响应的主体返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ResponseStatus&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解为  &lt;code&gt;Spring&lt;/code&gt;  框架提供的一个注解，用于指示方法应该返回特定的 HTTP 状态码和可选的原因短语。&lt;/p&gt;
&lt;p&gt;2）接收  &lt;code&gt;value&lt;/code&gt;  和  &lt;code&gt;code(可选)&lt;/code&gt;  ，类型为  &lt;code&gt;HTTPStatus&lt;/code&gt;  枚举类的常量值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-mvc-的常用注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-mvc-的常用注解&#34;&gt;#&lt;/a&gt; Spring MVC 的常用注解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解的类，其中的方法如果没有被此注解修饰，一般都是返回一个视图（一个具体的页面），这个视图会和模板引擎结合在一起使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RestController&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解基本上等于  &lt;code&gt;@RequesBody&lt;/code&gt;   +  &lt;code&gt;@Controller&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2）使用此注解会直接返回一个 &lt;code&gt;JSON&lt;/code&gt;  数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）使用此注解来映射请求，也就是通过它来指定控制器可以处理那些  &lt;code&gt;URL&lt;/code&gt;  请求&lt;/p&gt;
&lt;p&gt;2）此注解除了  &lt;code&gt;name()&lt;/code&gt;  方法，其他的方法都可以定义多个属性值，如  &lt;code&gt;value()&lt;/code&gt;  和  &lt;code&gt;path()&lt;/code&gt;  都可以同时定义多个字符串值来接收多个  &lt;code&gt;URL&lt;/code&gt;  请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;path&lt;/em&gt;：可以处理的  &lt;code&gt;url&lt;/code&gt;  路径， &lt;code&gt;value&lt;/code&gt;  效果和  &lt;code&gt;path&lt;/code&gt;  相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;method&lt;/em&gt;：此属性用来定义浏览器的请求方式，可以使用此属性指定方法仅处理哪些请求。有四种基本请求方式：1.  &lt;code&gt;RequestMethod.GET&lt;/code&gt; （查）2.  &lt;code&gt;RequestMethod.POST&lt;/code&gt; （增） 3.  &lt;code&gt;RequestMethod.PUT&lt;/code&gt; （改） 4.  &lt;code&gt;RequestMethod.DELETE&lt;/code&gt; （删）。常用的只有 1、2 两种&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;params&lt;/em&gt;：可以使用此属性限制请求参数，只有带指定参数的请求才会被响应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;headers&lt;/em&gt;：此属性表示请求头，可以使用此属性限制客户端发来的请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@PathVariable&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）可以通过此注解将  &lt;code&gt;URL&lt;/code&gt;  中的占位符绑定到控制器的处理方法的参数中，占位符可以在任何位置，占位符使用 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  括起来，如： &lt;code&gt;@RequestMapping(&amp;quot;/books/&amp;#123;id&amp;#125;/&amp;#123;authorName&amp;#125;&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2）通过此注解可以将  &lt;code&gt;URL&lt;/code&gt;  中的参数接收，URL 中的参数名需与方法接收参数名保持一致，否则无法接收。可以通过  &lt;code&gt;@PathVariable&lt;/code&gt;  的  &lt;code&gt;value&lt;/code&gt;  属性指定参数名&lt;/p&gt;
&lt;p&gt;3）此注解是直接放在形参中的，如： &lt;code&gt;public String testBook(@PathVariable Integer id, @PathVariable(value=&amp;quot;authorName&amp;quot;) String name)&amp;#123;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestParam&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）通过此注解从  &lt;code&gt;request&lt;/code&gt; （请求） 中获取数值。&lt;/p&gt;
&lt;p&gt;2）与上一个注解的区别在于请求数据风格不同，如： &lt;code&gt;http://localhost:8080/user?id=1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; ：当传入的参数和方法参数名不一致时，可以使用  &lt;code&gt;value&lt;/code&gt;  指定传入的参数名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;required&lt;/code&gt; ：是布尔值，用来表示该参数是否为必须传入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultValue&lt;/code&gt; ：默认值，表示请求中没有同名的参数时的默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestBody&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）将  &lt;code&gt;HTTP&lt;/code&gt;  请求体数据自动绑定到指定类型的参数&lt;/p&gt;
&lt;p&gt;2）支持多种数据格式（如  &lt;code&gt;JSON&lt;/code&gt; 、 &lt;code&gt;XML&lt;/code&gt; ）与  &lt;code&gt;Java&lt;/code&gt;  类型（如  &lt;code&gt;POJO&lt;/code&gt; 、 &lt;code&gt;List&lt;/code&gt; 、 &lt;code&gt;Map&lt;/code&gt; ）的映射，借助  &lt;code&gt;HttpMessageConverter&lt;/code&gt;  实现&lt;/p&gt;
&lt;p&gt;3）可与  &lt;code&gt;@RequestParam&lt;/code&gt; 、 &lt;code&gt;@PathVariable&lt;/code&gt;  等注解共存，以便在一个方法中处理多种来源的请求数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解是 &lt;code&gt;Spring MVC&lt;/code&gt;  中用于标记处理特定异常的方法&lt;/p&gt;
&lt;p&gt;2）可以接受多种异常 &lt;code&gt;@ExceptionHandler(value = &amp;#123;NullPointerException.class, IllegalArgumentException.class, IllegalStateException.class&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其他注解&#34;&gt;#&lt;/a&gt; 其他注解&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;1）此注解为 &lt;code&gt;J2EE&lt;/code&gt;  提供&lt;/p&gt;
&lt;p&gt;2）跟 &lt;code&gt;@Autowired&lt;/code&gt;  一样，都是为 &lt;code&gt;bean&lt;/code&gt;  对象注入，同样可以声明到字段或 &lt;code&gt;setter&lt;/code&gt;  方法上&lt;/p&gt;
&lt;p&gt;3）默认使用 &lt;code&gt;byName&lt;/code&gt;  注入，没有则通过 &lt;code&gt;byType&lt;/code&gt;  方式注入&lt;/p&gt;
&lt;p&gt;更多关于此注解的细节参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTkwNDk0L2FydGljbGUvZGV0YWlscy8xMTQ0NDQzNzE=&#34;&gt;@Autowired 和 @Resource 注解的区别和联系&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@WebServlet&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注入方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入方式&#34;&gt;#&lt;/a&gt; 注入方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byName&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;简单说就是使用变量名去 &lt;code&gt;IoC&lt;/code&gt;  容器中匹配合适 &lt;code&gt;bean&lt;/code&gt;  的 &lt;code&gt;id&lt;/code&gt;  属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byType&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;使用变量类型去匹配 &lt;code&gt;bean&lt;/code&gt;  的 &lt;code&gt;class&lt;/code&gt;  属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可以参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdhODQyNDI4L2FydGljbGUvZGV0YWlscy81NDY5NDQ4NA==&#34;&gt;Spring 中的 byName 与 byType_springboot byname 和 bytype&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;封装实体类接收表单数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#封装实体类接收表单数据&#34;&gt;#&lt;/a&gt; 封装实体类接收表单数据&lt;/h3&gt;
&lt;p&gt;在表单数据过多时，可以封装实体类接收参数&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Demo&lt;/em&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Setter&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Getter&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Service&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; username&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/login&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt; user&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 直接传入实体类的对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;getUsername&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ok&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="原创" />
        <category term="java" />
        <category term="spring注解" />
        <updated>2024-04-16T03:35:58.000Z</updated>
    </entry>
</feed>
