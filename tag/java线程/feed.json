{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"java线程\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/Java/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/Java/",
            "title": "Java线程池",
            "date_published": "2023-04-28T15:15:03.000Z",
            "content_html": "<h5 id=\"future\"><a class=\"markdownIt-Anchor\" href=\"#future\">#</a> Future</h5>\n<p>此类用于异步存储计算结果</p>\n<ul>\n<li>\n<p>方法摘要：</p>\n<p><code>get()</code></p>\n<ul>\n<li>此方法会阻塞当前线程直到任务完成，然后检索其结果</li>\n</ul>\n</li>\n</ul>\n<p><code>get(long timeout ,TimeUnit unit)</code></p>\n<ul>\n<li>此方法也会阻塞当前线程，但是到指定时间后立即返回，然后检索其结果 (如果任务完成)</li>\n</ul>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<p><code>isCancelled()</code></p>\n<ul>\n<li>如果任务在完成之前被取消，则返回 true。</li>\n</ul>\n<p><code>isDone()</code></p>\n<ul>\n<li>如果任务结束，无论是正常完成、中途取消，还是发生异常，都返回 true。</li>\n</ul>\n<h5 id=\"runnable任务和calable任务\"><a class=\"markdownIt-Anchor\" href=\"#runnable任务和calable任务\">#</a> Runnable 任务和 Calable 任务</h5>\n<ul>\n<li>\n<p><code>Runnable</code></p>\n</li>\n<li>\n<p>此方法没有返回值也不会抛出异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 被执行时没有返回值也无法抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>可以通过 <code>Executors</code>  工具类将 <code>Runnable</code>  转换为 <code>Callable</code></p>\n<ul>\n<li>\n<p><code>Calable</code></p>\n</li>\n<li>\n<p>指定的泛型返回值  <code>&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * @throws 当无法计算结果则抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * @return 返回计算结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"提交任务\"><a class=\"markdownIt-Anchor\" href=\"#提交任务\">#</a> 提交任务</h5>\n<p><code>execute()</code>  和 <code>submit()</code></p>\n<ul>\n<li>\n<p><code>execute()</code></p>\n<ul>\n<li>此方法用于提交不需要返回值的任务，所以无法判断任务是否被执行成功</li>\n</ul>\n</li>\n<li>\n<p><code>submit()</code></p>\n<ul>\n<li>\n<p>此方法用于提交需要返回值的任务。返回值为 <code>FutureTask</code></p>\n<p><code>FutureTask</code>  继承自 <code>Future</code></p>\n<p>可以调用返回值的 <code>get()</code>  方法判断任务是否执行成功</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"取消任务\"><a class=\"markdownIt-Anchor\" href=\"#取消任务\">#</a> 取消任务</h5>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<h5 id=\"关闭线程池\"><a class=\"markdownIt-Anchor\" href=\"#关闭线程池\">#</a> 关闭线程池</h5>\n<p><code>shutdown()</code>  和 <code>shutdowNow()</code></p>\n<ul>\n<li>\n<p><code>shutdown</code></p>\n<ul>\n<li>有序关闭线程池，队列中的任务会被执行，此时线程池不会接受新的任务，此方法无返回值</li>\n</ul>\n</li>\n<li>\n<p><code>shutdowNow</code></p>\n<ul>\n<li>关闭线程池，中止当前正在执行的任务，队列中的任务不会执行并且返回从未开始执行的 <code>list</code>  列表</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"判断线程池是否开始关闭\"><a class=\"markdownIt-Anchor\" href=\"#判断线程池是否开始关闭\">#</a> 判断线程池是否开始关闭</h5>\n<p><code>isShutdown</code>  和 <code>isTerminated</code></p>\n<ul>\n<li>\n<p><code>isShoudown</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后就返回 <code>true</code>  , 此时线程池可能并没有完全关闭 (队列中可能还有待执行的任务)</li>\n</ul>\n</li>\n<li>\n<p><code>isTerminated</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后返回 <code>true</code>  , 此时线程池及队列中的任务应该都已执行完毕，否则返回 <code>false</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h5>\n<ul>\n<li><code>ThreadPoolExecutor</code>  线程池创建的构造方法 (其它构造方法都是在此基础上的衍生)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token comment\">// 保留的核心线程数，定义了最小可以同时运行的线程数量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token comment\">// 当队列中的任务达到队列容量时当前可以同时运行的线程数变成最大线程数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                          <span class=\"token comment\">// 当线程数大于核心线程数时，多余空闲线程在死亡之前等待新任务的最大时长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          <span class=\"token comment\">//keepAliveTime 的时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                          <span class=\"token comment\">// 任务队列，用来保存等待执行的任务，当新任务被提交的时候先判断当前运行的线程数是否达到了核心线程数，达到的话就存入队列</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                          <span class=\"token comment\">// 创建新线程时使用的工厂方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                          <span class=\"token comment\">// 拒绝策略，当任务过多而拒绝执行时使用的处理程序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                         <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为非法或不适当的参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为 null 等非法参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> threadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \t<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 核心线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 等待时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 队列长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 拒绝策略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 execute 提交任务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">sumit</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 sumit 提交任务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"时间值单位\"><a class=\"markdownIt-Anchor\" href=\"#时间值单位\">#</a> 时间值单位</h5>\n<p><code>TimeUnit</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>DAYS</code></td>\n<td style=\"text-align:center\">时间单位代表二十四小时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HOURS</code></td>\n<td style=\"text-align:center\">时间单位代表六十分钟。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MICROSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一毫秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MILLISECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MINUTES</code></td>\n<td style=\"text-align:center\">时间单位代表六十秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NANOSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一微秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表一秒。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "原创",
                "java线程"
            ]
        }
    ]
}