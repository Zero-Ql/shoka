{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"springboot\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "title": "springboot多模块开发",
            "date_published": "2024-04-22T03:50:17.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>为了解决项目越来越大的问题，使用了多模块开发来使层次更加清晰。</p>\n<p>架构大致如下：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvWf3j.png\" alt=\"springboot多模块开发1\"></p>\n<h3 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>（1）新建  <code>springboot</code>  项目；<br>\n（2）在新建后的  <code>springboot</code>  项目中新建多个  <code>module(模块)</code> ；<br>\n（3）修改  <code>pom</code>  文件以及删除多余的文件及文件夹；<br>\n（4）将原项目的代码放进去；</p>\n<h3 id=\"多模块开发的坑\"><a class=\"markdownIt-Anchor\" href=\"#多模块开发的坑\">#</a> 多模块开发的坑</h3>\n<p>由于第一次使用多模块开发，并不熟练，所以踩了很多坑，这里记录一下</p>\n<ol>\n<li>访问后台接口报 <code>404</code></li>\n</ol>\n<p>​\t访问所有接口都报 404，这是由于 <code>spring</code>  没有扫描到你写的 <code>bean</code>  所导致的，一般来说， <code>spring</code>  容器只会扫描启动类所在的包以及其下的子包中的所有类，但是开发不会将所有的模块都放在一个包下面，所以如果你 <code>service</code> 、 <code>dao</code>  等模块放在了启动类所在的包之外，那么 <code>spring</code>  就不会去扫描注册这些 <code>bean</code></p>\n<p>​\t解决方法是在启动类的 <code>@SpringBootApplication</code>  注解上面加上 <code>scanBasePackages=&#123;&quot;xxx.xxxxx.*&quot;&#125;</code></p>\n<p>​\t <code>xxx.xxxxx</code>  是你所共有的包，就比如说我所有的模块都是以  <code>com.example.xxx</code>  开始。</p>\n<p>​\t如：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvfnqP.png\" alt=\"springboot多模块开发2\"></p>\n<p>​\t要查看  <code>spring</code>  有没有注册你的  <code>bean</code>  可以到服务的  <code>Actuator</code>  中查看</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFv5css.png\" alt=\"springboot多模块开发3\"></p>\n<ol start=\"2\">\n<li>\n<p><code>springboot</code>  多模块的 <code>@Resource</code> 、 <code>@Autowired</code>  注入为 <code>NULL</code></p>\n<p>方法一：</p>\n</li>\n</ol>\n<p>​\t导致注入失败的原因是因为使用了  <code>new</code>  去使用这个方法，只需要将此类自动注入即可解决问题</p>\n<p>报错的代码:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改之后的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    getStudent studentInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t方法二：</p>\n<p>​\t封装一个  <code>StaticMethodGetBean</code>  的类，此类实现了  <code>ApplicationContextAware</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Spring 应用上下文，用于访问应用上下文中的 bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 设置应用上下文。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param applicationContext Spring 应用上下文实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 通过类类型获取应用上下文中的 bean。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param clazz 要获取的 bean 的类类型</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回 bean 的实例，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param &lt;T> bean 的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 尝试获取 bean 实例，如果不存在则返回 null</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在要使用的地方直接调用  <code>getBean</code>  方法获取即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>getStudent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmd5aWZhbjAvYXJ0aWNsZS9kZXRhaWxzLzEzMDU3MDA1MQ==\">SpringBoot 简单多模块构建_springboot 创建多模块项目</span></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/SpringBoot%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/SpringBoot%E5%9F%BA%E7%A1%80/",
            "title": "SpringBoot基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"springboot-简介\"><a class=\"markdownIt-Anchor\" href=\"#springboot-简介\">#</a> <em>Springboot</em> 简介</h3>\n<blockquote>\n<blockquote>\n<p>​\t<em>Spring Boot</em> 是由<em> Pivotal</em> 团队提供的全新框架，其设计目的是用来简化新<em> Spring</em> 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，<em>Spring Boot</em> 致力于在蓬勃发展的快速应用开发领域 (<em>rapid application development</em>) 成为领导者。</p>\n</blockquote>\n<p>引用自百度百科</p>\n</blockquote>\n<p>总结：使用 <em>springboot</em> 可以很快的创建一个<em> springweb</em> 项目，极大的简化<em> spring</em> 的配置，让你专注于后端开发而不用关心繁琐的配置。</p>\n<h3 id=\"springboot-项目结构\"><a class=\"markdownIt-Anchor\" href=\"#springboot-项目结构\">#</a> <em>Springboot</em> 项目结构</h3>\n<ul>\n<li><em>resources</em> 资源文件夹\n<ul>\n<li><em>static</em> 保存所有静态资源（<em>js、css、images</em> 等）</li>\n<li><em>templates</em> 保存所有模板页面</li>\n<li><em>application.properties</em> 文件，用来编写一些服务器配置文件。但是更推荐使用 <em>yaml</em> 后缀来配置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jsr303-校验\"><a class=\"markdownIt-Anchor\" href=\"#jsr303-校验\">#</a> <em>JSR303</em> 校验</h3>\n<p>使用 <em>JSR303</em> 校验可以很轻松的在后端完成数据校验工作，只需要在要校验的实体类上加入相应的注解即可。</p>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>空检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Null</td>\n        <td>验证对象是否为null</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotNull</td>\n        <td>验证对象是否不为null，无法检查长度为0的字符串</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotBlank</td>\n        <td>检查约束字符串是不是Null还有被Trim的长度是否大于0，只对字符串，且会去掉前后空格</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotEmpty</td>\n        <td>检查约束元素是否为Null或者是EMPTY</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>Booelan检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertTrue</td>\n        <td>验证Boolean对象是否为true</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertFalse</td>\n        <td>验证Boolean对象是否为false</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>长度检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Size(min=,max=)</td>\n        <td>验证对象(Array,Collection,Map,String)大小是否在给定范围之内</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Length(min=,max=)</td>\n        <td>验证对象的长度是否在给定范围内</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>日期检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Past</td>\n        <td>验证Date和Calendar对象是否在当前时间之前</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Future</td>\n        <td>验证Date和Calendar对象是否在当前时间之后</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Pattern</td>\n        <td>验证String对象是否符合正则表达式的规则</td>\n    </tr>\n</table>\n<p>除了上面的注解标签，还可以自定义数据校验规则</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        }
    ]
}