{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"responseentity\" tag",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/Spring-ResponseEntity/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/Spring-ResponseEntity/",
            "title": "Spring-ResponseEntity",
            "date_published": "2024-04-22T03:39:54.000Z",
            "content_html": "<h3 id=\"responseentity\"><a class=\"markdownIt-Anchor\" href=\"#responseentity\">#</a> <em>ResponseEntity</em></h3>\n<p><em>ResponseEntity</em> 是 <em>Spring Web MVC</em> 框架中提供的一个类，用于封装 <em>HTTP</em> 响应的详细信息。它允许开发者不仅定义返回给客户端的数据（通常作为请求处理的结果），还能够控制响应的状态码、头部信息以及主体内容的类型。</p>\n<h4 id=\"主要属性和功能\"><a class=\"markdownIt-Anchor\" href=\"#主要属性和功能\">#</a> 主要属性和功能：</h4>\n<ol>\n<li><em>HTTP</em> 状态码（<em>HttpStatus</em>）：通过指定一个 <em>HttpStatus</em> 枚举值（如 <code>OK</code> ,  <code>CREATED</code> ,  <code>BAD_REQUEST</code> ,  <code>NOT_FOUND</code> , 等），可以明确设置响应的状态码，以表明请求的处理结果是成功还是存在某种错误。</li>\n<li><em>HTTP</em> 头部（<em>HttpHeaders</em>）：可以通过 <em>ResponseEntity</em> 构造器或其 <em>headers</em> () 方法来设置或修改响应的头部字段，如  <code>Content-Type</code> 、 <code>Cache-Control</code> 、 <code>Location</code>  等，以便控制客户端如何解析响应内容、缓存策略、重定向位置等。</li>\n<li>响应主体（<em>body</em>）：<em>ResponseEntity</em> 的主体可以承载任何类型的数据，如字符串、 <code>JSON</code>  对象、 <code>XML</code>  文档、自定义 <code>Java</code>  对象等。这些数据将作为 <code>HTTP</code>  响应的正文发送给客户端。主体类型可以与 <code>Content-Type</code>  头部字段对应，确保客户端能正确解析。</li>\n</ol>\n<p>典型用法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/04/22/pkpf0zD.png\" alt=\"headers\"></p>\n<p>从 <em>ResponseEntity</em> 类的源码中可以看到，<em>headers</em> 方法返回的是 <em>this</em> 也就是类本身，所以可以进行链式调用</p>\n<p>而 <em>headers</em> 方法接收一个  <code>Consumer&lt;HttpHeaders&gt;</code>  类型的参数  <code>headersConsumer</code> ，该参数是一个函数接口，使用 <em>lambda</em> 表达式进行了匿名实现</p>\n<p>更多用法请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmdkb2MuY24vc3ByaW5nLXJlc3BvbnNlLWVudGl0eS8=\">使用 Spring ResponseEntity 处理 HTTP 响应 - spring 中文网 (springdoc.cn)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring",
                "ResponseEntity"
            ]
        }
    ]
}