<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yunyat.cloud</id>
    <title>上善若水 • Posts by &#34;spring&#34; tag</title>
    <link href="http://yunyat.cloud" />
    <updated>2024-04-22T03:39:54.000Z</updated>
    <category term="hexo" />
    <category term="原创" />
    <category term="Linux" />
    <category term="电脑技术" />
    <category term="SSH" />
    <category term="Docker" />
    <category term="harbor" />
    <category term="markdown" />
    <category term="mermaid" />
    <category term="可道云" />
    <category term="测试" />
    <category term="2023" />
    <category term="年度总结" />
    <category term="记录" />
    <category term="暑假工" />
    <category term="java" />
    <category term="junit" />
    <category term="python" />
    <category term="selenium" />
    <category term="MySQL" />
    <category term="JavaScript" />
    <category term="JSON" />
    <category term="lambda表达式" />
    <category term="java线程" />
    <category term="Java" />
    <category term="servlet" />
    <category term="javafx" />
    <category term="集合" />
    <category term="shell" />
    <category term="游戏" />
    <category term="我的世界" />
    <category term="Hexo" />
    <category term="教程" />
    <category term="Git" />
    <category term="maven" />
    <category term="cAdvisor" />
    <category term="Prometheus" />
    <category term="Grafana" />
    <category term="frp" />
    <category term="破解" />
    <category term="Typora" />
    <category term="xmind" />
    <category term="思维导图" />
    <category term="Ubuntu" />
    <category term="分享" />
    <category term="计算机" />
    <category term="mybatis" />
    <category term="mybatisplus" />
    <category term="spring" />
    <category term="ResponseEntity" />
    <category term="springboot" />
    <category term="springmvc" />
    <category term="spring注解" />
    <category term="HTML" />
    <category term="异常处理" />
    <category term="问题解决" />
    <category term="数据结构" />
    <category term="算法" />
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Tools/Spring-ResponseEntity/</id>
        <title>Spring-ResponseEntity</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Tools/Spring-ResponseEntity/"/>
        <content type="html">&lt;h3 id=&#34;responseentity&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#responseentity&#34;&gt;#&lt;/a&gt; &lt;em&gt;ResponseEntity&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ResponseEntity&lt;/em&gt; 是 &lt;em&gt;Spring Web MVC&lt;/em&gt; 框架中提供的一个类，用于封装 &lt;em&gt;HTTP&lt;/em&gt; 响应的详细信息。它允许开发者不仅定义返回给客户端的数据（通常作为请求处理的结果），还能够控制响应的状态码、头部信息以及主体内容的类型。&lt;/p&gt;
&lt;h4 id=&#34;主要属性和功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主要属性和功能&#34;&gt;#&lt;/a&gt; 主要属性和功能：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;HTTP&lt;/em&gt; 状态码（&lt;em&gt;HttpStatus&lt;/em&gt;）：通过指定一个 &lt;em&gt;HttpStatus&lt;/em&gt; 枚举值（如 &lt;code&gt;OK&lt;/code&gt; ,  &lt;code&gt;CREATED&lt;/code&gt; ,  &lt;code&gt;BAD_REQUEST&lt;/code&gt; ,  &lt;code&gt;NOT_FOUND&lt;/code&gt; , 等），可以明确设置响应的状态码，以表明请求的处理结果是成功还是存在某种错误。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;HTTP&lt;/em&gt; 头部（&lt;em&gt;HttpHeaders&lt;/em&gt;）：可以通过 &lt;em&gt;ResponseEntity&lt;/em&gt; 构造器或其 &lt;em&gt;headers&lt;/em&gt; () 方法来设置或修改响应的头部字段，如  &lt;code&gt;Content-Type&lt;/code&gt; 、 &lt;code&gt;Cache-Control&lt;/code&gt; 、 &lt;code&gt;Location&lt;/code&gt;  等，以便控制客户端如何解析响应内容、缓存策略、重定向位置等。&lt;/li&gt;
&lt;li&gt;响应主体（&lt;em&gt;body&lt;/em&gt;）：&lt;em&gt;ResponseEntity&lt;/em&gt; 的主体可以承载任何类型的数据，如字符串、 &lt;code&gt;JSON&lt;/code&gt;  对象、 &lt;code&gt;XML&lt;/code&gt;  文档、自定义 &lt;code&gt;Java&lt;/code&gt;  对象等。这些数据将作为 &lt;code&gt;HTTP&lt;/code&gt;  响应的正文发送给客户端。主体类型可以与 &lt;code&gt;Content-Type&lt;/code&gt;  头部字段对应，确保客户端能正确解析。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;典型用法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Log4j2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@RestControllerAdvice&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GlobalExceptionHandler&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 处理所有未被其他异常处理器捕获的异常。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param e 抛出的异常对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 记录异常信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        log&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;系统异常：&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 构建响应体，包含错误状态码、自定义错误信息和异常信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ResponseEntity&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;HttpStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;httpheaders &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 设置响应头内容类型为 JSON&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    httpheaders&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setContentType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;MediaType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token comment&#34;&gt;// 这里硬编码了 access-token，实际应用中应根据需求设置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    httpheaders&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;access-token&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;123456&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 将错误信息封装成 JSON 格式作为响应体的内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;系统异常&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://s21.ax1x.com/2024/04/22/pkpf0zD.png&#34; alt=&#34;headers&#34;&gt;&lt;/p&gt;
&lt;p&gt;从 &lt;em&gt;ResponseEntity&lt;/em&gt; 类的源码中可以看到，&lt;em&gt;headers&lt;/em&gt; 方法返回的是 &lt;em&gt;this&lt;/em&gt; 也就是类本身，所以可以进行链式调用&lt;/p&gt;
&lt;p&gt;而 &lt;em&gt;headers&lt;/em&gt; 方法接收一个  &lt;code&gt;Consumer&amp;lt;HttpHeaders&amp;gt;&lt;/code&gt;  类型的参数  &lt;code&gt;headersConsumer&lt;/code&gt; ，该参数是一个函数接口，使用 &lt;em&gt;lambda&lt;/em&gt; 表达式进行了匿名实现&lt;/p&gt;
&lt;p&gt;更多用法请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcHJpbmdkb2MuY24vc3ByaW5nLXJlc3BvbnNlLWVudGl0eS8=&#34;&gt;使用 Spring ResponseEntity 处理 HTTP 响应 - spring 中文网 (springdoc.cn)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="java" />
        <category term="spring" />
        <category term="ResponseEntity" />
        <updated>2024-04-22T03:39:54.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Spring%E5%9F%BA%E7%A1%80/</id>
        <title>SpringFramework基础</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Spring%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h3 id=&#34;spring-spring-mvc-spring-boot-spring-cloud&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-spring-mvc-spring-boot-spring-cloud&#34;&gt;#&lt;/a&gt; Spring、Spring MVC、Spring Boot、Spring Cloud&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Spring&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;  是一个轻量级的&lt;strong&gt;控制反转 ( &lt;code&gt;IoC&lt;/code&gt; )&lt;/strong&gt; 和&lt;strong&gt;面向切面 ( &lt;code&gt;AOP&lt;/code&gt; )&lt;/strong&gt; 的容器框架。&lt;/li&gt;
&lt;li&gt;它使你能够编写更干净、更可管理、并且更易于测试的代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了基础功能，适用于开发  &lt;code&gt;WEB&lt;/code&gt;  层、业务层、持久层等多个方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring MVC&lt;/code&gt;  是  &lt;code&gt;Spring&lt;/code&gt;  的一个模块，是一个&lt;strong&gt; Web 框架&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过  &lt;code&gt;Dispatcher Servlet&lt;/code&gt; 、 &lt;code&gt;ModelAndView&lt;/code&gt;  和  &lt;code&gt;View Resolver&lt;/code&gt; ，它使得开发  &lt;code&gt;Web&lt;/code&gt;  应用变得很容易。&lt;/li&gt;
&lt;li&gt;主要针对网站应用程序或者服务开发，处理 URL 路由、 &lt;code&gt;Session&lt;/code&gt; 、模板引擎、静态  &lt;code&gt;Web&lt;/code&gt;  资源等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring Boot&lt;/code&gt;  是为简化  &lt;code&gt;Spring&lt;/code&gt;  配置的&lt;strong&gt;快速开发整合包&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它约定优于配置，简化了  &lt;code&gt;Spring&lt;/code&gt;  的配置流程。&lt;/li&gt;
&lt;li&gt;更专注于开发&lt;strong&gt;微服务后台接口&lt;/strong&gt;，不涉及前端视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring Cloud&lt;/code&gt;  构建于  &lt;code&gt;Spring Boot&lt;/code&gt;  之上，是一个关注全局的&lt;strong&gt;服务治理框架&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;它用于整合和管理多个  &lt;code&gt;Spring Boot&lt;/code&gt;  单体微服务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spring Cloud&lt;/code&gt;  依赖于  &lt;code&gt;Spring Boot&lt;/code&gt;  开发，但  &lt;code&gt;Spring Boot&lt;/code&gt;  可以独立开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring 是核心，提供了基础功能。&lt;/li&gt;
&lt;li&gt;Spring MVC 是基于 Spring 的一个 MVC 框架。&lt;/li&gt;
&lt;li&gt;Spring Boot 是为简化 Spring 配置的快速开发整合包。&lt;/li&gt;
&lt;li&gt;Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;spring&lt;/code&gt;  是一个专注于  &lt;code&gt;Java EE&lt;/code&gt;  开发的框架，它会使我们编写出来的  &lt;code&gt;Java&lt;/code&gt;  程序 更快，更容易，更安全。&lt;/p&gt;
&lt;h3 id=&#34;spring的分层架构设计模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的分层架构设计模式&#34;&gt;#&lt;/a&gt; Spring 的分层架构设计模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表示层（Controller 层）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示层是 Web 应用的入口，负责接收 HTTP 请求并处理。&lt;/li&gt;
&lt;li&gt;在 Spring 中，它提供了与 Spring MVC 和 Struts2 等框架的整合。&lt;/li&gt;
&lt;li&gt;控制器层处理用户请求，协调业务逻辑层和持久层之间的交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务层（Service 层）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也称为业务逻辑层，负责处理业务逻辑，与项目需求紧密相关。&lt;/li&gt;
&lt;li&gt;在 Spring 中，可以管理事务、记录日志等。&lt;/li&gt;
&lt;li&gt;服务层通过调用持久层的方法来操作数据，对外提供接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久层（DAO 层）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也被称为数据访问层，负责将数据持久化到数据库中。&lt;/li&gt;
&lt;li&gt;基本上，它主要用于数据库的增删改查操作。&lt;/li&gt;
&lt;li&gt;DAO 层是一个接口，具体的实现在 Mapper.xml 或者其他地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;声明组件扫描器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明组件扫描器&#34;&gt;#&lt;/a&gt; 声明组件扫描器&lt;/h3&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token namespace&#34;&gt;context:&lt;/span&gt;component-scan&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;base-package&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;你要扫描的包名&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;spring-相关网站&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-相关网站&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  相关网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring MVC API&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvY3VycmVudC9qYXZhZG9jLWFwaS8=&#34;&gt;Overview (Spring Framework 6.1.5 API)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spring Boot API&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvYXBpLw==&#34;&gt;Overview (Spring Boot 3.2.4 API)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="java" />
        <category term="spring" />
        <updated>2024-04-16T04:03:49.000Z</updated>
    </entry>
</feed>
