{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/game/Minecraft/Screen%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/game/Minecraft/Screen%E4%BD%BF%E7%94%A8/",
            "title": "Screen使用",
            "date_published": "2024-09-01T08:40:26.000Z",
            "content_html": "<div class=\"note primary\">\n<p>使用 telnet 或 SSH 远程登录 linux 时，如果连接非正常中断，重新连接时，系统将开一个新的 session，无法恢复原来的 session. screen 命令可以解决这个问题。Screen 工具是一个终端多路转接器，在本质上，这意味着你能够使用一个单一的终端窗口运行多终端的应用。</p>\n</div>\n<ul>\n<li><code>screen -ls</code>\n<ul>\n<li>列出当前所有的  <code>screen</code>  会话</li>\n</ul>\n</li>\n<li><code>screen -S [session_name]</code>\n<ul>\n<li>创建一个指定名称的会话</li>\n</ul>\n</li>\n<li><code>screen -r [session_name or session_id]</code>\n<ul>\n<li>切换到指定名称或 ID 的会话</li>\n</ul>\n</li>\n<li><code>screen -X -S [session_name] quit</code>\n<ul>\n<li>删除指定名称的会话</li>\n</ul>\n</li>\n</ul>\n<p>可以使用 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">a</span> + <span class=\"kbd red\">d</span> 退出会话，此时会话并不会结束。要终止会话可以使用  <code>exit</code>  或 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">d</span> 来终止这个会话。</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "游戏",
                "我的世界"
            ]
        },
        {
            "id": "http://yunyat.cloud/game/Minecraft/%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/",
            "url": "http://yunyat.cloud/game/Minecraft/%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/",
            "title": "搭建问题集合",
            "date_published": "2024-07-22T10:09:33.000Z",
            "content_html": "<h1 id=\"安装-nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装-nodejs\">#</a> 安装 nodejs</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>前置条件需要curl</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--silent</span> <span class=\"token parameter variable\">--location</span> https://rpm.nodesource.com/setup_20.x <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> -</pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> nodejs</pre></td></tr></table></figure><h1 id=\"安装-screen\"><a class=\"markdownIt-Anchor\" href=\"#安装-screen\">#</a> 安装 screen</h1>\n<p><code>screen</code>  命令在大多数 Linux 发行版中都是可用的，包括 Debian、Ubuntu、Alpine、Arch Linux、Kali Linux、RedHat/CentOS、Fedora 和 Raspbian。如果你的系统中没有预装 <code>screen</code> ，你可以使用包管理器来安装。</p>\n<ol>\n<li>在 Debian 和 Ubuntu 上，你可以使用 <code>apt-get</code>  命令来安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在 RedHat/CentOS 7 上，你可以使用 <code>yum</code>  命令来安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在 RedHat/CentOS 8 和 Fedora 上，你可以使用 <code>dnf</code>  命令来安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> epel-release <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span> <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在 Alpine 上，你可以使用 <code>apk</code>  命令来安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>apk <span class=\"token function\">add</span> <span class=\"token function\">screen</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>在 Arch Linux 和 Manjaro 上，你可以使用 <code>pacman</code>  命令来安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pacman <span class=\"token parameter variable\">-S</span> <span class=\"token function\">screen</span></pre></td></tr></table></figure><h1 id=\"安装-jdk\"><a class=\"markdownIt-Anchor\" href=\"#安装-jdk\">#</a> 安装 JDK</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>配置环境变量</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_17_HOME</span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/jdk-17\"</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_22_HOME</span><span class=\"token operator\">=</span><span class=\"token string\">\"/usr/jdk-22\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span><span class=\"token variable\">$JAVA_22_HOME</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">jdk17</span><span class=\"token operator\">=</span><span class=\"token string\">\"export JAVA_HOME=<span class=\"token variable\">$JAVA_17_HOME</span>\"</span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">jdk22</span><span class=\"token operator\">=</span><span class=\"token string\">\"export JAVA_HOME=<span class=\"token variable\">$JAVA_22_HOME</span>\"</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>一键切换脚本</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"jdk17 or jdk22 ?\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">read</span> num</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /usr/bin/java</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /usr/jdk-<span class=\"token variable\">$&#123;num&#125;</span>/bin/java /usr/bin/java</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"当前 JDK 为:\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span></pre></td></tr></table></figure><h1 id=\"服务器核心\"><a class=\"markdownIt-Anchor\" href=\"#服务器核心\">#</a> 服务器核心</h1>\n<h2 id=\"原版\"><a class=\"markdownIt-Anchor\" href=\"#原版\">#</a> 原版</h2>\n<h2 id=\"1204\"><a class=\"markdownIt-Anchor\" href=\"#1204\">#</a> 1.20.4</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXN0b24tZGF0YS5tb2phbmcuY29tL3YxL29iamVjdHMvOGRkMWEyODAxNWY1MWIxODAzMjEzODkyYjUwYjdiNGZjNzZlNTk0ZC9zZXJ2ZXIuamFy\">下载</span></p>\n<div class=\"note info\">\n<p>更多版本请前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5taW5lY3JhZnQud2lraS93L0phdmElRTclODklODgxLjIx\"> 中文 Minecraft Wiki</span> 查看<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5taW5lY3JhZnQud2lraS93L0phdmElRTclODklODh5b3V2ZXJzaW9u\"> https://zh.minecraft.wiki/w/Java 版 youversion</span><br>\n 将  <code>youversion</code>  替换为你要查找的版本<br>\n如：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5taW5lY3JhZnQud2lraS93L0phdmElRTclODklODgxLjIwLjY=\">https://zh.minecraft.wiki/w/Java 版 1.20.6</span></p>\n</div>\n",
            "tags": [
                "游戏",
                "我的世界"
            ]
        },
        {
            "id": "http://yunyat.cloud/game/Minecraft/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "url": "http://yunyat.cloud/game/Minecraft/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/",
            "title": "服务器搭建教程",
            "date_published": "2024-07-22T09:48:54.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文使用 Linux 系统为基础操作</p>\n</div>\n<hr>\n<h1 id=\"下载核心\"><a class=\"markdownIt-Anchor\" href=\"#下载核心\">#</a> 下载核心</h1>\n<p>这里选择 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9waXN0b24tZGF0YS5tb2phbmcuY29tL3YxL29iamVjdHMvOGRkMWEyODAxNWY1MWIxODAzMjEzODkyYjUwYjdiNGZjNzZlNTk0ZC9zZXJ2ZXIuamFy\">1.20.4</span> 原版核心作为服务器端</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>下载核心</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://piston-data.mojang.com/v1/objects/8dd1a28015f51b1803213892b50b7b4fc76e594d/server.jar</pre></td></tr></table></figure><h1 id=\"启动\"><a class=\"markdownIt-Anchor\" href=\"#启动\">#</a> 启动</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>使用下面的命令启动</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> -Xmx16G（这里是最大内存） -Xms8G（这里是最小内存） <span class=\"token parameter variable\">-jar</span> 核心名字 nogui</pre></td></tr></table></figure><p>启动之后会生成下图所示的两个文件</p>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240625001647.png\" alt=\"image-20240625001647644\"></p>\n<p>同意  <code>Eula.txt</code>  文件即可， <code>server.properties</code>  为服务器配置文件</p>\n<h1 id=\"安装mod\"><a class=\"markdownIt-Anchor\" href=\"#安装mod\">#</a> 安装 Mod</h1>\n<p>下载  <code>forge</code>  引擎， <code>mod</code>  是由  <code>mod</code>  引擎支持的</p>\n<pre><code>https://files.minecraftforge.net/net/minecraftforge/forge/index_1.20.4.html\n</code></pre>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240625002723.png\" alt=\"image-20240625002723460\"></p>\n<p>看你自己需要选择哪个版本</p>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>下载好之后双击打开，选一个没有中文路径的地方安装</p>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240625003617.png\" alt=\"image-20240625003617738\"></p>\n<p>安装完成后新建一个  <code>run.bat</code>  批处理文件 (  <code>forge-1.20.4-49.1.0-shim</code>  记得改为你的  <code>forge</code>  文件名)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>run.bat中填写下面的代码</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-Xmx3G</span> <span class=\"token parameter variable\">-Xms1G</span> <span class=\"token parameter variable\">-jar</span> forge-1.20.4-49.1.0-shim.jar nogui</pre></td></tr></table></figure><p>之后在当前目录新建一个  <code>mods</code>  文件夹，将你要添加的  <code>mod</code>  放入其中</p>\n<p>最后使用  <code>scp</code>  命令将当前目录下的所有文件上传到服务器</p>\n<p>添加  <code>mod</code>  其实就是换一个服务器核心开服</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "游戏",
                "我的世界"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/Yum%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%EF%BC%8C%E7%BC%BA%E5%B0%91%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/",
            "url": "http://yunyat.cloud/miscellaneous/issues/Yum%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%EF%BC%8C%E7%BC%BA%E5%B0%91%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/",
            "title": "Yum安装失败",
            "date_published": "2024-06-24T08:18:25.000Z",
            "content_html": "<h1 id=\"描述\"><a class=\"markdownIt-Anchor\" href=\"#描述\">#</a> 描述</h1>\n<p>使用  <code>apt-get</code>  安装  <code>yum</code>  失败</p>\n<h2 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h2>\n<p>系统：Ubuntu 20.04.1</p>\n<h2 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因</h2>\n<p>缺少依赖</p>\n<h2 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h2>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240624162654.png\" alt=\"image-20240624162654309\"></p>\n<p>使用  <code>apt-get</code>  依次安装缺少的依赖项</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "Linux",
                "Ubuntu"
            ]
        },
        {
            "id": "http://yunyat.cloud/game/Minecraft/Minecraft/",
            "url": "http://yunyat.cloud/game/Minecraft/Minecraft/",
            "title": "Minecraft",
            "date_published": "2024-06-22T08:00:44.000Z",
            "content_html": "",
            "tags": [
                "游戏",
                "我的世界"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/hello-world/",
            "url": "http://yunyat.cloud/hexo/hello-world/",
            "title": "Hello World",
            "date_published": "2024-06-22T05:49:38.036Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://yunyat.cloud/test/Test/",
            "url": "http://yunyat.cloud/test/Test/",
            "title": "Test",
            "date_published": "2024-06-15T07:32:45.000Z",
            "content_html": "<p>​\t测试</p>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Test/20240615210453.jpeg\" alt=\"test\" title=\"这是图片的 title\"></p>\n",
            "tags": [
                "测试"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/MyBatisPlus-1/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/MyBatisPlus-1/",
            "title": "MyBatisPlus-1",
            "date_published": "2024-05-25T17:00:09.000Z",
            "content_html": "<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus</span> 是一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==\">MyBatis</span> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p>具体可查看官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vaW50cm9kdWNlLw==\">简介 | MyBatis-Plus (baomidou.com)</span></p>\n</blockquote>\n<h3 id=\"安装-mybatis-plus\"><a class=\"markdownIt-Anchor\" href=\"#安装-mybatis-plus\">#</a> 安装 MyBatis-Plus</h3>\n<h4 id=\"添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#添加依赖\">#</a> 添加依赖</h4>\n<p>首先需要添加  <code>MyBatis-Plus Starter</code>  依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 此处使用的是 SpringBoot3，如果你使用 SpringBoot2，请参考官方文档导入 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-spring-boot3-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h3>\n<p>在  <code>application.yaml</code>  中添加  <code>MyBatis-Plus</code>  的  <code>logging</code>  配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 MyBatis 内置的控制台输出日志方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure><p>定义一个配置类  <code>MyBatisPlusConfig</code> ，在此类上添加  <code>@MapperScan</code>  注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * MyBatisPlus 配置类，用于配置 MyBatisPlus 的相关设置。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Configuration 标注为 Spring 配置类。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @MapperScan (\"com.example.*\") 扫描指定包下的 Mapper 接口。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 创建并配置 MybatisPlusInterceptor 拦截器。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return 返回配置好的 MybatisPlusInterceptor 实例。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 MybatisPlusInterceptor 实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加分页插件拦截器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回配置好的拦截器实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"编码\"><a class=\"markdownIt-Anchor\" href=\"#编码\">#</a> 编码</h3>\n<p>写一个实体类  <code>user.java</code> ，对应数据表中的字段.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用了 lombok 简化开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写一个  <code>Mapper</code>  接口，用于映射数据库操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试代码\"><a class=\"markdownIt-Anchor\" href=\"#测试代码\">#</a> 测试代码</h3>\n<p>在单元测试中测试功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootApiApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注入 UserMapper，用于测试中对用户数据的查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 测试 UserMapper 的查询功能</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 调用 userMapper 的 selectList 方法，查询所有用户，打印输出查询结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"basemapper-iservice\"><a class=\"markdownIt-Anchor\" href=\"#basemapper-iservice\">#</a> <em>BaseMapper</em> &amp; <em>IService</em></h3>\n<p>​\t<em>MyBatis-Plus</em> 提供了两个核心接口，分别用于对 <em>Dao</em> 层及 <em>Service</em> 层进行操作。</p>\n<h4 id=\"basemapper\"><a class=\"markdownIt-Anchor\" href=\"#basemapper\">#</a>  <code>BaseMapper</code></h4>\n<p><code>BaseMapper</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Mapper</em> 接口，它继承自 <em>mybatis-plus</em> 的 <em>Mapper</em> 接口，并扩展了一些常用的数据库操作方法。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 CRUD 封装  <code>BaseMapper</code>  接口，为  <code>Mybatis-Plus</code>  启动时自动解析实体表关系映射转换为  <code>Mybatis</code>  内部对象注入容器<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 参数  <code>Serializable</code>  为任意类型主键  <code>Mybatis-Plus</code>  不推荐使用复合主键约定每一张表都有自己的唯一  <code>id</code>  主键<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p><code>BaseMapper</code>  的主要作用是定义 <em>DAO</em> 层的数据库操作方法，例如数据的增删改查。</p>\n<p>开发者可以编写接口继承  <code>BaseMapper</code>  接口，并指定对应的实体类，就可以通过注入来使用这些通用方法。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 可以添加一些自定义的操作...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"iservice\"><a class=\"markdownIt-Anchor\" href=\"#iservice\">#</a>  <code>IService</code></h4>\n<p><code>IService</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Service</em> 接口。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 Service CRUD 封装 IService 接口，进一步封装 CRUD 采用  <code>get 查询单行</code>   <code>remove 删除</code>   <code>list 查询集合</code>   <code>page 分页</code>  前缀命名方式区分  <code>Mapper</code>  层避免混淆<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 建议如果存在自定义通用 Service 方法的可能，请创建自己的  <code>IBaseService</code>  继承  <code>Mybatis-Plus</code>  提供的基类<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p>开发者可以编写接口继承  <code>IService</code>  接口，并指定对应的实体类，就可以使用这些通用方法，无需手动编写业务逻辑代码。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 自定义的操作，查找年龄大于 age 的所有记录...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"serviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#serviceimpl\">#</a>  <code>ServiceImpl</code></h5>\n<p><code>ServiceImpl</code>  是  <code>IService</code>  接口的默认实现类， <code>ServiceImpl</code>  是针对业务逻辑层的实现，并调用  <code>BaseMapper</code>  来操作数据库。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>M：你自定义的继承了  <code>BaseMapper</code>  接口的接口</li>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 标示一个 Spring 框架的服务组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserIService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 引入 UserMapper 资源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 查找所有用户信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回用户列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 保存用户信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param userId 用户 ID</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param userName 用户名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param userAge 用户年龄</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param userEmail 用户邮箱</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return 返回保存结果，成功为 true，失败为 false</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> userAge<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户 ID</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>userAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户年龄</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户邮箱</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的保存方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 根据年龄查找用户</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param age 年龄条件</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @return 返回年龄大于指定条件的用户列表</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 使用 QueryWrapper 构建查询条件，查询年龄大于指定值的用户</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "title": "MySQL-5",
            "date_published": "2024-05-14T07:48:52.000Z",
            "content_html": "<h3 id=\"sql-注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入\">#</a> <em>SQL</em> 注入</h3>\n<blockquote>\n<p>如果您通过网页获取用户输入的数据并将其插入一个 <em>MySQL</em> 数据库，那么就有可能发生 <em>SQL</em> 注入安全的问题。</p>\n<p>所谓 <em>SQL</em> 注入，就是通过把 <em>SQL</em> 命令插入到 <em>Web</em> 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 <em>SQL</em> 命令。</p>\n<p><em>MySQL</em> 注入是指攻击者通过恶意构造的输入，成功地执行恶意的 <em>SQL</em> 查询，这通常发生在用户输入未经适当验证或转义的情况下，攻击者试图在输入中插入 <em>SQL</em> 代码，以执行意外的查询或破坏数据库。</p>\n<p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p>\n</blockquote>\n<h3 id=\"防范注入\"><a class=\"markdownIt-Anchor\" href=\"#防范注入\">#</a> 防范注入</h3>\n<ol>\n<li><strong>使用参数化查询或预编译语句</strong>：使用参数化查询（<em>Prepared Statements</em>）可以有效防止 <em>SQL</em> 注入，因为它们在执行查询之前将输入数据与查询语句分离。</li>\n<li><strong>输入验证和转义</strong>：对用户输入进行适当的验证，并使用合适的转义函数（如 <code>mysqli_real_escape_string</code> ）来处理输入，以防止恶意注入。</li>\n<li><strong>最小权限原则</strong>：给予数据库用户最小的权限，确保它们只能执行必要的操作，以降低潜在的损害。</li>\n<li><strong>使用 <em>ORM</em> 框架</strong>：使用对象关系映射（<em>ORM</em>）框架（如<em> Hibernate</em>、<em>Sequelize</em>）可以帮助抽象 <em>SQL</em> 查询，从而降低 <em>SQL</em> 注入的风险。</li>\n<li><strong>禁用错误消息显示</strong>：在生产环境中，禁用显示详细的错误消息，以防止攻击者获取有关数据库结构的敏感信息。</li>\n</ol>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zcWwtaW5qZWN0aW9uLmh0bWw=\">MySQL 及 SQL 注入 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p><em>MySQL</em> 的函数可以执行很多操作，具体请查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==\">MySQL 函数 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"mysql-运算符\"><a class=\"markdownIt-Anchor\" href=\"#mysql-运算符\">#</a> MySQL 运算符</h3>\n<p>运算符大致分为以下几种：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcGVyYXRvci5odG1s\">MySQL 运算符 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "title": "MySQL-4",
            "date_published": "2024-05-13T08:24:45.000Z",
            "content_html": "<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p><em>MySQL</em> 中，<u>事务</u>(<em> <code>Transaction</code> </em>) 是一组 <em>SQL</em> 语句的执行，它们被视为一个单独的工作单元。这组操作要么全部成功执行，要么全部不执行，是一个 “全有或全无” 的原则. <u>事务</u>的主要目的是为了保证数据的完整性和一致性.</p>\n<p>基本特性 (<em><strong>ACID</strong></em> 属性)：</p>\n<ul>\n<li><strong>原子性</strong> (<strong>A</strong>tomicity)\n<ul>\n<li><u>事务</u>是一个原子操作单元，<u>事务</u>中的所有操作要么全部执行成功，要么全部不执行，不会仅执行部分操作，<u>事务</u>在执行过程中发生错误，会被回滚（ <code>Rollback</code> ）到<u>事务</u>开始前的状态.</li>\n</ul>\n</li>\n<li><strong>一致性</strong> (<strong>C</strong>onsistency)\n<ul>\n<li><u>事务</u>执行前后，数据库从一个一致状态转换到另一个一致状态。即使在<u>事务</u>执行过程中出现错误，数据库也能够保持数据的完整性.</li>\n</ul>\n</li>\n<li><strong>隔离性</strong> (<strong>I</strong>solation)\n<ul>\n<li>多个<u>事务</u>并发执行时，每个<u>事务</u>好像是在独立地处理数据，即一个<u>事务</u>内部的操作对其他<u>事务</u>是隔离的，这可以防止并发<u>事务</u>之间的相互干扰，<u>事务</u>隔离分为不同级别，包括读未提交（ <code>Read uncommitted</code> ）、读提交（ <code>read committed</code> ）、可重复读（ <code>repeatable read</code> ）和串行化（ <code>Serializable</code> ）.</li>\n</ul>\n</li>\n<li><strong>持久性</strong> (<strong>D</strong>urability)\n<ul>\n<li>一旦<u>事务</u>提交（ <code>commit</code> ），其结果就是永久性的，即使系统发生故障也不会丢失已提交<u>事务</u>的结果.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><em>只有使用了 lnnodb 数据库引擎的数据库或表才支持事务.</em></p>\n<p><em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交.</em></p>\n</blockquote>\n<h3 id=\"事务操作\"><a class=\"markdownIt-Anchor\" href=\"#事务操作\">#</a> 事务操作</h3>\n<ul>\n<li><code>BEGIN</code>  或  <code>START TRANSACTION</code>\n<ul>\n<li>显示开启一个事务.</li>\n</ul>\n</li>\n<li><code>COMMIT</code>\n<ul>\n<li>提交事务，并对已对数据库进行的所有修改变为永久.</li>\n</ul>\n</li>\n<li><code>ROLLBACK</code>\n<ul>\n<li>回滚事务。结束用户的事务，并撤销正在进行的所有未提交的修改.</li>\n</ul>\n</li>\n<li><code>SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li><code>savepoint</code>  允许在事务中创建一个标记点，一个事务中可以有多个标记点.</li>\n</ul>\n</li>\n<li><code>RELEASE SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li>删除一个事务的标记点，当没有指定的标记点时，该语句会抛出一个异常.</li>\n</ul>\n</li>\n<li><code>ROLLBACK TO &lt;identifier&gt;</code>\n<ul>\n<li>将事务回滚到标记点.</li>\n</ul>\n</li>\n</ul>\n<p>事务处理流程：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/05/10/pkZG5WQ.png\" alt=\"mysql_1\"></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 开启一个事务\nbegin;\n\n# 更改 user 表的 birhdate 列的值为 '2024-05-09' 的值为 NULL\nupdate user as u set birhdate=NULL where u.birhdate='2024-05-09';\n\n# 提交事务\ncommit;\n# or 回滚事务\nrollback;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10cmFuc2FjdGlvbi5odG1s\">MySQL 事务 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"alter-命令\"><a class=\"markdownIt-Anchor\" href=\"#alter-命令\">#</a> <em>ALTER</em> 命令</h3>\n<p><em>ALTER</em> 命令是用于修改现有数据库表结构的重要语句，通过它，你可以执行多种表结构的更改操作，而不必删除并重新创建表.</p>\n<p>常用操作：</p>\n<ul>\n<li>添加列\n<ul>\n<li><code>ALTER TABLE table_name ADD column_name data_type;</code>\n<ul>\n<li>示例： <code>alter table user add birth_date date;</code> ，向  <code>user</code>  表添加  <code>birth_date</code>  日期列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除列\n<ul>\n<li><code>ALTER TABLE table_name DROP COLUMN column_name;</code>\n<ul>\n<li>示例： <code>alter table user drop column birth_date;</code> ，将  <code>user</code>  表的  <code>birth_date</code>  列删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改列的数据类型\n<ul>\n<li><code>ALTER TABLE table_name MODIFY column_name new_data_type;</code>\n<ul>\n<li>示例： <code>alter table user modify id varchar(10);</code>  ，将  <code>id</code>  列的字段类型修改为变长字符串类型.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>改变列名及数据类型：\n<ul>\n<li><code>ALTER TABLE table_name CHANGE column_name new_column_name new_data_type;</code></li>\n<li>示例： <code>alter table user change birhdate birth_date date;</code> ，将  <code>birhdate</code>  列名改为  <code>birth_date</code>  并将列类型改为  <code>date</code> ；</li>\n</ul>\n</li>\n<li>添加主键\n<ul>\n<li><code>ALTER TABLE table_name ADD PRIMARY KEY(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add primary key(id);</code> ，将  <code>id</code>  设置为  <code>test_table</code>  表的主键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加唯一键\n<ul>\n<li><code>ALTER TABLE table_name ADD UNIQUE(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add unique(id);</code> ，将  <code>id</code>  列设置为唯一键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加外键约束\n<ul>\n<li><code> ALTER TABLE table_name ADD CONSTRAINT fk_constraint_name FOREIGN KEY(column_name) REFERENCES referenced_table_name(referenced_column_name);</code>\n<ul>\n<li>示例： <code>alter table orders add constraint fk_user_id foreign key(id) references user(id);</code> ，将 <code>orders</code>  的  <code>id</code>  设置为外键，引用  <code>user</code>  的  <code>id</code>  列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设置默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER column_name SET DEFAULT value;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date set default '1970-01-01';</code> ，将  <code>order_date</code>  的默认值设置为  <code>1970-01-01</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER order_date DROP DEFAULT;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date drop default;</code> ，将  <code>order_date</code>  列的默认值删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改表名\n<ul>\n<li><code>ALTER TABLE table_name RENAME TO new_table;</code>\n<ul>\n<li>示例： <code>alter table test_table rename to user_age;</code> ，将  <code>test_table</code>  表名改为  <code>user_age</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改存储引擎\n<ul>\n<li><code>ALTER TABLE table_name ENGINE=value;</code>\n<ul>\n<li>示例： <code>alter table user engine=myisam;</code> ，将 user 表的存储引擎改为  <code>myisam</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据备份与恢复\"><a class=\"markdownIt-Anchor\" href=\"#数据备份与恢复\">#</a> 数据备份与恢复</h3>\n<p>​\t使用  <code>MYSQLDUMP</code>  命令可以备份和还原数据库。如果只想复制一张表，可以使用  <code>mysqldump</code>  命令导出该表的结构和数据，然后导入到新的数据库或新的表中，也可以导出所有的表结构及数据，以达到复制数据库的目的 .</p>\n<ul>\n<li>备份表数据：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &lt;table_name&gt; &gt; &lt;table_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql user &gt; user.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的  <code>user</code>  表导出到当前目录下名为  <code>user.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>还原表数据：\n<ul>\n<li><code>source &lt;path&gt;;</code>\n<ul>\n<li>示例： <code>source D:/user.sql;</code> ，将 D 盘根目录下的  <code>user.sql</code>  文件导入到当前选择的数据库中 .</li>\n<li>此命令需要在 <em>MySQL</em> 中执行 .</li>\n<li>可以使用此方法还原所有表数据，即还原数据库 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>备份数据库：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &gt; &lt;new_db_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql &gt; test_mysql.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的所有表导出到当前目录下名为  <code>test_mysql.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5OTM0MC9hcnRpY2xlL2RldGFpbHMvMTIxMzgwMDU4\">mysql 导入导出命令详细总结，看这一篇就够了_mysql 导入导出命令 - CSDN 博客</span></p>\n<h3 id=\"元数据\"><a class=\"markdownIt-Anchor\" href=\"#元数据\">#</a> 元数据</h3>\n<p>元数据是用于描述数据的数据。元数据在 <em>MySQL</em> 中是指关于数据库及其内容 (如表、列、索引等) 的信息。</p>\n<p>元数据存储在系统表中，这些表位于 <em>MySQL</em> 数据库的  <code>information_schema</code>  数据库中，通过查询这些系统表，可以获取关于数据库的结构、对象和其他相关信息的详细信息。</p>\n<p>常用的元数据查询：</p>\n<ul>\n<li>查看表的索引\n<ul>\n<li><code>SHOW INDEX FROM table_name;</code></li>\n</ul>\n</li>\n<li>查看表的创建语句\n<ul>\n<li><code>SHOW CREATE TABLE table_name;</code></li>\n</ul>\n</li>\n<li>查看表的行数\n<ul>\n<li><code>SELECT COUNT(*) FROM table_name;</code></li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kYXRhYmFzZS1pbmZvLmh0bWw=\">MySQL 元数据 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "title": "MySQL-3",
            "date_published": "2024-05-09T07:03:42.000Z",
            "content_html": "<h3 id=\"like-子句\"><a class=\"markdownIt-Anchor\" href=\"#like-子句\">#</a> <em>LIKE</em> 子句</h3>\n<p><em>like</em> 子句用于指定 <em>update</em> 以及 <em>delete</em> 中的 <em>where</em> 条件.</p>\n<p>可以使用 <em> <code>or</code> </em> 或者 <em> <code>and</code> </em> 指定一个或者多个条件.</p>\n<p>基本语法：</p>\n<p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;LIKE句所用的列名&gt; LIKE &lt;条件&gt;;</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1;\n</code></pre>\n<p>筛选 <em>user</em> 表中的所有行，<em>id</em> 列为 1 的所有列.</p>\n<h4 id=\"like-通配符\"><a class=\"markdownIt-Anchor\" href=\"#like-通配符\">#</a> <em>LIKE</em> 通配符</h4>\n<p>在 <em>like</em> 子句中， <code>%</code>  通配符与正则表达式的  <code>*</code>  作用相同，表示零个或多个字符.</p>\n<p>而  <code>_</code>  通配符表示一个字符.</p>\n<p>不区分大小写匹配：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1 collate utf8mb4_general_ci;\n</code></pre>\n<p>使用  <code>collate utf8mb4_general_ci</code>  定义 <em>utf8mb4</em> 字符集和大小写不敏感规则.</p>\n<h3 id=\"union-连接子句\"><a class=\"markdownIt-Anchor\" href=\"#union-连接子句\">#</a> <em>UNION</em> 连接子句</h3>\n<p>此操作符用于连接两个以上的 <em>SELECT</em> 语句的结果并去除重复行后组合到一个结果集中.</p>\n<p>每个 <em>UNION</em> 操作符必须由两个或者多个 <em>SELECT</em> 语句组成，每个 <em>SELECT</em> 语句的列数和数据类型必须一致.</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>可选子句，用于指定合并后的结果集的排序顺序.</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id &lt; 2 union select * from user where id &gt; 2;\n</code></pre>\n<p>筛选 <em>user</em> 表中 <em>id</em> 不等于 <em>2</em> 的所有行.</p>\n<h3 id=\"union-all\"><a class=\"markdownIt-Anchor\" href=\"#union-all\">#</a> <em>UNION ALL</em></h3>\n<p>此子句与 <em>UNION</em> 的不同在于展示出来的数据会包含重复数据。</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION ALL\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<h3 id=\"order-by-语句\"><a class=\"markdownIt-Anchor\" href=\"#order-by-语句\">#</a> <em>ORDER BY</em> 语句</h3>\n<p>如果想要对读取的数据进行排序，可以使用此子句来设定你想按那个字段那种方式来进行排序，再返回搜索结果。此子句可以按照一个或多个值进行升序 (<em>ASC</em>) 或降序 (<em>DESC</em>) 排序.</p>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名&gt; ORDER BY column1 [ASC | DESC], column2 [ASC | DESC],...;</code></p>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>用于指定排序顺序子句，<em>ASC</em> 表示升序（默认），<em>DESC</em> 表示降序.</li>\n</ul>\n</li>\n</ul>\n<p>使用拼音对汉字进行排序，如果使用 <em>gbk</em> 字符集，可以直接排序，如果使用 <em>utf8</em> 字符集，需要对字段进行转码.</p>\n<pre><code class=\"language-mysql\">select * from user order by convert(username using gbk);\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcmRlci1ieS5odG1s\">MySQL ORDER BY (排序) 语句 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"join连接\"><a class=\"markdownIt-Anchor\" href=\"#join连接\">#</a> <em>JOIN</em> (连接)</h3>\n<p>可以在 <em>SELECT</em> 、<em>UPDATE</em>、<em>DELETE</em> 语句中使用 JOIN 来联合多表查询.</p>\n<p>JOIN 按照功能大致分为三类：</p>\n<ul>\n<li><code>INNER JOIN</code>\n<ul>\n<li>获取两个表中字段匹配的记录，如果右表中匹配的行有字段为 <em>NULL</em>，则不显示此行.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 简单查询\nselect * from user inner join scores on user.id = scores.id;\n\n# 使用 as 定义别名\nselect u.username,s.chinese,s.mathematics,s.english from user as u inner join scores as s on u.id = s.id;\n\n# 多 inner join 查询\nselect * from user as u \ninner join scores as s on u.id = s.id \ninner join test_table as t on u.id = t.id;\n\n# 使用 where 过滤记录\nselect * from user as u\ninner join scores as s on u.id = s.id\ninner join test_table as t on u.id = t.id\nwhere u.birhdate &gt; '2005-01-01';\n</code></pre>\n<ul>\n<li><code>LEFT JOIN</code>\n<ul>\n<li>返回左表中的所有行，并包括右表中匹配的行，如果右表中匹配的行中没有值，则返回 <em>NULL</em> 值.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; left JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># left join 的使用方法同 inner join 一样\nselect u.id,u.username,s.mathematics,s.chinese,s.english,t.age from user as u\nleft join scores as s on u.id = s.id\nleft join test_table as t on s.id = t.id;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1qb2luLmh0bWw=\">MySQL 连接的使用 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"null-处理\"><a class=\"markdownIt-Anchor\" href=\"#null-处理\">#</a> <em>NULL</em> 处理</h3>\n<p><em>MySQL</em> 提供了三个运算符来处理 <em>NULL</em> 值，在 <em>MySQL</em> 中，<em>NULL</em> 值通常表示缺失或未知数据，你不能使用  <code>=</code>  或者  <code>!=</code>  来查找 <em>NULL</em> 值，因为 <em>NULL</em> 值与其他任何值比较都为 <em>NULL</em> .</p>\n<ul>\n<li><code>IS NULL</code>\n<ul>\n<li>当列的值是 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>IS NOT NULL</code>\n<ul>\n<li>当列的值不为 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>&lt;=&gt;</code>\n<ul>\n<li>当比较的两个值相等或者都为 <em>NULL</em> 时返回 <em>true</em> .</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 判读 age 字段是否为 NULL\nselect * from test_table as t where t.age is null;\n\n# 判断 age 字段是否不为 NULL\nselect * from test_table as t where t.age is not null;\n\n# 判断 age 字段是否为 NULL，效果同 is 一样\nselect * from test_table as t where t.age &lt;=&gt; null;\n</code></pre>\n<h4 id=\"数据表清洗\"><a class=\"markdownIt-Anchor\" href=\"#数据表清洗\">#</a> 数据表清洗</h4>\n<p>将表中指定的列中所有的 NULL 值替换为  <code>0</code> .</p>\n<pre><code class=\"language-mysql\">select * , ifnull(t.age,0) as age from test_table as t;\n</code></pre>\n<h4 id=\"ifnull-coalesce\"><a class=\"markdownIt-Anchor\" href=\"#ifnull-coalesce\">#</a> IFNULL &amp; COALESCE</h4>\n<p><code>IFNULL</code>  基本语法：</p>\n<p><code>IFNULL(expr1,expr2)</code></p>\n<p><em>ifnull</em> 是常用的用于处理 <em>NULL</em> 值的函数，其基本功能是如果参数 1 为 <em>NULL</em>，则返回参数 2 的值.</p>\n<p><code>COALESCE</code>  基本语法：</p>\n<p><code>COALESCE(value1,value2,...,valueEn)</code></p>\n<p><em>coalesce</em> 可以看做是 <em>ifnull</em> 的增强版，其功能同 <em>ifnull</em> 相同，但是可以接受比 <em>ifnull</em> 更多的参数，如果参数 1 为 <em>NULL</em>，则返回其参数列表中第一个非 <em>NULL</em> 的表达式，如果所有提供的表达式都为 <em>NULL</em>，那么 <em>coalesce</em> 函数将返回 <em>NULL</em>.</p>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1udWxsLmh0bWw=\">MySQL NULL 值处理 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p>MySQL 提供了正则表达式的匹配，用于提供比普通筛选更强大的功能.</p>\n<ul>\n<li><code>REGEXP</code>\n<ul>\n<li>regexp 是用于进行正则匹配的运算符.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,column2,... FROM &lt;表名&gt; WHERE column_name regexp 'pattern'</code></p>\n<pre><code class=\"language-mysql\"># 筛选出以 1 开头的 id\nselect * from user as u where u.id regexp '^[1*]';\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1yZWdleHAuaHRtbA==\">MySQL 正则表达式 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "title": "MySQL-2",
            "date_published": "2024-05-06T07:12:40.000Z",
            "content_html": "<h2 id=\"mysql-基本操作\"><a class=\"markdownIt-Anchor\" href=\"#mysql-基本操作\">#</a> MySQL 基本操作</h2>\n<h3 id=\"对数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据库操作\">#</a> 对数据库操作</h3>\n<h4 id=\"创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建数据库\">#</a> 创建数据库</h4>\n<p><code>CREATE DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法 ( <code>[]</code>  中为可选内容)：</p>\n<pre><code class=\"language-mysql\">CREATE DATABASE [IF NOT EXISTS] &lt;database_name&gt; [DEFAULT CHARSET charset_name] [COLLATE collation_name];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>IF NOT EXISTS</code></p>\n<ul>\n<li>这是一个可选的子句，用来避免因为试图创建已存在的数据库而产生的错误。</li>\n</ul>\n</li>\n<li>\n<p><code>DEFAULT CAHRSET</code></p>\n<ul>\n<li>这部分指定新创建的数据库的默认字符集为指定的字符集，这意味着在这个数据库中的所有表（除非明确指定其他字符集），其默认字符集都会是指定的字符集。</li>\n</ul>\n</li>\n<li>\n<p><code>COLLATE</code></p>\n<ul>\n<li>这部分指定了新创建数据库的默认排序规则为  <code>utf8_general_ci</code> 。排序规则（<em>Collation</em>）影响了字符数据的比较、排序以及唯一性校验的方式。 <code>utf8_general_ci</code>  是一个大小写不敏感的排序规则，适合那些对大小写不敏感的搜索场景，而且它对 <em>Unicode</em> 字符的排序并不是基于精确的语言排序规则，而是采用了一种通用的简单排序策略。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"选择数据库\"><a class=\"markdownIt-Anchor\" href=\"#选择数据库\">#</a> 选择数据库</h4>\n<p>要对一个数据库进行操作，必须先选择该数据库。选择数据库有两种方式。</p>\n<p>一是登录时选择已经创建好的数据库：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token operator\">-</span>D &lt;数据库名> <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p</pre></td></tr></table></figure><p>二是使用  <code>USE</code>  语句选择：</p>\n<pre><code class=\"language-mysql\">use &lt;数据库名&gt;;\n</code></pre>\n<p>使用这种方法语句执行成功后会显示  <code>Database changed</code> 。</p>\n<h4 id=\"删除数据库\"><a class=\"markdownIt-Anchor\" href=\"#删除数据库\">#</a> 删除数据库</h4>\n<p><code>DROP DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选子句，如果数据库存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对数据表操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据表操作\">#</a> 对数据表操作</h3>\n<p>创建数据表需要 <u>表名</u>、<u>表字段名</u>、<u>每个表字段的数据类型</u>。</p>\n<h4 id=\"创建数据表\"><a class=\"markdownIt-Anchor\" href=\"#创建数据表\">#</a> 创建数据表</h4>\n<pre><code class=\"language-mysql\">CREATE TABLE table_name(\n\tcolumn1 datatype,\n    column2 datatype,\n    ...\n);\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>表名</li>\n</ul>\n</li>\n<li><code>column1</code>\n<ul>\n<li>表的列名</li>\n</ul>\n</li>\n<li><code>datatype</code>\n<ul>\n<li>每个列的数据类型</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\">create table if not exists users(\\\n    id int unsigned auto_increment,\\\n    username varchar(50) not null,\\\n    birthdate date,\\\n    is_active boolean default true,\\\n    primary key(id,username)\\\n)engine=innodb default charset=utf8;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>unsigned</code></p>\n<ul>\n<li>设置字段属性的数据类型为无符号类型。</li>\n</ul>\n</li>\n<li>\n<p><code>auto_increment</code></p>\n<ul>\n<li>此关键字用于创建一个自增长的列，一般用于主键，每当有新的记录插入到表中时，此列数值会自动加 <code>1</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>primary key</code></p>\n<ul>\n<li>此关键字用于定义列为主键，主键用于唯一标识每行数据。可以使用多列来定义主键，列间以逗号 <code>,</code>  分隔。</li>\n</ul>\n</li>\n<li>\n<p><code>default</code></p>\n<ul>\n<li>此关键字用于指定列的默认值约束。当向表中插入新的记录时，如果没有为某个具有  <code>default</code>  约束的列提供具体值，那么 <em>MySQL</em> 将自动赋予该列预先定义好的默认值。</li>\n</ul>\n</li>\n<li>\n<p><code>not null</code></p>\n<ul>\n<li>如果不想字段值为空，可以设置字段属性为  <code>not null</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>engine=innodb</code></p>\n<ul>\n<li>指定表的存储引擎为  <code>InnoDB</code> 。 <code>InnoDB</code>  引擎支持事务处理和行级锁定。</li>\n</ul>\n</li>\n<li>\n<p><code>default charset=utf8</code></p>\n<ul>\n<li>指定默认的字符集为  <code>utf8</code> 。 <code>charset=utf8</code>  表示表中的所有字符串数据将以 <em>UTF-8</em> 字符集编码进行存储。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除数据表\"><a class=\"markdownIt-Anchor\" href=\"#删除数据表\">#</a> 删除数据表</h4>\n<p><code>DROP TABLE &lt;数据表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP TABLE [IF EXISTS] table_name;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>是你要删除的数据表的名字</li>\n</ul>\n</li>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选的子句，数据表存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看\"><a class=\"markdownIt-Anchor\" href=\"#查看\">#</a> 查看</h3>\n<p>可以使用  <code>show databases;</code>  命令查看所有数据库。</p>\n<p>使用  <code>show tables;</code>  查看选定数据库的所有表。</p>\n<p>使用  <code>desc &lt;表名&gt;;</code>  查看表结构。</p>\n<h2 id=\"增删查改\"><a class=\"markdownIt-Anchor\" href=\"#增删查改\">#</a> 增删查改</h2>\n<h3 id=\"增\"><a class=\"markdownIt-Anchor\" href=\"#增\">#</a> 增</h3>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;(column1, column2, ...)\nVALUES\n\t(value1, value2, ...),\n\t(value1, value2, ...),\n...;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>表中的列名。</li>\n</ul>\n</li>\n<li><code>value1, value2, ...</code>\n<ul>\n<li>要插入的具体数值。</li>\n</ul>\n</li>\n</ul>\n<p>如果数据是字符型，必须使用引号包裹。</p>\n<p>如果需要插入所有的列的数据，可以省略列名：</p>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;\nVALUES(NULL, 1, '张三');\n</code></pre>\n<ul>\n<li><code>NULL</code>\n<ul>\n<li>是用于自增长列的占位符，表示系统会为该列生成一个唯一的值。</li>\n</ul>\n</li>\n</ul>\n<p>在使用  <code>INSERT INTO</code>  插入数据时，如果设置了唯一键并且已经有此条数据，则  <code>SQL</code>  语句将无法执行成功，并会抛出错误 .</p>\n<p>可以使用  <code>INSERT IGNORE INTO</code>  来插入数据，与  <code>INSERT INTO</code>  的区别在于会忽略数据库中已经存在的数据，如果数据库中没有此条数据，则插入新的数据，如果有数据存在就跳过这条数据，这样就可以保留数据库中已经存在的数据，达到在间隙中插入数据的目的。</p>\n<h3 id=\"查\"><a class=\"markdownIt-Anchor\" href=\"#查\">#</a> 查</h3>\n<p><code>SELECT * FROM &lt;表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... \nFROM table_name \n[WHERE condition] \n[ORDER BY column_name [ASC | DESC]]\n[LIMIT number];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>你要选择的列的名称，可以使用  <code>*</code>  号表示选择所有列。</li>\n</ul>\n</li>\n<li><code>table_name</code>\n<ul>\n<li>要查询的数据表名称。</li>\n</ul>\n</li>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于指定过滤条件，返回符合条件的行。\n<ul>\n<li><code>select * from user where id &gt; 1;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>ORDER BY column_name [ASC | DESC]]</code>\n<ul>\n<li>可选子句，用于指定结果集的排序顺序，默认升序 (<em>ASC</em>)。\n<ul>\n<li><code>select * from user order by id desc;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>LIMIT number</code>\n<ul>\n<li>可选子句，限定返回的行数。\n<ul>\n<li><code>select * from user limit 2;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>如果你需要过滤重复的数据，可以使用  <code>DISTINCT</code>  关键字来过滤重复的数据。</p>\n<p>基本语法： <code>SELECT DISTINCT &lt;列名&gt; FROM table_name;</code></p>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zZWxlY3QtcXVlcnkuaHRtbA==\">MySQL 查询数据 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC13aGVyZS1jbGF1c2UuaHRtbA==\">MySQL WHERE 子句 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1oYW5kbGluZy1kdXBsaWNhdGVzLmh0bWw=\">MySQL 处理重复数据 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"改\"><a class=\"markdownIt-Anchor\" href=\"#改\">#</a> 改</h3>\n<p><code>UPDATE &lt;表名&gt; SET column1=value1, column2=value2, ...</code> ;</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">UPDATE &lt;table_name&gt;\nSET column1=value1, column2=value2, ...\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于更新指定的行。省略则更新所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC11cGRhdGUtcXVlcnkuaHRtbA==\">MySQL UPDATE 更新 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"删\"><a class=\"markdownIt-Anchor\" href=\"#删\">#</a> 删</h3>\n<p><code>DELETE FROM &lt;表名&gt; WHERE condition;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DELETE FROM table_name\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于删除指定的行。省略则删除所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kZWxldGUtcXVlcnkuaHRtbA==\">MySQL DELETE 语句 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "title": "MySQL-1",
            "date_published": "2024-05-06T07:09:43.000Z",
            "content_html": "<h3 id=\"mysql-简介\"><a class=\"markdownIt-Anchor\" href=\"#mysql-简介\">#</a> MySQL 简介</h3>\n<p><em>MySQL</em> 是一款广泛使用的关系型数据库管理系统（<em>RDBMS</em>），由瑞典 <em>MySQL AB</em> 公司最初开发，目前隶属于 <em>Oracle</em> 公司。<em>MySQL</em> 以其开源、稳定、高效、可扩展性强等特点而著名，是互联网行业中最为流行的数据库解决方案之一。</p>\n<p><em>MySQL</em> 命令关键字本身是不区分大小写的，但是数据库名、表名、列名、别名等在不同的操作系统下区分大小写的情况有所不同：</p>\n<ul>\n<li>在 <em>Windows</em> 系统下，<em>MySQL</em> 的表名、数据库名等默认是不区分大小写的，这是由于 <code>lower_case_table_names</code>  系统变量默认设置为 1，它会使得 <em>MySQL</em> 在存储和查找表名时统一转换为小写。</li>\n<li>在 <em>Linux</em> 系统和其他大多数 <em>Unix-like</em> 系统中，默认情况下 <em>MySQL</em> 是区分大小写的，也就是说，数据库名、表名等必须准确匹配其创建时的大小写。</li>\n</ul>\n<p>另外，尽管 <em>MySQL</em> 的关键字不区分大小写，但在编写 <em>SQL</em> 语句时，为了提高代码可读性和遵循行业标准，通常建议将 <em>SQL</em> 关键字大写，而标识符（如表名、列名）则根据实际情况保持一致的大小写规则。对于列名和列别名，无论在何种操作系统下，<em>MySQL</em> 内部都是忽略大小写的。不过要注意的是，如果启用了特定的排序规则（<em>collation</em>），即使在不区分大小写的环境中，也可能存在区分大小写的情况，尤其是在涉及到字符串比较时。</p>\n<h3 id=\"mysql-相关术语\"><a class=\"markdownIt-Anchor\" href=\"#mysql-相关术语\">#</a> MySQL 相关术语</h3>\n<ul>\n<li><strong>数据库:</strong> 数据库是一些关联表的集合。</li>\n<li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li>\n<li><strong>列:</strong> 一列 (数据元素) 包含了相同类型的数据，例如邮政编码的数据。</li>\n<li>** 行：** 一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li>\n<li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li>\n<li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li>\n<li>** 外键：** 外键用于关联两个表。</li>\n<li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li>\n<li>** 索引：** 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li>\n<li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li>\n</ul>\n<h3 id=\"关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库\">#</a> 关系型数据库</h3>\n<p>MySQL 为关系型数据库 (<em>Relational Database Management System</em>), 这种所谓的 &quot;<u>关系型</u>&quot;可以理解为&quot;<u>表格</u>&quot; 的概念，一个关系型数据库由一个或数个表格组成，如图所示的一个表格:</p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/03/0921_1.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>表头 (header):</strong> 每一列的名称；</li>\n<li><strong>列 (col):</strong> 具有相同数据类型的数据的集合；</li>\n<li><strong>行 (row):</strong> 每一行用来描述某条记录的具体信息；</li>\n<li><strong>值 (value):</strong> 行的具体信息，每个值必须与该列的数据类型相同；</li>\n<li><strong>键 (key)</strong>: 键的值在当前列中具有唯一性。</li>\n</ul>\n<h3 id=\"mysql-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据类型\">#</a> MySQL 数据类型</h3>\n<p>MySQL 数据类型大致分为五类，<u>数值</u>、<u>日期 \\ 时间</u>、<u>字符串 (字符)</u>、<u>空间类型</u> 和 <em><u>JSON</u></em> 类型，这五大类中又分为许多子类型：</p>\n<h4 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\">#</a> 数值类型</h4>\n<p>这些类型包括严格数值数据类型 (  <code>INTEGER</code> 、 <code>SMALLINT</code> 、 <code>DECIMAL</code>  和  <code>NUMERIC</code>  )，以及近似数值数据类型 (  <code>FLOAT</code> 、 <code>REAL</code>  和  <code>DOUBLE PRECISION</code> )。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>范围（有符号）</th>\n            <th>范围（无符号）</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>TINYINT</td>\n            <td>1 Bytes</td>\n            <td>(-128, 127)</td>\n            <td>(0, 255)</td>\n            <td>小整数值</td>\n        </tr>\n        <tr>\n            <td>SMALLINT</td>\n            <td>2 Bytes</td>\n            <td>(-32 768, 32 767)</td>\n            <td>(0, 65 535)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>MEDIUMINT</td>\n            <td>3 Bytes</td>\n            <td>(-8 388 608, 8 388 607)</td>\n            <td>(0, 16 777 215)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>INT 或 INTEGER</td>\n            <td>4 Bytes</td>\n            <td>(-2 147 483 648, 2 147 483 647)</td>\n            <td>(0, 4 294 967 295)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>BIGINT</td>\n            <td>8 Bytes</td>\n            <td>(-9 223 372 036 854 775 808, 9 223 372 036 854 775 807)</td>\n            <td>(0, 18 446 744 073 709 551 615)</td>\n            <td>极大整数值</td>\n        </tr>\n        <tr>\n            <td>FLOAT</td>\n            <td>4 Bytes</td>\n            <td>(-3.402 823 466 E+38, -1.175 494 351 E-38), (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>(0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>单精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DOUBLE</td>\n            <td>8 Bytes</td>\n            <td>(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>(0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>双精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DECIMAL</td>\n            <td>对DECIMAL(M,D)，如果M>D，为M+2否则为D+2</td>\n            <td>依赖于M和D的值</td>\n            <td>依赖于M和D的值</td>\n            <td>小数值</td>\n        </tr>\n    </tbody>\n</table>\n<h4 id=\"日期和时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型\">#</a> 日期和时间类型</h4>\n<p>表示时间值的日期和时间类型为  <code>DATETIME</code> 、 <code>DATE</code> 、 <code>TIMESTAMP</code> 、 <code>TIME</code>  和 <code>YEAR</code> 。</p>\n<p>每个时间类型有一个有效值范围和一个 &quot;零&quot; 值，当指定不合法的 <em>MySQL</em> 不能表示的值时使用 &quot;零&quot; 值。</p>\n<table>     <thead>         <tr>             <th>类型</th>             <th>大小</th>             <th>范围</th>             <th>格式</th>             <th>用途</th>         </tr>     </thead>     <tbody>         <tr>             <td>DATE</td>             <td>3 bytes</td>             <td>1000-01-01/9999-12-31</td>             <td>YYYY-MM-DD</td>             <td>日期值</td>         </tr>         <tr>             <td>TIME</td>             <td>3 bytes</td>             <td>'-838:59:59'/'838:59:59'</td>             <td>HH:MM:SS</td>             <td>时间值或持续时间</td>         </tr>         <tr>             <td>YEAR</td>             <td>1 byte</td>             <td>1901/2155</td>             <td>YYYY</td>             <td>年份值</td>         </tr>         <tr>             <td>DATETIME</td>             <td>8 bytes</td>             <td>'1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值</td>         </tr>         <tr>             <td>TIMESTAMP</td>             <td>4 bytes</td>             <td>'1970-01-01 00:00:01' UTC 到 '2038-01-19 03:14:07'UTC <br/>结束时间是第 <b>2147483647</b> 秒，北京时间 <b>2038-1-19 11:14:07</b>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值，时间戳</td>         </tr>     </tbody> </table>\n<h4 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h4>\n<p>字符串类型指  <code>CHAR</code> 、 <code>VARCHAR</code> 、 <code>BINARY</code> 、 <code>VARBINARY</code> 、 <code>BLOB</code> 、 <code>TEXT</code> 、 <code>ENUM</code>  和 <code>SET</code> 。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>CHAR</td>\n            <td>0-255 bytes</td>\n            <td>定长字符串</td>\n        </tr>\n        <tr>\n            <td>VARCHAR</td>\n            <td>0-65535 bytes</td>\n            <td>变长字符串</td>\n        </tr>\n        <tr>\n            <td>TINYBLOB</td>\n            <td>0-255 bytes</td>\n            <td>不超过 255 个字符的二进制字符串</td>\n        </tr>\n        <tr>\n            <td>TINYTEXT</td>\n            <td>0-255 bytes</td>\n            <td>短文本字符串</td>\n        </tr>\n        <tr>\n            <td>BLOB</td>\n            <td>0-65 535 bytes</td>\n            <td>二进制形式的长文本数据</td>\n        </tr>\n        <tr>\n            <td>TEXT</td>\n            <td>0-65 535 bytes</td>\n            <td>长文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMBLOB</td>\n            <td>0-16 777 215 bytes</td>\n            <td>二进制形式的中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMTEXT</td>\n            <td>0-16 777 215 bytes</td>\n            <td>中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGBLOB</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>二进制形式的极大文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGTEXT</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>极大文本数据</td>\n        </tr>\n    </tbody>\n</table>\n- `char(n)` 和 `varchar(n)` 中括号中 `n` 代表字符的个数，并不代表字节个数，比如 `CHAR(30)` 就可以存储 30 个字符。\n<ul>\n<li>\n<p><code>CHAR</code>  和  <code>VARCHAR</code>  类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n</li>\n<li>\n<p><code>BINARY</code>   和  <code>VARBINARY</code>  类似于  <code>CHAR</code>  和  <code>VARCHAR</code> ，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n</li>\n<li>\n<p><code>BLOB</code>  是一个二进制大对象，可以容纳可变数量的数据。</p>\n<ul>\n<li><code>TINYBLOB</code></li>\n<li><code>BLOB</code></li>\n<li><code>MEDIUMBLOB</code></li>\n<li><code>LONGBLOB</code></li>\n</ul>\n</li>\n<li>\n<p><code>TEXT</code>  是文本对象，同  <code>BLOB</code>  一样，也有四种类型。</p>\n<ul>\n<li><code>TINYTEXT</code></li>\n<li><code>TEXT</code></li>\n<li><code>MEDIUMTEXT</code></li>\n<li><code>LONGTEXT</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"枚举与集合类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举与集合类型\">#</a> 枚举与集合类型</h4>\n<ul>\n<li><code>ENUM</code> ：枚举类型，用于存取单一的值，可以选择一个预定义的集合。</li>\n<li><code>SET</code> ：集合类型，用于存储多个值，可以选择多个预定义的集合。</li>\n</ul>\n<h4 id=\"空间数据类型\"><a class=\"markdownIt-Anchor\" href=\"#空间数据类型\">#</a> 空间数据类型</h4>\n<p><code>GEOMETRY</code> ,  <code>POINT</code> ,  <code>LINESTRING</code> ,  <code>POLYGON</code> ,  <code>MULTIPOINT</code> ,  <code>MULTILINESTRING</code> ,  <code>MULTIPOLYGON</code> ,  <code>GEOMETRYCOLLECTION</code> : 用于存储空间数据（地理信息、几何图形等）。</p>\n<h4 id=\"json-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#json-数据类型\">#</a> JSON 数据类型</h4>\n<p>​\t<em>MySQL</em> 从 <code>5.7.8</code>  版本开始就支持存储原生的 <em>JSON</em> 类型的数据，我们可以 <em>MySQL</em> 中存储 <em>JSON</em> 对象或 <em>JSON</em> 数组。<em>JSON</em> 数据并不是以字符串的形式存储，而是使用一种允许快速读取文本元素的内部二进制格式进行存储的，在 <em>JSON</em> 数据列中插入或者更新的时候将会自动验证 <em>JSON</em> 文本数据是否正确，未通过验证的文本将产生一个错误信息。</p>\n<p>​\t<em>JSON</em> 与 <em>BLOB</em> 和 <em>TEXT</em> 类型一样，设置 <em>JSON</em> 类型的字段时不能设置默认值，其默认值只能为 <em>NULL</em> 。</p>\n<p>​\t<em>JSON</em> 类型的存储长度与  <code>LONGBLOB</code>  、 <code>LONGTEXT</code>  类型长度相同，但是最大长度不能超过 <em>max_allowed_packet</em> 系统变量设置的值。</p>\n<p>​</p>\n<h3 id=\"数据类型的选择\"><a class=\"markdownIt-Anchor\" href=\"#数据类型的选择\">#</a> 数据类型的选择</h3>\n<p>​\t在  <code>MySQL 5.0</code>  及以上的版本里，一个汉字占用的长度跟编码有关，在 <em>UTF-8</em> 编码下，一个汉字占用 3 个字节，<em>GBK</em> 编码下一个汉字占用 2 个字节。</p>\n<p>​\t选择数据类型通常选择更小的，以及更简单的类型，同时应该避免使用 <em>NULL</em> 。 对于经常变化的字段应该使用  <code>varchar</code> ，知道固定长度的用  <code>char</code> ，尽量使用  <code>varchar</code> ，能用  <code>varchar</code>  的地方不用  <code>text</code> ，对于超过 255 字符的只能使用  <code>varchar</code>  或  <code>text</code> 。</p>\n<h3 id=\"外键\"><a class=\"markdownIt-Anchor\" href=\"#外键\">#</a> 外键</h3>\n<p>​\t外键约束是用来在两个表之间建立关系的一种约束，它定义了一个表中的列与另一个表中的列之间的关系。外键约束可以保证数据的完整性和一致性。</p>\n<h4 id=\"级联操作\"><a class=\"markdownIt-Anchor\" href=\"#级联操作\">#</a> 级联操作</h4>\n<p>在添加了外键之后，再删除主表的数据时产生的约束行为，就称之为<u>删除 / 更新</u>行为。具体的行为有以下几种：</p>\n<ul>\n<li><code>no action</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>RESTRICT</code>  一致).</li>\n</ul>\n</li>\n<li><code>restrict</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>NO ACTION</code>  一致).</li>\n</ul>\n</li>\n<li><code>cascade</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则也删除 / 更新外键所在子表中的记录.</li>\n</ul>\n</li>\n<li><code>set null</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则设置子表中该外键值为  <code>null</code>  (需要允许外键值取  <code>null</code>  ).</li>\n</ul>\n</li>\n<li><code>set default</code>\n<ul>\n<li>主表有变更时，子表将外键列设置为一个默认的值. ( <code>Innodb</code>  不支持)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建外键\"><a class=\"markdownIt-Anchor\" href=\"#创建外键\">#</a> 创建外键</h4>\n<p>创建外键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表时添加外键\nCREATE TABLE 表名(\n    字段名 数据类型,\n    ...\n    FOREIGN key(外键字段名) REFERENCES 主表(主表列名) [外键产生的行为]\n);\n\n# 单独添加外键\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);\n</code></pre>\n<h4 id=\"删除外键\"><a class=\"markdownIt-Anchor\" href=\"#删除外键\">#</a> 删除外键</h4>\n<pre><code class=\"language-mysql\"># 删除外键\nALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"language-mysql\"> # 创建从表时添加外键\n create table order_items(\n item_id int auto_increment,\n order_id int unsigned,\n product_name varchar(255),\n quantity int,\n primary key(item_id),\n foreign key(order_id) references orders(order_id) \n on delete cascade on update cascade);\n    \n # 单独添加外键\n alter table scores add constraint fk_id foreign key(id) references user(id);\n \n # 删除外键\n alter table scores drop foreign key fk_id;\n</code></pre>\n<h3 id=\"唯一键\"><a class=\"markdownIt-Anchor\" href=\"#唯一键\">#</a> 唯一键</h3>\n<p>​\t唯一约束是一种完整性约束，用来确保表中某一列或多列的数据具有唯一性，即不允许出现重复的值。唯一约束有以下几条关键特点：</p>\n<ul>\n<li>\n<p><strong>唯一性</strong></p>\n<ul>\n<li>顾名思义，唯一约束强制指定列中的数据必须是唯一的。如果尝试插入重复的值，<em>MySQL</em> 将阻止该操作并返回错误.</li>\n</ul>\n</li>\n<li>\n<p><strong>允许空值</strong></p>\n<ul>\n<li>\n<p>唯一约束可以包含空值 ( <em>NULL</em> )，但是，一个具有唯一约束的列至多只能有一个空值.</p>\n</li>\n<li>\n<blockquote>\n<p>在数据库中，唯一约束允许列中的空值（ <em>NULL</em> ）出现一次的原因是基于空值的特殊性质。在 SQL 中，空值表示 “未知” 或 “不存在” 的数据。由于空值代表的是未知信息，它们在比较时不等于任何值，包括它们自己。这意味着，从逻辑上讲，你不能说一个空值等于另一个空值，因为它们都代表着未知。</p>\n<p>因此，当我们对一个列施加唯一约束时，我们是在说这个列中的每个非空值都必须是唯一的。但是，由于空值之间不能进行比较，我们就不能说它们是 “不唯一” 的。这就是为什么 SQL 标准允许一个具有唯一约束的列可以有一个空值的原因。然而，为了维护数据的完整性和逻辑一致性，大多数数据库系统会限制这样的列至多只能有一个空值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>多个唯一约束</strong></p>\n<ul>\n<li>在一个表中，可以定义多个唯一约束，这使得你可以对不同的列或列组合施加唯一性要求.</li>\n</ul>\n</li>\n<li>\n<p><strong>索引关联</strong></p>\n<ul>\n<li>创建唯一约束时，<em>MySQL</em> 会自动为受约束的列创建一个唯一索引，用于提高查询效率，尤其在执行这些列的查询时.</li>\n</ul>\n</li>\n<li>\n<p><strong>命名约定</strong></p>\n<ul>\n<li>在定义唯一约束时，可以为其指定一个明确的名称，这有助于管理和识别约束。如果不指定名称，<em>MySQL</em> 会自动为其生成一个名称，通常默认为该列的名称.</li>\n</ul>\n</li>\n<li>\n<p><strong>组合唯一约束</strong></p>\n<ul>\n<li>可以为表的多个列一起定义唯一约束，这意味着这一组列的值组合必须唯一，即使单个列的值可能重复。</li>\n</ul>\n</li>\n<li>\n<p><strong>非主键</strong></p>\n<ul>\n<li>尽管唯一约束与主键约束在确保唯一性方面有相似之处，但它不是表的主标识符，一个表可以有多个唯一约束，但主键只有一个。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"添加唯一键\"><a class=\"markdownIt-Anchor\" href=\"#添加唯一键\">#</a> 添加唯一键</h4>\n<p>​\t添加唯一键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表的时候使用 UNIQUE 关键字添加\nCREATE TABLE 表名(\n    字段名 数据类型 [UNIQUE],\n    ...\n);\n\n# 使用 ALTER TABLE 命令添加\nALTER TABLE 表名 ADD CONSTRAINT 约束名称 UNIQUE(列名);\n</code></pre>\n<h4 id=\"删除唯一键\"><a class=\"markdownIt-Anchor\" href=\"#删除唯一键\">#</a> 删除唯一键</h4>\n<pre><code class=\"language-mysql\"># 删除唯一键\nALTER TABLE 表名 DROP CONSTRAINT 唯一键名;\n</code></pre>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "springboot全局异常处理",
            "date_published": "2024-04-23T03:27:04.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "title": "springboot多模块开发",
            "date_published": "2024-04-22T03:50:17.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>为了解决项目越来越大的问题，使用了多模块开发来使层次更加清晰。</p>\n<p>架构大致如下：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvWf3j.png\" alt=\"springboot多模块开发1\"></p>\n<h3 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>（1）新建  <code>springboot</code>  项目；<br>\n（2）在新建后的  <code>springboot</code>  项目中新建多个  <code>module(模块)</code> ；<br>\n（3）修改  <code>pom</code>  文件以及删除多余的文件及文件夹；<br>\n（4）将原项目的代码放进去；</p>\n<h3 id=\"多模块开发的坑\"><a class=\"markdownIt-Anchor\" href=\"#多模块开发的坑\">#</a> 多模块开发的坑</h3>\n<p>由于第一次使用多模块开发，并不熟练，所以踩了很多坑，这里记录一下</p>\n<ol>\n<li>访问后台接口报 <code>404</code></li>\n</ol>\n<p>​\t访问所有接口都报 404，这是由于 <code>spring</code>  没有扫描到你写的 <code>bean</code>  所导致的，一般来说， <code>spring</code>  容器只会扫描启动类所在的包以及其下的子包中的所有类，但是开发不会将所有的模块都放在一个包下面，所以如果你 <code>service</code> 、 <code>dao</code>  等模块放在了启动类所在的包之外，那么 <code>spring</code>  就不会去扫描注册这些 <code>bean</code></p>\n<p>​\t解决方法是在启动类的 <code>@SpringBootApplication</code>  注解上面加上 <code>scanBasePackages=&#123;&quot;xxx.xxxxx.*&quot;&#125;</code></p>\n<p>​\t <code>xxx.xxxxx</code>  是你所共有的包，就比如说我所有的模块都是以  <code>com.example.xxx</code>  开始。</p>\n<p>​\t如：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvfnqP.png\" alt=\"springboot多模块开发2\"></p>\n<p>​\t要查看  <code>spring</code>  有没有注册你的  <code>bean</code>  可以到服务的  <code>Actuator</code>  中查看</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFv5css.png\" alt=\"springboot多模块开发3\"></p>\n<ol start=\"2\">\n<li>\n<p><code>springboot</code>  多模块的 <code>@Resource</code> 、 <code>@Autowired</code>  注入为 <code>NULL</code></p>\n<p>方法一：</p>\n</li>\n</ol>\n<p>​\t导致注入失败的原因是因为使用了  <code>new</code>  去使用这个方法，只需要将此类自动注入即可解决问题</p>\n<p>报错的代码:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改之后的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    getStudent studentInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t方法二：</p>\n<p>​\t封装一个  <code>StaticMethodGetBean</code>  的类，此类实现了  <code>ApplicationContextAware</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Spring 应用上下文，用于访问应用上下文中的 bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 设置应用上下文。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param applicationContext Spring 应用上下文实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 通过类类型获取应用上下文中的 bean。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param clazz 要获取的 bean 的类类型</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回 bean 的实例，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param &lt;T> bean 的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 尝试获取 bean 实例，如果不存在则返回 null</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在要使用的地方直接调用  <code>getBean</code>  方法获取即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>getStudent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmd5aWZhbjAvYXJ0aWNsZS9kZXRhaWxzLzEzMDU3MDA1MQ==\">SpringBoot 简单多模块构建_springboot 创建多模块项目</span></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/Spring-ResponseEntity/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/Spring-ResponseEntity/",
            "title": "Spring-ResponseEntity",
            "date_published": "2024-04-22T03:39:54.000Z",
            "content_html": "<h3 id=\"responseentity\"><a class=\"markdownIt-Anchor\" href=\"#responseentity\">#</a> <em>ResponseEntity</em></h3>\n<p><em>ResponseEntity</em> 是 <em>Spring Web MVC</em> 框架中提供的一个类，用于封装 <em>HTTP</em> 响应的详细信息。它允许开发者不仅定义返回给客户端的数据（通常作为请求处理的结果），还能够控制响应的状态码、头部信息以及主体内容的类型。</p>\n<h4 id=\"主要属性和功能\"><a class=\"markdownIt-Anchor\" href=\"#主要属性和功能\">#</a> 主要属性和功能：</h4>\n<ol>\n<li><em>HTTP</em> 状态码（<em>HttpStatus</em>）：通过指定一个 <em>HttpStatus</em> 枚举值（如 <code>OK</code> ,  <code>CREATED</code> ,  <code>BAD_REQUEST</code> ,  <code>NOT_FOUND</code> , 等），可以明确设置响应的状态码，以表明请求的处理结果是成功还是存在某种错误。</li>\n<li><em>HTTP</em> 头部（<em>HttpHeaders</em>）：可以通过 <em>ResponseEntity</em> 构造器或其 <em>headers</em> () 方法来设置或修改响应的头部字段，如  <code>Content-Type</code> 、 <code>Cache-Control</code> 、 <code>Location</code>  等，以便控制客户端如何解析响应内容、缓存策略、重定向位置等。</li>\n<li>响应主体（<em>body</em>）：<em>ResponseEntity</em> 的主体可以承载任何类型的数据，如字符串、 <code>JSON</code>  对象、 <code>XML</code>  文档、自定义 <code>Java</code>  对象等。这些数据将作为 <code>HTTP</code>  响应的正文发送给客户端。主体类型可以与 <code>Content-Type</code>  头部字段对应，确保客户端能正确解析。</li>\n</ol>\n<p>典型用法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/04/22/pkpf0zD.png\" alt=\"headers\"></p>\n<p>从 <em>ResponseEntity</em> 类的源码中可以看到，<em>headers</em> 方法返回的是 <em>this</em> 也就是类本身，所以可以进行链式调用</p>\n<p>而 <em>headers</em> 方法接收一个  <code>Consumer&lt;HttpHeaders&gt;</code>  类型的参数  <code>headersConsumer</code> ，该参数是一个函数接口，使用 <em>lambda</em> 表达式进行了匿名实现</p>\n<p>更多用法请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmdkb2MuY24vc3ByaW5nLXJlc3BvbnNlLWVudGl0eS8=\">使用 Spring ResponseEntity 处理 HTTP 响应 - spring 中文网 (springdoc.cn)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring",
                "ResponseEntity"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/SpringMVC/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/SpringMVC/",
            "title": "SpringMVC",
            "date_published": "2024-04-16T04:09:09.000Z",
            "content_html": "<h3 id=\"spring-mvc原理\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc原理\">#</a> Spring MVC 原理</h3>\n<h4 id=\"spring-mvc工作原理图\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc工作原理图\">#</a>  <code>Spring MVC工作原理图</code></h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/17/pFxTxC6.png\" alt=\"img\"></p>\n<blockquote>\n<p>在没有使用 SpringMVC 之前我们都是使用 Servlet 在做 Web 开发。但是使用 Servlet 开发在接收请求参数，数据共享，页面跳转等操作相对比较复杂。servlet 是 java 进行 web 开发的标准，既然 springMVC 是对 servlet 的封装，那么很显然<strong> SpringMVC 底层就是 Servlet，SpringMVC 就是对 Servlet 进行深层次的封装</strong></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDA3MjM1ODE=\">SpringMVC【入门篇】 - 知乎 (zhihu.com)</span></p>\n</blockquote>\n</blockquote>\n<h3 id=\"mvc模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc模式\">#</a> MVC 模式</h3>\n<p>MVC 模式 ( <code>Model</code> - <code>View</code> - <code>Controller</code> )：解决页面代码和后台代码的分离</p>\n<p>MVC 分别是：模型 <code>model(javabean)</code> 、视图 <code>view(jsp/img)</code> 、控制器 <code>Controller(Action/servlet)</code> 。</p>\n<p>C 存在的目的就是为了保证 M 和 V 的一致性，当 M 发生改变时，C 可以把 M 中的新内容更新到 V 中</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springmvc"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/SpringBoot%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/SpringBoot%E5%9F%BA%E7%A1%80/",
            "title": "SpringBoot基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"springboot-简介\"><a class=\"markdownIt-Anchor\" href=\"#springboot-简介\">#</a> <em>Springboot</em> 简介</h3>\n<blockquote>\n<blockquote>\n<p>​\t<em>Spring Boot</em> 是由<em> Pivotal</em> 团队提供的全新框架，其设计目的是用来简化新<em> Spring</em> 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，<em>Spring Boot</em> 致力于在蓬勃发展的快速应用开发领域 (<em>rapid application development</em>) 成为领导者。</p>\n</blockquote>\n<p>引用自百度百科</p>\n</blockquote>\n<p>总结：使用 <em>springboot</em> 可以很快的创建一个<em> springweb</em> 项目，极大的简化<em> spring</em> 的配置，让你专注于后端开发而不用关心繁琐的配置。</p>\n<h3 id=\"springboot-项目结构\"><a class=\"markdownIt-Anchor\" href=\"#springboot-项目结构\">#</a> <em>Springboot</em> 项目结构</h3>\n<ul>\n<li><em>resources</em> 资源文件夹\n<ul>\n<li><em>static</em> 保存所有静态资源（<em>js、css、images</em> 等）</li>\n<li><em>templates</em> 保存所有模板页面</li>\n<li><em>application.properties</em> 文件，用来编写一些服务器配置文件。但是更推荐使用 <em>yaml</em> 后缀来配置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jsr303-校验\"><a class=\"markdownIt-Anchor\" href=\"#jsr303-校验\">#</a> <em>JSR303</em> 校验</h3>\n<p>使用 <em>JSR303</em> 校验可以很轻松的在后端完成数据校验工作，只需要在要校验的实体类上加入相应的注解即可。</p>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>空检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Null</td>\n        <td>验证对象是否为null</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotNull</td>\n        <td>验证对象是否不为null，无法检查长度为0的字符串</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotBlank</td>\n        <td>检查约束字符串是不是Null还有被Trim的长度是否大于0，只对字符串，且会去掉前后空格</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotEmpty</td>\n        <td>检查约束元素是否为Null或者是EMPTY</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>Booelan检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertTrue</td>\n        <td>验证Boolean对象是否为true</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertFalse</td>\n        <td>验证Boolean对象是否为false</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>长度检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Size(min=,max=)</td>\n        <td>验证对象(Array,Collection,Map,String)大小是否在给定范围之内</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Length(min=,max=)</td>\n        <td>验证对象的长度是否在给定范围内</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>日期检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Past</td>\n        <td>验证Date和Calendar对象是否在当前时间之前</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Future</td>\n        <td>验证Date和Calendar对象是否在当前时间之后</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Pattern</td>\n        <td>验证String对象是否符合正则表达式的规则</td>\n    </tr>\n</table>\n<p>除了上面的注解标签，还可以自定义数据校验规则</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "title": "Spring基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"spring-spring-mvc-spring-boot-spring-cloud\"><a class=\"markdownIt-Anchor\" href=\"#spring-spring-mvc-spring-boot-spring-cloud\">#</a> Spring、Spring MVC、Spring Boot、Spring Cloud</h3>\n<blockquote>\n<ol>\n<li><strong>Spring</strong>：\n<ul>\n<li><code>Spring</code>  是一个轻量级的<strong>控制反转 ( <code>IoC</code> )</strong> 和<strong>面向切面 ( <code>AOP</code> )</strong> 的容器框架。</li>\n<li>它使你能够编写更干净、更可管理、并且更易于测试的代码。</li>\n<li><code>Spring</code>  提供了基础功能，适用于开发  <code>WEB</code>  层、业务层、持久层等多个方面。</li>\n</ul>\n</li>\n<li><strong>Spring MVC</strong>：\n<ul>\n<li><code>Spring MVC</code>  是  <code>Spring</code>  的一个模块，是一个<strong> Web 框架</strong>。</li>\n<li>通过  <code>Dispatcher Servlet</code> 、 <code>ModelAndView</code>  和  <code>View Resolver</code> ，它使得开发  <code>Web</code>  应用变得很容易。</li>\n<li>主要针对网站应用程序或者服务开发，处理 URL 路由、 <code>Session</code> 、模板引擎、静态  <code>Web</code>  资源等。</li>\n</ul>\n</li>\n<li><strong>Spring Boot</strong>：\n<ul>\n<li><code>Spring Boot</code>  是为简化  <code>Spring</code>  配置的<strong>快速开发整合包</strong>。</li>\n<li>它约定优于配置，简化了  <code>Spring</code>  的配置流程。</li>\n<li>更专注于开发<strong>微服务后台接口</strong>，不涉及前端视图。</li>\n</ul>\n</li>\n<li><strong>Spring Cloud</strong>：\n<ul>\n<li><code>Spring Cloud</code>  构建于  <code>Spring Boot</code>  之上，是一个关注全局的<strong>服务治理框架</strong>。</li>\n<li>它用于整合和管理多个  <code>Spring Boot</code>  单体微服务。</li>\n<li><code>Spring Cloud</code>  依赖于  <code>Spring Boot</code>  开发，但  <code>Spring Boot</code>  可以独立开发。</li>\n</ul>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li>Spring 是核心，提供了基础功能。</li>\n<li>Spring MVC 是基于 Spring 的一个 MVC 框架。</li>\n<li>Spring Boot 是为简化 Spring 配置的快速开发整合包。</li>\n<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>\n</ul>\n</blockquote>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p><code>spring</code>  是一个专注于  <code>Java EE</code>  开发的框架，它会使我们编写出来的  <code>Java</code>  程序 更快，更容易，更安全。</p>\n<h3 id=\"spring的分层架构设计模式\"><a class=\"markdownIt-Anchor\" href=\"#spring的分层架构设计模式\">#</a> Spring 的分层架构设计模式</h3>\n<ol>\n<li>\n<p><strong>表示层（Controller 层）</strong>：</p>\n<ul>\n<li>表示层是 Web 应用的入口，负责接收 HTTP 请求并处理。</li>\n<li>在 Spring 中，它提供了与 Spring MVC 和 Struts2 等框架的整合。</li>\n<li>控制器层处理用户请求，协调业务逻辑层和持久层之间的交互。</li>\n</ul>\n</li>\n<li>\n<p><strong>服务层（Service 层）</strong>：</p>\n<ul>\n<li>也称为业务逻辑层，负责处理业务逻辑，与项目需求紧密相关。</li>\n<li>在 Spring 中，可以管理事务、记录日志等。</li>\n<li>服务层通过调用持久层的方法来操作数据，对外提供接口。</li>\n</ul>\n</li>\n<li>\n<p><strong>持久层（DAO 层）</strong>：</p>\n<ul>\n<li>也被称为数据访问层，负责将数据持久化到数据库中。</li>\n<li>基本上，它主要用于数据库的增删改查操作。</li>\n<li>DAO 层是一个接口，具体的实现在 Mapper.xml 或者其他地方。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"声明组件扫描器\"><a class=\"markdownIt-Anchor\" href=\"#声明组件扫描器\">#</a> 声明组件扫描器</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>你要扫描的包名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h3 id=\"spring-相关网站\"><a class=\"markdownIt-Anchor\" href=\"#spring-相关网站\">#</a>  <code>Spring</code>  相关网站</h3>\n<ul>\n<li><code>Spring MVC API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvY3VycmVudC9qYXZhZG9jLWFwaS8=\">Overview (Spring Framework 6.1.5 API)</span></li>\n</ul>\n</li>\n<li><code>Spring Boot API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvYXBpLw==\">Overview (Spring Boot 3.2.4 API)</span></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/JavaWeb/",
            "url": "http://yunyat.cloud/MyCodingBook/java/JavaWeb/",
            "title": "JavaWeb",
            "date_published": "2024-04-16T03:46:44.000Z",
            "content_html": "<h3 id=\"域\"><a class=\"markdownIt-Anchor\" href=\"#域\">#</a> 域</h3>\n<ul>\n<li>\n<p>域是类的属性或数据成员，用于表示对象的特征或属性。</p>\n</li>\n<li>\n<p>它可以包括各种数据类型，可以是一个类变量，一个对象变量，一个对象方法变量或者是一个函数的参数。</p>\n</li>\n</ul>\n<h4 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h4>\n<ul>\n<li>域存储对象的状态信息，使得我们可以在对象内部访问和操作这些数据。</li>\n<li>通过域，我们可以描述对象的特性，例如一个人的姓名、年龄、工资等。</li>\n</ul>\n<h4 id=\"域对象\"><a class=\"markdownIt-Anchor\" href=\"#域对象\">#</a> 域对象</h4>\n<p>域对象是一种在  <code>Java Web</code>  应用中用于存储数据的容器。它们可以在不同的  <code>Servlet</code>  之间共享数据，以便在整个应用程序生命周期内保持数据的一致性。域对象主要包括以下三种：</p>\n<ol>\n<li><strong>请求域（Request 域）</strong>：请求域是一种用于在同一次 <em>HTTP</em> 请求处理周期内共享数据的域对象。数据存储在请求对象中，只在当前请求内有效。</li>\n<li><strong>会话域（Session 域）</strong>：会话域是一种用于在整个用户会话周期内共享数据的域对象。数据存储在会话对象中，可在用户登录后的多次请求之间共享。</li>\n<li><strong>应用域（Application 域）</strong>：应用域是一种用于在整个 <em>Web</em> 应用程序周期内共享数据的域对象。数据存储在  <code>ServletContext</code>  对象中，可被整个应用程序的所有  <code>Servlet</code>  共享。</li>\n</ol>\n<p>具体参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMzUyNzEz\">【Java 进阶篇】在 Java Web 应用中实现请求数据的共享：域对象详解</span></p>\n<h3 id=\"servlet\"><a class=\"markdownIt-Anchor\" href=\"#servlet\">#</a>  <code>Servlet</code></h3>\n<h4 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h4>\n<blockquote>\n<p><code>Servlet</code> （Server Applet），全称  <code>Java Servlet</code> ，未有中文译文。是用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSmF2YQ==\"> Java</span> 编写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\">服务器</span>端<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUE4JThCJUU1JUJBJThG\">程序</span>。其主要功能在于交互式地浏览和修改数据，生成动态<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2Vi\"> Web</span> 内容。狭义的  <code>Servlet</code>  是指 Java 语言实现的一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JThFJUE1JUU1JThGJUEz\">接口</span>，广义的  <code>Servlet</code>  是指任何实现了这个  <code>Servlet</code>  接口的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUIxJUJCXyglRTglQUUlQTElRTclQUUlOTclRTYlOUMlQkElRTclQTclOTElRTUlQUQlQTYp\">类</span>，一般情况下，人们将  <code>Servlet</code>  理解为后者。</p>\n</blockquote>\n<blockquote>\n<p><code>Servlet</code>  运行于支持 Java 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJBJTk0JUU3JTk0JUE4JUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\">应用服务器</span>中。从实现上讲， <code>Servlet</code>  可以响应任何类型的请求，但绝大多数情况下  <code>Servlet</code>  只用来扩展基于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSFRUUA==\"> HTTP</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJThGJUU4JUFFJUFF\"> 协议</span>的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2ViJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\"> Web 服务器</span>。</p>\n<blockquote>\n<p>引用自： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5L2FydGljbGUvZGV0YWlscy84MDI5MjExMA==\">JavaWeb——Servlet（全网最详细教程包括 Servlet 源码分析）</span></p>\n</blockquote>\n</blockquote>\n<h4 id=\"servlet-和-controller-的区别\"><a class=\"markdownIt-Anchor\" href=\"#servlet-和-controller-的区别\">#</a>  <code>servlet</code>  和  <code>controller</code>  的区别</h4>\n<blockquote>\n<p><code>web</code>  应用程序开发人员通常编写 <code>servlet</code>  来处理请求，但是，当要使用  <code>Servlet</code>  完成复杂的功能时，需要编写多个  <code>Servlet</code>  类，并且在  <code>web.xml</code>  进行注册，这对于完成复杂的  <code>Web</code>  应用，代码编写会变得很复杂，开发成本也会很高。所以  <code>Spring</code>  提供了强大的  <code>Web</code>  开发框架 <code> Spring MVC：Spring MVC</code>  是  <code>Spring</code>  产品的一部分， <code>Spring MVC</code>  是一个模型 - 视图 - 控制器的  <code>Web</code>  框架，建立在前端控制器  <code>servlet（DispatcherServlet）</code> ，它负责发送每个请求到合适的处理程序，使用视图来返回响应结果。</p>\n<blockquote>\n<p>引用自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTMwNzk2L2FydGljbGUvZGV0YWlscy8xMjcwNzg1NjI=\">【SpringBoot】controller 与 servlet 区别_servlet 和 controller 的区别</span></p>\n</blockquote>\n</blockquote>\n<p><em>controller</em> 是 <em>spring</em> 中的一个普通的 <em>bean</em> , 通过将请求发送到前端控制器然后经过一系列流程到达合适的 <em>controller</em> 并执行 <em>controller</em> 中的代码，使用 <em>springmvc</em> 可以很轻松的完成处理请求的工作</p>\n<p><em>springmvc</em> 可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmZ1bi8yMDI0LzA0LzE2L1NwcmluZ01WQy8=\">SpringMVC | 渡世之舟 (zero-li.fun)</span></p>\n<h3 id=\"上下文\"><a class=\"markdownIt-Anchor\" href=\"#上下文\">#</a> 上下文</h3>\n<blockquote>\n<p><strong>上下文代表了程序当下所运行的环境，联系你整个  <code>app(应用程序)</code>  的生命周期与资源调用，是程序可以访问到的所有资源的总和，资源可以是一个变量，也可以是一个对象的引用。</strong></p>\n</blockquote>\n<blockquote>\n<p>文章上下文，整片文章的语义。应用上下文，应用的语义 —— 运行时的环境</p>\n</blockquote>\n<p>由上可知，上下文就是整个文章语义环境，是应用程序当前所有能访问的资源的集合。</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NDc1MzQ3Nw==\">到底什么是应用上下文？</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTA2MjkyOTA=\">计算机编程中的上下文（Context）到底是什么？从理解到实践</span></p>\n<h3 id=\"过滤器\"><a class=\"markdownIt-Anchor\" href=\"#过滤器\">#</a> 过滤器</h3>\n<p>顾名思义，过滤一些不符合要求的请求。</p>\n<p>使用过滤器需要实现  <code>Filter</code>  接口，该接口中有三个方法需要实现</p>\n<ul>\n<li><code>init</code> ：\n<ul>\n<li>在容器创建当前过滤器的时候调用</li>\n</ul>\n</li>\n<li><code>doFilter</code> ：\n<ul>\n<li>过滤器的具体过滤规则</li>\n</ul>\n</li>\n<li><code>destroy</code> ：\n<ul>\n<li>在容器中销毁当前过滤器的时候调用</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<p><em>AllFilter</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AllFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 过滤器的初始化方法。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param filterConfig 过滤器配置对象，提供了配置信息。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @throws ServletException 如果初始化过程中出现异常，则抛出 ServletException。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化AllFilter过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 过滤器的核心方法，用于拦截请求并进行处理。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 如果请求来自本机，则放行；否则，返回 403 禁止访问。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param servletRequest  代表客户端的请求</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param servletResponse 用于向客户端发送响应</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param filterChain     过滤器链，用于将请求传递给下一个过滤器或 servlet</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @throws IOException      如果发生输入 / 输出错误</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @throws ServletException 如果处理请求时发生异常</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllFilter过滤器开始工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取客户端 IP 地址</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> servletRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 判断 IP 是否为本机，是则放行，否则返回 403 错误</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:0:0:0:0:0:0:1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 设置响应编码和类型，写入禁止访问的消息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"非本机IP，禁止访问\\\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; 非本机IP，禁止访问\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllFilter过滤器结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 过滤器的销毁方法，用于执行过滤器的清理工作。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁AllFilter过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>LoginFilter</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 定义需要过滤的 URL 地址数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"/login.html\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 过滤器初始化方法。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 该方法在过滤器实例化后立即调用，用于执行过滤器的初始化逻辑。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param filterConfig 过滤器配置对象，提供了配置文件中定义的过滤器参数。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @throws ServletException 如果初始化过程中出现 Servlet 相关异常，则抛出。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化login过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 执行过滤逻辑的方法。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 该方法会在每个请求到达时被调用，用于判断请求是否需要进行过滤处理。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param servletRequest 客户端请求对象，包含了客户端发送的请求信息。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param servletResponse 用于向客户端发送响应的对象。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param filterChain 过滤器链对象，用于将请求传递给下一个过滤器或 servlet。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @throws IOException 如果处理请求或响应时发生 IO 异常，则抛出。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @throws ServletException 如果处理请求或响应时发生 Servlet 相关异常，则抛出。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login过滤器开始执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 URL 数组转换为 List 方便后续操作</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">var</span> httpServletRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> httpServletRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取请求的完整 URL</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> regex <span class=\"token operator\">=</span> <span class=\"token string\">\"/[^/]+\\\\.html$\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义匹配 HTML 文件的正则表达式</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译正则表达式为 Pattern 对象</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">var</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Matcher 对象用于匹配 URL</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果 URL 中存在匹配的部分</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查是否为需要过滤的 URL</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续过滤链</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问路径错误 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录非法访问尝试</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login过滤器执行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 过滤器销毁方法。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 该方法在应用停止时调用，用于执行过滤器的销毁逻辑，释放资源。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁login过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果需要过滤指定的请求，需要在配置类中添加一个 <code>Bean</code></p>\n<p><em>FilterConfig</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 标识为配置类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AllFilter</span> allFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注入 AllFilter 实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LoginFilter</span> loginFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注入 LoginFilter 实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 配置 AllFilter 的注册信息。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return FilterRegistrationBean&lt;AllFilter> 返回 AllFilter 的注册 bean 配置。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AllFilter</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">allFilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AllFilter</span><span class=\"token punctuation\">></span></span> allFilterBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>allFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的 URL 模式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的执行顺序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> allFilterBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 配置 LoginFilter 的注册信息。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @return FilterRegistrationBean&lt;LoginFilter> 返回 LoginFilter 的注册 bean 配置。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginFilter</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loginFilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginFilter</span><span class=\"token punctuation\">></span></span> loginFilterBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>loginFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器实例</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的 URL 模式</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的执行顺序</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> loginFilterBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>allFilterRegistrationBean</code>  过滤所有请求， <code>loginFilterRegistrationBean()</code>  过滤所有以 <code>.html</code>  结尾的请求</p>\n<h3 id=\"拦截器\"><a class=\"markdownIt-Anchor\" href=\"#拦截器\">#</a> 拦截器</h3>\n<h3 id=\"监听器\"><a class=\"markdownIt-Anchor\" href=\"#监听器\">#</a> 监听器</h3>\n<ol>\n<li><code>ServletContextListener（上下文监听器）</code> ：用于监听  <code>Web</code>  应用程序的启动和关闭事件。当 <code>ServletContext</code>  对象创建或销毁时，可以执行相应的操作。</li>\n<li><code>HttpSessionListener（会话监听器）</code> ：监听会话的创建和销毁事件。这对于跟踪在线用户、管理用户会话状态非常有用。</li>\n<li><code>ServletRequestListener（请求监听器）</code> ：监听请求的创建和销毁事件。可以用于记录请求信息、初始化数据等。</li>\n</ol>\n<p>在  <code>Spring</code>  框架中，也有一些特定的事件监听器：</p>\n<ol>\n<li><code>ApplicationListener</code> ： <code>Spring</code>  提供的通用事件监听器接口。您可以自定义事件，继承 <code>ApplicationEvent</code>  类，并实现 <code>ApplicationListener</code>  接口来处理这些事件。例如，您可以监听自定义事件，如用户登录、订单创建等，以执行相应的业务逻辑。</li>\n<li><code>Spring Boot中的事件监听器</code> ： <code>Spring Boot</code>  继承了  <code>Spring</code>  的事件监听机制。您可以使用 <code>@EventListener</code>  注解来定义事件监听方法，将其与特定事件关联。例如，监听应用启动事件、数据库连接池初始化等。</li>\n</ol>\n<p>参考文章：</p>\n<p><a href=\"https://developer.aliyun.com/article/688320\">spring 监听器 Listener - 阿里云开发者社区 (  <code>aliyun.com</code>  )</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/145927110\">深入浅出  <code>Spring/SpringBoot</code>  事件监听机制 - 知乎 (  <code>zhihu.com</code>  )</a></p>\n<p><em>Controller</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">// 定义一个 RESTful 控制器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 GetStudent 服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">GetStudent</span> getstudent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于获取学生信息的服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 处理 GET 请求，获取学生信息。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return JsonResult&lt;String> 包含学生信息的 JSON 结果，其中数据类型为 String。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 调用 getStudent 服务，将结果封装在 JsonResult 中返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>getstudent<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>getStudent</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 标示一个 Spring 框架的服务组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 ApplicationContext 对象，用于访问 Spring 应用上下文</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 Student 对象，该对象将被用于演示事件发布时的数据载体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 获取并设置学生信息，然后发布一个学生信息更新的事件。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @return 返回设置好的学生信息字符串。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 设置学生的基本信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setStudentNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20240001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 发布一个自定义事件，通知其他监听器学生信息已更新</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 返回学生信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>Event:</em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * TestEvent 类扩展了 ApplicationEvent 用于表示一个测试事件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 这个类主要用于事件驱动的架构中，用来传递与学生相关的事件信息。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学生信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 构造函数，用于创建一个 TestEvent 实例。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param source 事件的来源对象。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param student 发生事件的学生信息。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类构造函数，设置事件来源</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>student <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置事件相关的学生信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>EventListener</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试事件监听器类，用于监听 TestEvent 事件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 使用 Log4j2 进行日志记录，并组件化以便于 Spring 容器管理。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestEventListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 当监听到 TestEvent 事件时，处理该事件。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param event 发生的 TestEvent 事件，包含需要处理的学生信息。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从事件中获取学生信息，并记录到日志中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> student <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的例子中使用了监听器监听了自定义事件。首先，请求到达控制器，控制器获取学生信息，在学生信息类中发布一个自定义事件，然后监听器会捕获此事件并执行你自定义的事件内容</p>\n<hr>\n<p><code>Servlet API</code>  中文 Doc：<a href=\"https://www.cnblogs.com/haimishasha/p/5609261.html#autoid-3-4-0\">  <code>Java Servlet API</code>  中文说明文档 - 海米傻傻 - 博客园 (  <code>cnblogs.com</code>  )</a></p>\n<p>官方  <code>Servlet API</code>  Doc：<a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html\">  <code>ServletRequest</code>  (Java™ EE 7 Specification APIs) (  <code>oracle.com</code>  )</a></p>\n<h3 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> <em>Cookie</em></h3>\n<blockquote>\n<p><em>Cookie</em>，有时也用其复数形式 <em>Cookies</em>。类型为 “<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行 <a href=\"https://baike.baidu.com/item/Session/479100?fromModule=lemma_inlink\"><em>Session</em></a> 跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYvMTAxMDgxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">客户端</span>计算机暂时或永久保存的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYvMTExMTYzP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">信息</span> 。</p>\n<blockquote>\n<p>引用自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9jb29raWUvMTExOSNyZWZlcmVuY2UtJTVCMyU1RC01MDYyMzMyLXdyYXA=\">百度百科</span></p>\n</blockquote>\n</blockquote>\n<p>​\t使用 <em>cookie</em> 就可以使浏览器保存一些用户信息，来达到某些特定目的，比如打开网站在一定时间内不需要重复登录，或者使我们登录时可以自动填充账号密码等。</p>\n<p>​\t一般情况下，<em>cookie</em> 是以键值对的形式表示的 <code>(key=value)</code></p>\n<h4 id=\"cookie-常用属性\"><a class=\"markdownIt-Anchor\" href=\"#cookie-常用属性\">#</a> <em>cookie</em> 常用属性</h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjt5fe.png\" alt=\"cookie1\"></p>\n<ul>\n<li>\n<p><em>Path</em>：该属性定义了 <em>Web</em> 站点上可以访问此 <em>Cookie</em> 的目录</p>\n</li>\n<li>\n<p><em>Expires</em>：该属性表示 <em>Cookie</em> 的过期时间，也就是有效值，此 <em>Cookie</em> 在这个值之前都有效</p>\n</li>\n</ul>\n<p>其他属性请参考百度百科</p>\n<h4 id=\"cookie-在浏览器请求中的表现形式\"><a class=\"markdownIt-Anchor\" href=\"#cookie-在浏览器请求中的表现形式\">#</a> <em>cookie</em> 在浏览器请求中的表现形式</h4>\n<p>请求头：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjNt9e.png\" alt=\"cookie2\"></p>\n<blockquote>\n<p>通过上面可以发现， <code>cookie</code>  是以  <code>key=value</code>  表示的。多个  <code>cookie</code>  用  <code>;</code>  号隔开</p>\n</blockquote>\n<p>响应头：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjN0Bt.png\" alt=\"cookie3\"></p>\n<blockquote>\n<p><code>cookie</code>  在响应中的表现形式为  <code>Set-Cookie=value</code>  。多个  <code>cookie</code>  使用多个  <code>Set-Cookie</code>  表示</p>\n</blockquote>\n<h4 id=\"cookie-的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#cookie-的生命周期\">#</a> <em>cookie</em> 的生命周期</h4>\n<p>​\t <code>cookie</code>  有 2 种存储方式，一种是会话性，一种是持久性。</p>\n<ul>\n<li>会话性：如果  <code>cookie</code>  为会话性，那么  <code>cookie</code>  仅会保存在客户端的内存中，当我们关闭客户端时  <code>cookie</code>  也就失效了</li>\n<li>持久性：如果  <code>cookie</code>  为持久性，那么  <code>cookie</code>  会保存在用户的硬盘中，直至生存期结束或者用户主动将其销毁。</li>\n</ul>\n<p>​     <code>cookie</code>  我们是可以进行设置的，我们可以人为设置  <code>cookie</code>  的有效时间，什么时候创建，什么时候销毁。</p>\n<h4 id=\"cookie-的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#cookie-的常用方法\">#</a> cookie 的常用方法</h4>\n<table>\n<tr>\n        <th align=\"center\" colspan=\"2\">构造方法</th>\n    </tr>\n    <tr>\n        <td align=\"center\">Cookie(String name, String value)</td>\n        <td align=\"center\">使用指定的名称和值创建一个新的 Cookie。</td>\n    </tr>\n</table>\n<table>\n    <tr>\n        <th align=\"center\">修饰符与类型</th>\n        <th align=\"center\">方法与描述</th>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">Object</td>\n        <td align=\"center\">clone()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">覆盖标准 java.lang.Object.clone 方法返回此 Cookie 的副本。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getComment()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 用途的注释。如果此 Cookie 没有注释，则返回 null。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">int</td>\n        <td align=\"center\">getMaxAge()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的最大期限（以秒为单位）。默认情况下，此 Cookie 的最大期限是 -1，表示此 Cookie\n            将会持续存在，直至浏览器关闭而消失。\n        </td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getName()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前名称。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getValue()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前值。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getPath()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前路径。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setComment(String purpose)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的注释。注释用于说明 Cookie 的用途。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setMaxAge(int expiry)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的最大期限（以秒为单位）。正值表示此 Cookie 将在设置的 expiry 后过期。注意，该值为 Cookie 过期的最长期限，而不是 Cookie 当前年龄。\n            负值表示 Cookie 将在浏览器关闭时过期。零值表示 Cookie 会立马删除。\n        </td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setPath(String uri)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的当前路径。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setValue(String newValue)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">为此 Cookie 的分配一个新值。</td>\n    </tr>\n</table>\n<blockquote>\n<p>更多请参考：<a href=\"https://docs.oracle.com/javaee/7/api/index.html\">Cookie（Java（TM） EE 7 规范 API） ( <code>oracle.com</code> )</a></p>\n</blockquote>\n<p><em>Cookie</em> 类位于  <code>javax.servlet.http</code>  下</p>\n<p><code>HttpServletRequest</code>  和  <code>HttpServletResponse</code>  对 <em>cookie</em> 进行操作的常用方法</p>\n<ul>\n<li><code>response.addCookie(Cookie cookie)</code>\n<ul>\n<li>将 <em>cookie</em> 给客户端进行保存</li>\n</ul>\n</li>\n<li><code>request.getCookies()</code>\n<ul>\n<li>得到客户端传过来的所有 <em>cookie</em> 对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h4>\n<p>使用 <em>cookie</em> 自动填充用户名和密码，使用 <em>session</em> 实现一天内登录过后无需登录</p>\n<p><em><strong>login.html</strong></em>：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 登录表单，向 http://localhost:8080/login 发送 POST 请求 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:8080/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 获取指定名称的 cookie 值</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param name 需要获取的 cookie 的名称</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return 返回 cookie 的值，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">,</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(^| )\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"=([^;]*)(;|$)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 从 cookie 中获取用户名和密码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">const</span> username_cookie <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">const</span> password_cookie <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 获取 HTML 中对应的用户名和密码输入框元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">const</span> username_eb <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">const</span> password_eb <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 如果 cookie 中存在用户名和密码，且输入框元素存在，则将 cookie 中的用户名和密码填入输入框</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>username_cookie <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> password_cookie <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>username_eb <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> password_eb <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        username_eb<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> username_cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        password_eb<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> password_cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><em><strong>LoginController</strong></em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 登录处理控制器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param request  HttpServletRequest 对象，用于接收客户端请求数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param response HttpServletResponse 对象，用于向客户端发送响应</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回登录成功后重定向到的 URL 或登录失败后重新回到登录页面的 URL</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @throws IOException 如果发生 I/O 错误</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">loginController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存储用户输入的登录信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前会话对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Cookie</span> cookieUserName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Cookie</span> cookiePassword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 从请求中获取用户名和密码，并存入 hashMap 中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 调用 Login 类的 login 方法进行登录验证</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Login</span><span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 登录成功，创建并设置用户名和密码的 Cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cookieUserName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cookiePassword <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            cookieUserName<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 Cookie 有效期为 1 天</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cookiePassword<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 设置会话有效期为 1 天</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxInactiveInterval</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookieUserName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookiePassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 在会话中设置用户名，以便在其他页面中使用</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 登录成功，重定向到首页</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 登录失败，重定向回登录页面</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/login.html\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>Index</strong></em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Index</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 处理访问首页的请求。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 如果用户已登录（即会话中包含用户名），则显示欢迎页面；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 否则，重定向到登录页面。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param request  HttpServletRequest 对象，用于获取请求信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param response HttpServletResponse 对象，用于设置响应信息和发送响应</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @throws IOException 如果发生 I/O 错误</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/index*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">var</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试从会话中获取用户名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 用户已登录，设置响应为 HTML 格式，并输出欢迎页面</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    &lt;!DOCTYPE html></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    &lt;html lang=\"en\"></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    &lt;head></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        &lt;meta charset=\"utf-8\"></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        &lt;title>Title&lt;/title></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    &lt;/head></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    &lt;body></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    &lt;h1>success&lt;/h1></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    &lt;div></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        &lt;p></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            welcome\\s\"\"\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        &lt;/p></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    &lt;/div></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    &lt;/body></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    &lt;/html></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    \"\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 用户未登录，重定向到登录页面</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自动填充逻辑：</p>\n<p>​\t先访问  <code>index</code>  接口，它会判断有没有登录，没有登录的话会重定向到  <code>login.html</code>  界面。在  <code>login</code>  接口中验证用户名和密码，并将  <code>cookie</code>  放到响应头中返回给客户端存储，如果登录成功则重定向到  <code>index</code>  主页，否则重定向到  <code>login.html</code>  重新登录。</p>\n<p>​\t之后关闭浏览器，访问  <code>index</code>  接口，由于请求头会携带  <code>cookie</code>  以及  <code>session</code>  ， 所以只要  <code>session</code>  没有过期就可以直接访问。</p>\n<p>​\t访问  <code>login.html</code>  则  <code>HTML</code>  中的  <code>JavaScript</code>  代码会获取  <code>cookie</code>  ，以便实现自动填充。</p>\n<h4 id=\"流程图\"><a class=\"markdownIt-Anchor\" href=\"#流程图\">#</a> 流程图</h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjH4SO.png\" alt=\"流程图\"></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "Java",
                "servlet"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "url": "http://yunyat.cloud/MyCodingBook/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "title": "spring开发注解集合",
            "date_published": "2024-04-16T03:35:58.000Z",
            "content_html": "<h3 id=\"spring-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-的常用注解\">#</a> Spring 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Component(value=&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类会被交由  <code>spring</code>  容器管理</p>\n<p>2）value 值为 spring 创建该类对象的 id 值</p>\n<p>3）该注解使用类的无参构造方法创建对象</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Value(&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行基本类型的注入，在括号内的引号中键入属性值</p>\n<p>2）可以给  <code>set</code>  方法进行此注释</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Autowired</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行引用类型的注入，即 <code>bean</code>  对象的注入</p>\n<p>2）可以声明在字段 (属性) 或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byType</code>  注入，通过此注解的对象需要在 <code>IoC</code>  容器中存在，否则需要加上 <code>required=false</code> ，表示忽略当前要注入的 <code>bean</code> ，如果有就直接注入，没有跳过，不会报错</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ComponentScan</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注释使组件扫描器扫描本类此包下的  <code>bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Configuration</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解定义配置类</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Bean</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  中用于方法级别的注解，主要用于在  <code>Java</code>  配置类中定义一个  <code>Bean</code>  。</p>\n<p>2）此注解告诉  <code>spring</code>  这个方法将返回一个对象，该对象应该被注册为  <code>spring</code>  容器中的一个  <code>Bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestControllerAdvice</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  框架的一个注解，用于定义一个全局的异常处理控制器。通常与  <code>@ExceptionHandler</code>  注解一起使用。</p>\n<p>2） <code>@RestControllerAdvice</code>  等同于  <code>@ControllerAdvice</code>  加上  <code>@ResponseBody</code>  注解，表示该类中的方法负责处理异常，并将处理结果作为 <code>HTTP</code>  响应的主体返回。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ResponseStatus</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为  <code>Spring</code>  框架提供的一个注解，用于指示方法应该返回特定的 HTTP 状态码和可选的原因短语。</p>\n<p>2）接收  <code>value</code>  和  <code>code(可选)</code>  ，类型为  <code>HTTPStatus</code>  枚举类的常量值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring-mvc-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc-的常用注解\">#</a> Spring MVC 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Controller</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类，其中的方法如果没有被此注解修饰，一般都是返回一个视图（一个具体的页面），这个视图会和模板引擎结合在一起使用</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestController</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解基本上等于  <code>@RequesBody</code>   +  <code>@Controller</code></p>\n<p>2）使用此注解会直接返回一个 <code>JSON</code>  数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestMapping</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解来映射请求，也就是通过它来指定控制器可以处理那些  <code>URL</code>  请求</p>\n<p>2）此注解除了  <code>name()</code>  方法，其他的方法都可以定义多个属性值，如  <code>value()</code>  和  <code>path()</code>  都可以同时定义多个字符串值来接收多个  <code>URL</code>  请求</p>\n</blockquote>\n<ul>\n<li>\n<p><em>path</em>：可以处理的  <code>url</code>  路径， <code>value</code>  效果和  <code>path</code>  相同</p>\n</li>\n<li>\n<p><em>method</em>：此属性用来定义浏览器的请求方式，可以使用此属性指定方法仅处理哪些请求。有四种基本请求方式：1.  <code>RequestMethod.GET</code> （查）2.  <code>RequestMethod.POST</code> （增） 3.  <code>RequestMethod.PUT</code> （改） 4.  <code>RequestMethod.DELETE</code> （删）。常用的只有 1、2 两种</p>\n</li>\n<li>\n<p><em>params</em>：可以使用此属性限制请求参数，只有带指定参数的请求才会被响应</p>\n</li>\n<li>\n<p><em>headers</em>：此属性表示请求头，可以使用此属性限制客户端发来的请求</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@PathVariable</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）可以通过此注解将  <code>URL</code>  中的占位符绑定到控制器的处理方法的参数中，占位符可以在任何位置，占位符使用 <code>&#123;&#125;</code>  括起来，如： <code>@RequestMapping(&quot;/books/&#123;id&#125;/&#123;authorName&#125;&quot;)</code></p>\n<p>2）通过此注解可以将  <code>URL</code>  中的参数接收，URL 中的参数名需与方法接收参数名保持一致，否则无法接收。可以通过  <code>@PathVariable</code>  的  <code>value</code>  属性指定参数名</p>\n<p>3）此注解是直接放在形参中的，如： <code>public String testBook(@PathVariable Integer id, @PathVariable(value=&quot;authorName&quot;) String name)&#123;&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestParam</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）通过此注解从  <code>request</code> （请求） 中获取数值。</p>\n<p>2）与上一个注解的区别在于请求数据风格不同，如： <code>http://localhost:8080/user?id=1</code></p>\n</blockquote>\n<ul>\n<li><code>value</code> ：当传入的参数和方法参数名不一致时，可以使用  <code>value</code>  指定传入的参数名</li>\n<li><code>required</code> ：是布尔值，用来表示该参数是否为必须传入</li>\n<li><code>defaultValue</code> ：默认值，表示请求中没有同名的参数时的默认值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestBody</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）将  <code>HTTP</code>  请求体数据自动绑定到指定类型的参数</p>\n<p>2）支持多种数据格式（如  <code>JSON</code> 、 <code>XML</code> ）与  <code>Java</code>  类型（如  <code>POJO</code> 、 <code>List</code> 、 <code>Map</code> ）的映射，借助  <code>HttpMessageConverter</code>  实现</p>\n<p>3）可与  <code>@RequestParam</code> 、 <code>@PathVariable</code>  等注解共存，以便在一个方法中处理多种来源的请求数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ExceptionHandler</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是 <code>Spring MVC</code>  中用于标记处理特定异常的方法</p>\n<p>2）可以接受多种异常 <code>@ExceptionHandler(value = &#123;NullPointerException.class, IllegalArgumentException.class, IllegalStateException.class&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他注解\"><a class=\"markdownIt-Anchor\" href=\"#其他注解\">#</a> 其他注解</h3>\n<p><code>@Resource</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为 <code>J2EE</code>  提供</p>\n<p>2）跟 <code>@Autowired</code>  一样，都是为 <code>bean</code>  对象注入，同样可以声明到字段或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byName</code>  注入，没有则通过 <code>byType</code>  方式注入</p>\n<p>更多关于此注解的细节参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTkwNDk0L2FydGljbGUvZGV0YWlscy8xMTQ0NDQzNzE=\">@Autowired 和 @Resource 注解的区别和联系</span></p>\n</blockquote>\n</li>\n</ul>\n<p><code>@WebServlet</code></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"注入方式\"><a class=\"markdownIt-Anchor\" href=\"#注入方式\">#</a> 注入方式</h3>\n<ul>\n<li><code>byName</code>\n<ul>\n<li>简单说就是使用变量名去 <code>IoC</code>  容器中匹配合适 <code>bean</code>  的 <code>id</code>  属性</li>\n</ul>\n</li>\n<li><code>byType</code>\n<ul>\n<li>使用变量类型去匹配 <code>bean</code>  的 <code>class</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>具体可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdhODQyNDI4L2FydGljbGUvZGV0YWlscy81NDY5NDQ4NA==\">Spring 中的 byName 与 byType_springboot byname 和 bytype</span></p>\n<h3 id=\"封装实体类接收表单数据\"><a class=\"markdownIt-Anchor\" href=\"#封装实体类接收表单数据\">#</a> 封装实体类接收表单数据</h3>\n<p>在表单数据过多时，可以封装实体类接收参数</p>\n<p><em>Demo</em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 直接传入实体类的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>getUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "spring注解"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/javascript/JSON/",
            "url": "http://yunyat.cloud/MyCodingBook/javascript/JSON/",
            "title": "JSON",
            "date_published": "2024-04-03T02:05:34.000Z",
            "content_html": "<h3 id=\"json-简介\"><a class=\"markdownIt-Anchor\" href=\"#json-简介\">#</a> JSON 简介</h3>\n<blockquote>\n<p><code>JSON</code> : <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(  <code>JavaScript</code>  对象表示法)</p>\n<p><code>JSON</code>  是存储和交换文本信息的语法，类似  <code>XML</code> 。</p>\n<p><code>JSON</code>  比  <code>XML</code>  更小、更快，更易解析。</p>\n<p><code>JSON</code>  易于人阅读和编写。</p>\n<p><code>C</code> 、 <code>Python</code> 、 <code>C++</code> 、 <code>Java</code> 、 <code>PHP</code> 、 <code>Go</code>  等编程语言都支持  <code>JSON</code></p>\n</blockquote>\n<p>例子：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"sites\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bing\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.bing.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"google\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.google.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"baidu\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.baidu.com\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h3>\n<p>在  <code>JSON</code>  中使用 <code>&#123;&#125;</code>  来定义一个对象。左括号 <code>&#123;</code> 开始，右括号 <code>&#125;</code>  结束。每个  <code>&quot;键&quot;</code>  后跟一个冒号  <code>:</code>  ，名称 / 值对使用逗号  <code>,</code>  分隔</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"嵌套对象\"><a class=\"markdownIt-Anchor\" href=\"#嵌套对象\">#</a> 嵌套对象</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"student\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"namelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"name1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token property\">\"name2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token property\">\"agelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"age1\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token property\">\"age2\"</span><span class=\"token operator\">:</span><span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>中括号  <code>[]</code>  保存的数组是值（ <code>value</code> ）的有序集合。一个数组以左中括号  <code>[</code>  开始， 右中括号  <code>]</code>  结束，值之间使用逗号  <code>,</code>  分隔。</p>\n<p>值（ <code>value</code> ）可以是双引号括起来的字符串（ <code>string</code> ）、数值 ( <code>number</code> )、 <code>true</code> 、 <code>false</code> 、  <code>null</code> 、对象（ <code>object</code> ）或者数组（ <code>array</code> ），它们是可以嵌套，值不能为键值对。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"嵌套数组\"><a class=\"markdownIt-Anchor\" href=\"#嵌套数组\">#</a> 嵌套数组</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"jsonparse\"><a class=\"markdownIt-Anchor\" href=\"#jsonparse\">#</a>  <code>JSON.parse()</code></h3>\n<p>此方法为  <code>JavaScript</code>  的内置函数，用于将  <code>JSON</code>  字符串解析为原生  <code>JavaScript</code>  对象或值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>text</code></p>\n<p>​\t要被解析成  <code>JavaScript</code>  值的字符串</p>\n<p><code>reviver</code>  (可选)</p>\n<p>​\t转换器，如果传入该参数 (函数)，可以用来修改解析生成的原始值，调用时机在  <code>parse</code>  函数返回之前</p>\n<p>返回值</p>\n<p>​\t与给定的  <code>JSON text</code>  相对应的  <code>Object</code> 、 <code>Array</code> 、 <code>string</code> 、 <code>number</code> 、 <code>boolean</code>  或者  <code>null</code>  值</p>\n<p>异常</p>\n<p>​\t若传入的字符串不符合 JSON 规范，则会抛出此异常</p>\n<p>使用  <code>reviver</code>  函数</p>\n<blockquote>\n<p>如果指定了  <code>reviver</code>  函数，则解析出的  <code>JavaScript</code>  值（解析值）会经过一次转换后才将被最终返回（返回值）。更具体点讲就是：解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用  <code>reviver</code>  函数，在调用过程中，当前属性所属的对象会作为  <code>this</code>  值，当前属性名和属性值会分别作为第一个和第二个参数传入  <code>reviver</code>  中。如果  <code>reviver</code>  返回  <code>undefined</code> ，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。</p>\n<p>当遍历到最顶层的值（解析值）时，传入  <code>reviver</code>  函数的参数会是空字符串  <code>&quot;&quot;</code> （因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的  <code>this</code>  值会是  <code>&#123;&quot;&quot;: 修改过的解析值&#125;</code> ，在编写  <code>reviver</code>  函数时，要注意到这个特例。（这个函数的遍历顺序依照：从最内层开始，按照层级顺序，依次向外遍历）</p>\n</blockquote>\n<p>更多请参阅:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9wYXJzZQ==\">JSON.parse() - JavaScript | MDN (mozilla.org)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc29uL2pzb24tdHV0b3JpYWwuaHRtbA==\">JSON 教程 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "JavaScript",
                "JSON"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/UnitTests/JUnit/",
            "url": "http://yunyat.cloud/MyCodingBook/UnitTests/JUnit/",
            "title": "JUnit",
            "date_published": "2024-03-11T01:02:57.000Z",
            "content_html": "<h3 id=\"junit-介绍\"><a class=\"markdownIt-Anchor\" href=\"#junit-介绍\">#</a> JUnit 介绍</h3>\n<p>在编写程序的过程中，我们常常需要对一个单独的模块进行测试，以判断其是否符合要求。</p>\n<h4 id=\"test-注解\"><a class=\"markdownIt-Anchor\" href=\"#test-注解\">#</a>  <code>@Test</code>  注解</h4>\n<p>一般来说，通过  <code>@Test</code>  注解过的方法就是测试方法，测试方法可以脱离  <code>man()</code>  方法独立运行。</p>\n<h4 id=\"参数化测试\"><a class=\"markdownIt-Anchor\" href=\"#参数化测试\">#</a> 参数化测试</h4>\n<p>为了确保单元测试的严谨性，通常会模拟不同的测试数据来测试方法的处理能力，为此我们需要编写大量的单元测试方法，可这些测试的方法大体框架都是差不多的，它们的结构都是相同的，不同的仅仅是数据和期望值，为此，我们可以使用参数化测试。</p>\n<h5 id=\"参数化测试条件\"><a class=\"markdownIt-Anchor\" href=\"#参数化测试条件\">#</a> 参数化测试条件</h5>\n<ol>\n<li>对需要测试的类添加  <code>@RunWith(Parameterized.class)</code>  注解</li>\n<li>用于存放测试数据及期望值的变量都要声明为私有变量</li>\n<li>将上一步的私有变量作为入参创建构造方法并为其赋值</li>\n<li>创建一个公共的静态方法，此方法的返回值为集合  <code>Collection</code>  ，并且此方法需要被  <code>@Parameters</code>  注解</li>\n<li>使用定义的私有变量编写测试方法</li>\n</ol>\n<p>Demo:</p>\n<p>测试方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fun<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">.</span>li</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token static\">assertEquals</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runners<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parameterized</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runners<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parameterized</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Parameters</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parameterized</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FuntionTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> usesrname <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FuntionTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usesrname <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 返回集合</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Parameters</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Collection</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"用户名或密码不能为空\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的用户名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的密码\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的用户名和密码\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 测试，通过断言判断测试是否成功</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFuntion_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> funtion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Funtion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> funtion<span class=\"token punctuation\">.</span><span class=\"token function\">funtion_data</span><span class=\"token punctuation\">(</span>usesrname<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>被测试的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fun<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">.</span>li</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Funtion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">funtion_data</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"用户名或密码不能为空\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的用户名\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的密码\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的用户名和密码\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果示例：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/03/10/pFy2pWD.png\" alt=\"pFy2pWD.png\"></p>\n<p>​\t还有一些其他的参数化测试方法请自行去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2p1bml0LXRlYW0vanVuaXQ0L3dpa2kvUGFyYW1ldGVyaXplZC10ZXN0cw==\">参数化测试・junit-team/junit4 维基 (github.com)</span> 查看</p>\n<h4 id=\"断言\"><a class=\"markdownIt-Anchor\" href=\"#断言\">#</a> 断言</h4>\n<p>断言 (assertion) 是一种在程序中的一阶逻辑 (如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果 —— 当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p>\n<p>常用 <code>API</code> ：</p>\n<ul>\n<li>\n<p><code>assertEquals()</code> ：检测两个值是否相等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertTrue()</code> ：检测条件是否为真</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertFalse(true)</code> ：检测条件是否为假</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNotNull()</code> ：检测不为空</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNull()</code> ：检测为空</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNotSame()</code> ：检测两个相关对象是否不指向同一个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNotSame</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertSame()</code> ：检测两个相关对象是否指向同一个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertSame</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertArrayEquals()</code> ：检测两个数组是否相等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertArrayEquals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"hamcrest\"><a class=\"markdownIt-Anchor\" href=\"#hamcrest\">#</a>  <code>Hamcrest</code></h5>\n<p><code>Hamcrest</code>  是一款用于校验的 Java 的单元测试框架，可以组合创建灵活的表达的匹配器进行断言。</p>\n<p><code>JUnit</code>  结合  <code>Hamcrest</code>  提供了一个全新的断言语法 ——  <code>assertThat</code> 。程序员可以只使用  <code>assertThat</code>  一个断言语句，结合  <code>Hamcrest</code>  提供的匹配符，就可以表达全部的测试思想。</p>\n<p>要使用  <code>Hamcrest</code>  断言，需要先使用  <code>assertThat</code>  来声明一个断言，然后再在内部进行具体匹配器的断言细节，期望值和实际值进行对比。</p>\n<h5 id=\"一般匹配符断言\"><a class=\"markdownIt-Anchor\" href=\"#一般匹配符断言\">#</a> 一般匹配符断言</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>allOf</code>  表示括号里的所有断言都要成立才测试通过，相当于  <code>&amp;&amp;</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 由于 eclipse 这个水货识别不了 allof ，所以我通过包名的方式引用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>AllOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>anyOf</code>  表示括号里的所有断言只要有一个成立测试就通过，相当于  <code>||</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>AnyOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>anything</code>  表示无论是什么条件，测试都为 <code>true</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>IsAnything</span><span class=\"token punctuation\">.</span><span class=\"token function\">anything</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>is</code>  表示如果前面给出的期望值等于后面给出的值，则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>Is</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>not</code>  与 is 正好相反，如果前面给出的期望值不等于后面给出的值，则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>IsNot</span><span class=\"token punctuation\">.</span><span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"字符串相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#字符串相关匹配符\">#</a> 字符串相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>containsString</code>  表示如果前面的期望值包含后面的子字符串则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>startsWith</code>  表示如果前面的期望值是以后面的子字符串开头则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>endsWith</code>  表示如果前面的期望值是以后面的子字符串结尾则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalTo</code>  表示如果前面的期望值跟后面的字符串相等则测试通过，相当于  <code>equals()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalToIgnoringCase</code>  表示如果后面的值在忽略大小写的情况下等于期望值则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalToIgnoringCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalToIgnoringWhiteSpace</code>  表示如果后面的值在忽略前后任意个空格的情况下等于期望值则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalToIgnoringWhiteSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   hello world    \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"数值相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#数值相关匹配符\">#</a> 数值相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>closeTo</code>  匹配符表明如果所<strong>测试的浮点型数在 1.0±0.03 范围之内</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.03</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">closeTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>greaterThan</code>  匹配符表明如果所<strong>测试的数值大于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">greaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>lessThan</code>  匹配符表明如果所<strong>测试的数值小于 2</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>greaterThanOrEqualTo</code>  匹配符表明如果所<strong>测试的数值大于等于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">greaterThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>lessThanOrEqualTo</code>  匹配符表明如果所<strong>测试的数值小于等于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"集合相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#集合相关匹配符\">#</a> 集合相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>hasEntry</code>  匹配符表明如果测试的<strong> Map 对象含有一个键值为 &quot;bar&quot; 对应元素值为 &quot;foo&quot; 的 Entry 项</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasEntry</span><span class=\"token punctuation\">(</span>“bar”<span class=\"token punctuation\">,</span> “foo”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasItem</code>  匹配符表明如果测试的<strong>迭代对象含有元素以 ba 开头项</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>“foo”<span class=\"token punctuation\">,</span> “bar”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>“ba”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasKey</code>  匹配符表明如果测试的 **Map 对象含有键值 “bar”** 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>“bar”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasValue</code>  匹配符表明如果测试的 **Map 对象含有元素值 “foo”** 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasValue</span><span class=\"token punctuation\">(</span>“foo”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java",
                "junit"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/UnitTests/Selenium-%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/MyCodingBook/UnitTests/Selenium-%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Selenium 的使用",
            "date_published": "2024-03-05T07:47:19.000Z",
            "content_html": "<h3 id=\"selenium-介绍\"><a class=\"markdownIt-Anchor\" href=\"#selenium-介绍\">#</a>  <code>Selenium</code>  介绍</h3>\n<p><code>selenium</code>  是一个广泛使用的模拟浏览器运行的库，它是一个用于  <code>Web</code>  应用程序测试的工具。 <code>Selenium</code>  测试直接运行在浏览器中，就像真正的用户在操作一样，并且支持大多数现代  <code>Web</code>  浏览器。</p>\n<h3 id=\"selenium-自动化测试的八种定位方法\"><a class=\"markdownIt-Anchor\" href=\"#selenium-自动化测试的八种定位方法\">#</a>  <code>Selenium</code>  自动化测试的八种定位方法</h3>\n<h4 id=\"使用场景\"><a class=\"markdownIt-Anchor\" href=\"#使用场景\">#</a> 使用场景：</h4>\n<p>① 优先用 <code>id</code> 、 <code>name</code> （保证唯一性）</p>\n<p>② 是否是超链接，是超链接用 <code>link_text</code> 、 <code>partial_link_text</code> ，否则用 <code>css_selector</code> 、 <code>xpath</code></p>\n<p>③  <code>class_name</code> 、 <code>tag_name</code>  很少用，因为这俩个难以保证被定为元素或属性的唯一性</p>\n<h4 id=\"id-定位\"><a class=\"markdownIt-Anchor\" href=\"#id-定位\">#</a>  <code>ID</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.ID,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"name-定位\"><a class=\"markdownIt-Anchor\" href=\"#name-定位\">#</a>  <code>Name</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"class-定位\"><a class=\"markdownIt-Anchor\" href=\"#class-定位\">#</a>  <code>Class</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.CLASS_NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"tag_name-定位\"><a class=\"markdownIt-Anchor\" href=\"#tag_name-定位\">#</a>  <code>Tag_Name</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.TAG_NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>TAG_NAME<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"link_text-定位\"><a class=\"markdownIt-Anchor\" href=\"#link_text-定位\">#</a>  <code>Link_Text</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.LINK_TEXT,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>LINK_TEXT<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"登\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"partial_link-定位\"><a class=\"markdownIt-Anchor\" href=\"#partial_link-定位\">#</a>  <code>Partial_Link</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.PARTIAL_LINK,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>PARTIAL_LINK<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"xpath-定位\"><a class=\"markdownIt-Anchor\" href=\"#xpath-定位\">#</a>  <code>Xpath</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.XPATH,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 XPATH 定位带有 id='login' 属性和 name='user' 属性的 input 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"//input[@id='login' and @name='user']\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"css_selector-定位\"><a class=\"markdownIt-Anchor\" href=\"#css_selector-定位\">#</a>  <code>Css_selector</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.CSS_SELECTOR,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>CSS_SELECTOR<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"input#login\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "python",
                "selenium"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/",
            "url": "http://yunyat.cloud/miscellaneous/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/",
            "title": "2023年度总结",
            "date_published": "2024-02-09T12:56:01.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>先在这里提前祝大家新年快乐！新的一年要开开心心，顺顺利利的。🧨爆竹🎇烟花💥爆炸✨闪亮</p>\n<hr>\n<p>​\t在 2023 年中，我拥有了人生中第一台云服务器，虽然是和朋友一起合租的，但是还是很开心，还搭建了人生中第一个个人博客，同时，还学会了很多东西，虽然是些皮毛，但是依然令人高兴，而这些都是值得铭记的。有开心的同时一样有伤心，这才是世间的规则，在这一年，继我奶奶走了之后，我爷爷也在十一月份离我们而去了，老天爷总是不公的，连留给我见最后一面的时间都不舍得给。</p>\n<p>​\t在过去的一年中，经历了许许多多的事情，有开心，也有过不愉快，但是，这些都不重要了，因为已经过去了，人是要活在未来的，向前看才行。</p>\n<p>​\t希望新的一年越来越好，能完成自己想做的事情。</p>\n<p>​\t2024 年的新年愿望是能有一台属于自己的服务器，能遇见一个喜欢的人。如此，安好。</p>\n<p>​\t最后附上一张烟花</p>\n<p><img data-src=\"https://figurebed.yunyat.cloud/imgs/20240520143957.png\" alt=\"yh\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "2023",
                "年度总结",
                "记录"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-3/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-3/",
            "title": "shell脚本笔记-3",
            "date_published": "2023-12-16T13:32:47.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-1/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-1/",
            "title": "shell脚本笔记-1",
            "date_published": "2023-12-15T07:06:21.000Z",
            "content_html": "<h3 id=\"shell命令解释器\"><a class=\"markdownIt-Anchor\" href=\"#shell命令解释器\">#</a> Shell 命令解释器</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/shells</pre></td></tr></table></figure><p>shell 的命令解释器用于执行 shell 命令或 shell 脚本文件，Centos 下有四种解释器，一般用默认的 /bin/bash 即可</p>\n<h3 id=\"执行shell脚本\"><a class=\"markdownIt-Anchor\" href=\"#执行shell脚本\">#</a> 执行 Shell 脚本</h3>\n<p>要执行 shell 脚本有两种方法：</p>\n<ol>\n<li>将要执行的  <code>.sh</code>  脚本通过  <code>chmod</code>  给予可执行权限，然后执行</li>\n<li>不赋予可执行权限，通过  <code>bash xxx.sh</code>  或  <code>sh xxx.sh</code>  来执行</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x ./hello.sh    <span class=\"token comment\"># 方法一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./hello.sh    <span class=\"token comment\"># 方法二</span></pre></td></tr></table></figure><p>使用  <code>.sh</code>  为后缀只是为了方便区分，对实际运行脚本没有任何影响</p>\n<h4 id=\"shell变量\"><a class=\"markdownIt-Anchor\" href=\"#shell变量\">#</a> Shell 变量</h4>\n<p>shell 脚本定义变量除了等号两边不能加空格，其他和别的编程语言大差不差（值得一提的是，变量名不支持中文命名，其他大部分编程语言是支持的）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr></table></figure><h4 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h4>\n<p>在运行 shell 时，会同时存在三种变量类型：</p>\n<ol>\n<li>局部变量：局部变量在脚本或命令中被定义，只能由当前对象使用，无法被其他 shell 启动的对象访问</li>\n<li>环境变量：环境变量是所有的脚本或程序都能访问的，某些程序或脚本需要环境变量来维持运行，必要时也可以由 shell 脚本自己定义环境变量</li>\n<li>shell 变量：shell 变量是由 shell 程序设置的特殊变量，shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行</li>\n</ol>\n<h4 id=\"使用变量\"><a class=\"markdownIt-Anchor\" href=\"#使用变量\">#</a> 使用变量</h4>\n<p>要使用定义过的变量，只需在变量名前加美元符号，最好在变量名外加花括号以区分边界</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6gZdO.png\" alt=\"shell1\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6gVeK.png\" alt=\"shell2\"></p>\n<h4 id=\"只读变量\"><a class=\"markdownIt-Anchor\" href=\"#只读变量\">#</a> 只读变量</h4>\n<p>使用 readonly 可以将变量定义为只读变量，只读变量不能被改变</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> name</pre></td></tr></table></figure><h4 id=\"删除变量\"><a class=\"markdownIt-Anchor\" href=\"#删除变量\">#</a> 删除变量</h4>\n<p>使用 unset 删除变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> name</pre></td></tr></table></figure><h3 id=\"shell-传递参数\"><a class=\"markdownIt-Anchor\" href=\"#shell-传递参数\">#</a> Shell 传递参数</h3>\n<p>有一些特殊变量在 shell 脚本中有特殊含义，如：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数处理</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>$#</code></td>\n<td style=\"text-align:center\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$*</code></td>\n<td style=\"text-align:center\">以一个单字符串的形式输出所有向脚本输入的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$$</code></td>\n<td style=\"text-align:center\">脚本运行的当前进程  <code>ID</code>  号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$!</code></td>\n<td style=\"text-align:center\">后台运行的最后一个进程的 <code>ID</code>  号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$@</code></td>\n<td style=\"text-align:center\">与 <code>$&#123;*&#125;</code>  效果相同，但是加引号时会返回以引号括起来的每个参数，与 <code>$&#123;*&#125;</code>  的区别是 <code>$&#123;*&#125;</code>  将所有参数当一个字符串处理，而 <code>$&#123;@&#125;</code>  则是分别处理每个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$-</code></td>\n<td style=\"text-align:center\">显示 Shell 使用的当前选项，与  <code>set</code>  命令功能相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$?</code></td>\n<td style=\"text-align:center\">显示最后命令的退出状态。 <code>0</code>  表示没有错误，其他任何值都表明有错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$0</code></td>\n<td style=\"text-align:center\">表示脚本的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$1</code></td>\n<td style=\"text-align:center\">表示脚本的参数，可以有多个，用 <code>$&#123;1&#125;</code>  、 <code>$&#123;2&#125;</code>  … 表示</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"有<span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>&#125;</span>个参数\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"参数:<span class=\"token variable\">$&#123;*&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"进程ID:<span class=\"token variable\">$&#123;$&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"最后一个进程ID:<span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Shell选项:<span class=\"token variable\">$&#123;-&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"脚本name:<span class=\"token variable\">$&#123;0&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> + <span class=\"token variable\">$&#123;2&#125;</span> = \"</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;?&#125;</span></pre></td></tr></table></figure><p>输入：</p>\n<blockquote>\n<p>bash ./test.sh 10 20</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>有 2 个参数<br>\n参数：10 20<br>\n 进程 ID:71819<br>\n 最后一个进程 ID:<br>\nShell 选项:hB<br>\n 脚本 name:./test.sh<br>\n10 + 20 = 30<br>\n0</p>\n</blockquote>\n<h3 id=\"shell字符串\"><a class=\"markdownIt-Anchor\" href=\"#shell字符串\">#</a> Shell 字符串</h3>\n<p>shell 的字符串可以加双引号、单引号，也可以不加引号</p>\n<h4 id=\"单引号\"><a class=\"markdownIt-Anchor\" href=\"#单引号\">#</a> 单引号</h4>\n<ul>\n<li>\n<p>加单引号的字符串中的变量是无效的，可以使用单引号将变量引用起来达到拼接字符串的目的</p>\n</li>\n<li>\n<p>单引号字符串中不能出现单独的单引号，转义后也不行，只能成对出现</p>\n</li>\n</ul>\n<h4 id=\"双引号\"><a class=\"markdownIt-Anchor\" href=\"#双引号\">#</a> 双引号</h4>\n<ul>\n<li>双引号中可以有变量</li>\n<li>双引号中可以出现转义字符</li>\n</ul>\n<h4 id=\"拼接字符串\"><a class=\"markdownIt-Anchor\" href=\"#拼接字符串\">#</a> 拼接字符串</h4>\n<p>使用双引号拼接字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"QSky\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello! <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Hello<span class=\"token operator\">!</span> QSky</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6RMrt.png\" alt=\"shell3\"></p>\n<p>输出结果：</p>\n<blockquote>\n<p>string hello world</p>\n<p name=\"\">string $</p>\n<p>string hello world</p>\n<p>“string” hello world</p>\n</blockquote>\n<h4 id=\"获取字符串的长度\"><a class=\"markdownIt-Anchor\" href=\"#获取字符串的长度\">#</a> 获取字符串的长度</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>str&#125;</span>    <span class=\"token comment\"># $&#123;#str&#125; 等价于 $&#123;#str [0]&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>11</p>\n</blockquote>\n<h4 id=\"提取子字符串\"><a class=\"markdownIt-Anchor\" href=\"#提取子字符串\">#</a> 提取子字符串</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 语法：字符串变量名：要提取的子串的开始位置：要提取的子串的结束位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str<span class=\"token operator\">:</span>6<span class=\"token operator\">:</span>8&#125;</span>    <span class=\"token comment\"># 第一个字符 'h' 索引为 0</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>world</p>\n</blockquote>\n<h4 id=\"查找字符串\"><a class=\"markdownIt-Anchor\" href=\"#查找字符串\">#</a> 查找字符串</h4>\n<p>查找字符  <code>i</code>  或  <code>o</code>  的位置，哪个先出现就计算哪个</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$str</span>\"</span> or<span class=\"token variable\">`</span></span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>5</p>\n</blockquote>\n<h3 id=\"shell数组\"><a class=\"markdownIt-Anchor\" href=\"#shell数组\">#</a> Shell 数组</h3>\n<p>和大多数编程语言一样，shell 脚本也有数组，但与其他编程语言不同的是，shell 不支持多维数组，不过 shell 的数组并没有长度限制，并且可以使用不连续的下标，下标范围也没有限制</p>\n<h4 id=\"定义-shell-数组\"><a class=\"markdownIt-Anchor\" href=\"#定义-shell-数组\">#</a> 定义 shell 数组</h4>\n<p>数组用小括号来表示，用空格区分值</p>\n<p>格式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value0 value1 value2 value3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>value0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>value1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>value2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>value3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>示例：</p>\n<pre><code>array_name=(\n\n)\n</code></pre>\n<p>也能单独定义数组的单个元素</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value5</pre></td></tr></table></figure><h4 id=\"读取数组\"><a class=\"markdownIt-Anchor\" href=\"#读取数组\">#</a> 读取数组</h4>\n<p>和其他编程语言一样，shell 同样是通过数组名加下标来读取元素</p>\n<pre><code>$&#123;数组名[下标]&#125;\n</code></pre>\n<p>可以使用  <code>@</code>  或  <code>*</code>  读取数组的全部元素：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'string '</span><span class=\"token variable\">$&#123;name&#125;</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'string $&#123;name&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"string <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\"<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>string<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\"># 和 echo $&#123;str [*]&#125; 效果相同</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<h6 id=\"为了便于阅读我给输出结果分段处理了\"><a class=\"markdownIt-Anchor\" href=\"#为了便于阅读我给输出结果分段处理了\">#</a> 为了便于阅读，我给输出结果分段处理了</h6>\n<p>string hello world</p>\n<p name=\"\">string $</p>\n<p>string hello world</p>\n<p>“string” hello world</p>\n</blockquote>\n<h4 id=\"获取数组的长度\"><a class=\"markdownIt-Anchor\" href=\"#获取数组的长度\">#</a> 获取数组的长度</h4>\n<p>获取数组长度的方法与获取字符串长度的方法相似</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>value0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>value1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>value2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>value3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">length_1</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">length_2</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 获取单个数组元素的长度</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token assign-left variable\">length_3</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;length_1&#125;</span> <span class=\"token variable\">$&#123;length_2&#125;</span> <span class=\"token variable\">$&#123;length_3&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>4 4 6</p>\n<p>注：6 为第二个下标所表示的元素的长度</p>\n</blockquote>\n<h4 id=\"关联数组\"><a class=\"markdownIt-Anchor\" href=\"#关联数组\">#</a> 关联数组</h4>\n<p>bash 脚本支持关联数组，可以使用任意的字符串或者整数来作为下标来访问数组。</p>\n<p>关联数组的键是唯一的，有点类似于其他编程语言的键值对。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> array-name<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_1\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_2\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_2\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_3\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_3\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_4\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_4\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_n\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_n\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<p>使用  <code>declare</code>  命令来声明， <code>-A</code>  选项就是用于声明一个关联数组。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> <span class=\"token assign-left variable\">site</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"QSky\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"zero-li.fun\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;site<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>zero-li.fun QSky</p>\n</blockquote>\n<p>同样可以先声明再赋值：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> site</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>site<span class=\"token punctuation\">[</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"zero-li.fun\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;site<span class=\"token punctuation\">[</span>\"zero\"<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>zero-li.fun</p>\n</blockquote>\n<h3 id=\"shell-注释\"><a class=\"markdownIt-Anchor\" href=\"#shell-注释\">#</a> Shell 注释</h3>\n<p>在 shell 脚本中，以  <code>#</code>  开头的就是注释。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这是一句注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> 注释的内容并不会被执行</pre></td></tr></table></figure><h4 id=\"多行注释\"><a class=\"markdownIt-Anchor\" href=\"#多行注释\">#</a> 多行注释</h4>\n<p>可以使用  <code>:</code>  命令，并用单引号  <code>'</code>  将多行内容括起来。</p>\n<p>语法： <code>:</code>  +  <code> </code>  (空格) +  <code>'</code>  (单引号)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是多段注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可以有多行内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>'</span></pre></td></tr></table></figure><p>shell 常用命令及关键字：</p>\n<p><code>readonly</code> ：将变量定义为只读，无法更改其值</p>\n<p><code>unset</code> ：删除变量，无法删除只读变量</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "shell"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/windows/windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/",
            "url": "http://yunyat.cloud/miscellaneous/windows/windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/",
            "title": "windows重装系统重制版",
            "date_published": "2023-11-29T06:37:53.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p><strong>重要</strong>：在阅读本文章前请确保你已拥有以下技能：</p>\n<ul>\n<li>学会正常使用搜索引擎</li>\n<li>拥有基本的动手能力</li>\n<li>拥有义务教育阶段要求的知识水平</li>\n</ul>\n<p>如果没有以上技能，请立即停止阅读本文章并关闭浏览器。</p>\n<p>如果你有以上技能，并在完整阅读本文章内容后出现疑问，请先阅读提问的智慧再向我提问，否则别问我问题，我只会忽略你。</p>\n<blockquote>\n<p>提问的智慧：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2suaWNvZGVxLmNvbS8=\">提问的智慧 (中文版)</span></p>\n</blockquote>\n<hr>\n<h3 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\">#</a> 正文</h3>\n<h4 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h4>\n<p>重装系统有很多方法，本次使用的是使用 Wepe 工具箱将 U 盘 做成 pe 启动盘来重装系统。</p>\n<h5 id=\"微pe下载\"><a class=\"markdownIt-Anchor\" href=\"#微pe下载\">#</a> 微 pe 下载</h5>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2VwZS5jb20uY24=\">官网</span></p>\n</blockquote>\n<p>直接去它官网下载，具体怎么把 U 盘做成系统启动盘请自行百度，网上一搜一大把教程。</p>\n<h4 id=\"重装\"><a class=\"markdownIt-Anchor\" href=\"#重装\">#</a> 重装</h4>\n<ol>\n<li>\n<p>先去下载你要重装系统的镜像，在哪下载请自行浏览器搜索。</p>\n</li>\n<li>\n<p>将 U 盘插入已经下载了镜像的电脑，并将镜像移入 U 盘中的 F 盘。</p>\n</li>\n</ol>\n<p>注意：下图的 EFI 盘是系统盘，请不要将任何文件放入其中，如果你没有，请忽略。</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDrqe0.jpg\" alt=\"0\"></p>\n<ol start=\"3\">\n<li>将 U 盘插入要重装系统的电脑，然后重启电脑，并在重启过程中不断的按 F2 键以进入系统 BIOS，不同的电脑进入的方法或快捷键不一样，请自行浏览器搜索你自己电脑进入的方法，本文所使用的电脑为华硕天选 2。</li>\n<li>进入 BIOS 后，在下图右边所示位置应该有两个盘，将下面的 UEFI 盘移动到 Windows Boot 盘的上面，有可能你的盘名字和我的不一样，但是名字应该都是差不多的。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDDX2d.jpg\" alt=\"1\"></p>\n<ol start=\"5\">\n<li>重启电脑进入 wepe 桌面，点击桌面上的分区工具。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDDHUO.jpg\" alt=\"2\"></p>\n<ol start=\"6\">\n<li>然后选择你要分盘的硬盘，之后选上面的快速分区。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDDb5D.jpg\" alt=\"3\"></p>\n<ol start=\"7\">\n<li>将你的分区表类型改为 GPI (GUID)，一般是默认的。</li>\n<li>分区数目就是你要分几个磁盘就选几个分区，一般两个磁盘就够了，在右边可以设置每个分区 (磁盘) 的大小，第一个硬盘一般都是 C 盘，建议将大小设置为 120 G 。</li>\n<li>然后将创建新 ESP 分区勾选上，勾选不了的就将上面的保留现有的 ESP 分区取消勾选。</li>\n<li>对齐分区到此扇区数的整数倍选择 4096 扇区。</li>\n<li>最后点击确定。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDDLPe.jpg\" alt=\"4\"></p>\n<ol start=\"12\">\n<li>回到桌面，点击 Windows 安装器。</li>\n<li>进入之后先选择你在 U 盘里的镜像，然后选择你要安装系统的位置，一般安装到 C 盘。</li>\n<li>最后点击安装。</li>\n<li>在一切完毕之后重启电脑就 ok 了。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/29/piDDO8H.jpg\" alt=\"5\"></p>\n<h3 id=\"免责声明\"><a class=\"markdownIt-Anchor\" href=\"#免责声明\">#</a> 免责声明</h3>\n<p>本文的内容仅供读者参考，不构成任何投资、法律或其他方面的建议。本文的信息和数据来自公开渠道，作者不保证其准确性和完整性。读者在阅读本文后，应自行判断其适用性和可靠性，并自行承担由此可能产生的所有风险和责任。作者对读者因阅读本文而造成的任何直接或间接的损失或损害概不负责。</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "电脑技术"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/windows/%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%ACwin%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9E%E6%8E%A5/",
            "url": "http://yunyat.cloud/miscellaneous/windows/%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%ACwin%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9E%E6%8E%A5/",
            "title": "任意版本win远程桌面使用内网穿透连接",
            "date_published": "2023-11-28T14:56:44.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p><b>重要</b>：请不要问我为什么不能访问 GitHub 网站这种问题</p>\n<p>win 系统并不能使用 ssh 来连接，但是可以使用 win 自带的远程桌面来连接。</p>\n<p>但是，这时候就出现了一个问题，只有专业版的 win 系统能被远程连接，家庭版的并不行，但是不要方，GitHub 有大佬开源了 win 远程桌面的补丁，使得家庭版的 win 系统也能被远程连接。</p>\n<hr>\n<h3 id=\"下载补丁\"><a class=\"markdownIt-Anchor\" href=\"#下载补丁\">#</a> 下载补丁</h3>\n<p>补丁存储库：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0YXNjb3JwL3JkcHdyYXAvcmVsZWFzZXM=\">Releases · stascorp/rdpwrap (github.com)</span></p>\n<p>直接下载 zip 压缩包即可</p>\n</blockquote>\n<h3 id=\"运行\"><a class=\"markdownIt-Anchor\" href=\"#运行\">#</a> 运行</h3>\n<ol>\n<li>解压下载的补丁压缩包</li>\n<li>以管理员权限运行  <code>install.bat</code> ，不会运行的右键，然后点击 “以管理员身份运行” 。</li>\n<li>此时打开补丁文件夹里的  <code>RDPConf.exe</code> ，不出意外的话会显示如下图所示的红色字体。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/28/piDMKUK.jpg\" alt=\"2\"></p>\n<ol start=\"4\">\n<li>按键盘的  <code>win + x</code>  组合键，然后选择计算机管理或按  <code>G</code>  键，依次点击  <code>服务和应用程序 -&gt; 服务</code> ，然后在里面找到  <code>Remote Desktop Services</code> （如下图所示），先点击 “停止” 。</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/28/piDMM4O.jpg\" alt=\"1\"></p>\n<ol start=\"5\">\n<li>为了方便，我写了一个自动部署的脚本，运行  <code>run.bat</code>  即可，在弹出的 UAC 窗口点击是。</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d2R0LmxhbnpvdXQuY29tL2lWcWJyMWc5M2I4ag==\">点击下载脚本</span></p>\n</blockquote>\n<ol start=\"6\">\n<li>\n<p>运行完脚本按照步骤 4 重新启动一下服务。</p>\n</li>\n<li>\n<p>重启完服务然后打开  <code>RDPConf.exe</code> ，如果全部变绿了就已经弄好了。</p>\n</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/28/piDMuE6.jpg\" alt=\"3\"></p>\n<h3 id=\"frp-内网穿透\"><a class=\"markdownIt-Anchor\" href=\"#frp-内网穿透\">#</a> frp 内网穿透</h3>\n<p>frp 内穿我之前写过教程，这里只需要在需要内穿的客户端配置就行。</p>\n<ol>\n<li>先下载 win 系统的 frp 压缩包。</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycC9yZWxlYXNlcw==\">下载地址</span></p>\n</blockquote>\n<p>注意，不要下错了，下载 windows_amd64 的，arm64 是给手机处理器用的。</p>\n<ol start=\"2\">\n<li>下载完之后，解压打开 frpc.toml 配置文件。</li>\n</ol>\n<p>照着我的配置文件写就行。</p>\n<figure class=\"highlight toml\"><figcaption data-lang=\"TOML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 填你公网服务器的 ip 地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key property\">serverAddr</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"127.0.0.1\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 填你公网服务器上的 frps 配置文件里写的端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key property\">serverPort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">7000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 设置了 token 的可以填一下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># token</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">proxies</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 你要内穿的服务名，随便填，你自己认识就行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"desktop\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 你要穿透的服务使用的协议，一般默认就行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"tcp\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 你要穿透的服务所在的机器的 ip ，默认就行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key property\">localIP</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"127.0.0.1\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 你要穿透的服务所使用的端口号</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key property\">localPort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">3389</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 你服务器监听的端口号，</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key property\">remotePort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">6000</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>弄好之后在当前目录右键，在终端中打开，输入以下命令。</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>frpc <span class=\"token operator\">-</span>c <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>frpc<span class=\"token punctuation\">.</span>toml</pre></td></tr></table></figure></li>\n<li>\n<p>显示下面的代码就是启动好了</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2023/11/28 22:51:54 <span class=\"token namespace\">[I]</span> <span class=\"token namespace\">[root.go:139]</span> <span class=\"token function\">start</span> frpc service <span class=\"token keyword\">for</span> config file <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>\\frpc<span class=\"token punctuation\">.</span>toml<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>2023/11/28 22:51:56 <span class=\"token namespace\">[I]</span> <span class=\"token namespace\">[service.go:299]</span> <span class=\"token namespace\">[c18837c64f3317f9]</span> login to server success<span class=\"token punctuation\">,</span> get run id <span class=\"token namespace\">[c18837c64f3317f9]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2023/11/28 22:51:56 <span class=\"token namespace\">[I]</span> <span class=\"token namespace\">[proxy_manager.go:156]</span> <span class=\"token namespace\">[c18837c64f3317f9]</span> proxy added: <span class=\"token namespace\">[desktop]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2023/11/28 22:51:56 <span class=\"token namespace\">[I]</span> <span class=\"token namespace\">[control.go:173]</span> <span class=\"token namespace\">[c18837c64f3317f9]</span> <span class=\"token namespace\">[desktop]</span> <span class=\"token function\">start</span> proxy success</pre></td></tr></table></figure><ol start=\"5\">\n<li>之后让别人直接通过你服务器 ip+ 监听的端口来远程连接你电脑就行。</li>\n</ol>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "frp"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-2/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-2/",
            "title": "shell脚本笔记 - 2",
            "date_published": "2023-11-27T08:59:13.000Z",
            "content_html": "<h3 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> Shell</h3>\n<p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现。</p>\n<h4 id=\"expr\"><a class=\"markdownIt-Anchor\" href=\"#expr\">#</a>  <code>expr</code></h4>\n<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作，一般用于整数值，也可用于字符串。</p>\n<p>使用 expr 时，一定要将 expr 表达式用<b>反引号</b>括起来或使用 <code>$()</code>  将其括起来。</p>\n<p>语法：</p>\n<blockquote>\n<p><code>$(expr 表达式)</code></p>\n</blockquote>\n<h4 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\">#</a> 字符串操作</h4>\n<ol>\n<li>计算字符串的长度\n<ul>\n<li><code>length</code></li>\n<li>语法： <code>expr length string_name</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> length <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输出说明：</p>\n<blockquote>\n<p>11</p>\n</blockquote>\n<ol start=\"2\">\n<li>截取字符串子串\n<ul>\n<li><code>substr</code></li>\n<li>语法： <code>expr substr string_name start_num end_num</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> substr <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span> <span class=\"token number\">1</span> <span class=\"token number\">5</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输出说明：</p>\n<blockquote>\n<p>hello</p>\n</blockquote>\n<ol start=\"3\">\n<li>截取第一个字符串出现的位置\n<ul>\n<li><code>index</code></li>\n<li>语法： <code>expr index string_name substrings_name</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span> e<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">加法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-</code></td>\n<td style=\"text-align:center\">减法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">乘法运算符，在使用  <code>*</code>  运算符时，需要使用反斜杠 ( <code>\\</code> ) 进行转义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>/</code></td>\n<td style=\"text-align:center\">除法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>%</code></td>\n<td style=\"text-align:center\">求余运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td style=\"text-align:center\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>==</code></td>\n<td style=\"text-align:center\">相等运算符，用于比较两个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td style=\"text-align:center\">不相等运算符，用于比较两个数字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"算数运算符\"><a class=\"markdownIt-Anchor\" href=\"#算数运算符\">#</a> 算数运算符</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 减法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span>  <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> - <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 加法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> + <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 乘法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> * <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 除法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> / <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输入：</p>\n<blockquote>\n<p>bash ./demo.sh 20 10</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>20 - 10 = 10</p>\n<p>20 + 10 = 30</p>\n<p>20 * 10 = 200</p>\n<p>20 / 10 = 2</p>\n</blockquote>\n<h5 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\">#</a> 条件运算符</h5>\n<p>以下运算符中，括号内的和括号外的作用相同</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>==(-eq)</code></td>\n<td style=\"text-align:center\">检测两个数是否相等，相等返回  <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=(-ne)</code></td>\n<td style=\"text-align:center\">检测两个数是否不相等，不相等返回 <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;(-gt)</code></td>\n<td style=\"text-align:center\">检测左边的数是否大于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;(-lt)</code></td>\n<td style=\"text-align:center\">检测左边的数是否小于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=(-ge)</code></td>\n<td style=\"text-align:center\">检测左边的数是否大于等于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;=(-le)</code></td>\n<td style=\"text-align:center\">检测左边的数是否小于等于右边的数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"等于:\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 不等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"不等于:\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 不等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于:\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"小于:\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于等于:\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $&#123;<span class=\"token number\">1</span>&#125; <span class=\"token operator\">>=</span> $&#123;<span class=\"token number\">2</span>&#125; <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"小于等于:\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $&#123;<span class=\"token number\">1</span>&#125; <span class=\"token operator\">&lt;=</span> $&#123;<span class=\"token number\">2</span>&#125; <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>等于:<br>\n10 不等于 15</p>\n<p>不等于:<br>\n10 不等于 15</p>\n<p>大于:<br>\n10 小于 15</p>\n<p>小于:<br>\n10 小于 15</p>\n<p>大于等于:<br>\n10 小于等于 15</p>\n<p>小于等于:<br>\n10 小于等于 15</p>\n</blockquote>\n<h5 id=\"布尔运算符\"><a class=\"markdownIt-Anchor\" href=\"#布尔运算符\">#</a> 布尔运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>!</code></td>\n<td style=\"text-align:center\">非运算，对表达式结果取反</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|| <code>(-o)</code></td>\n<td style=\"text-align:center\">或运算，表达式结果有一个为  <code>true</code> ，那么整体结果都为  <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;(-a)</code></td>\n<td style=\"text-align:center\">与运算，表达式结果都为  <code>true</code>  才返回  <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p>注意：在  <code>[[]]</code>  中不能使用  <code>-o</code>  和  <code>-a</code>  运算符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输入：./demo.sh 10 15</p>\n<p>输出结果:</p>\n<blockquote>\n<p>true</p>\n<p>false</p>\n<p>true</p>\n</blockquote>\n<h5 id=\"字符串运算符\"><a class=\"markdownIt-Anchor\" href=\"#字符串运算符\">#</a> 字符串运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td style=\"text-align:center\">检测两个字符串是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td style=\"text-align:center\">检测两个字符串是否不相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-z</code></td>\n<td style=\"text-align:center\">检测字符串的长度是否为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-n</code></td>\n<td style=\"text-align:center\">检测字符串的长度是否不为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td style=\"text-align:center\">检测字符串是否不为空</td>\n</tr>\n</tbody>\n</table>\n<p>注意：在使用 <code>-n</code>  运算符时，应该给要判断的字符串加上  <code>&quot;&quot;</code>  号，否则检测的结果永远是  <code>true</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输入：./demo.sh hello world</p>\n<p>输出结果：</p>\n<blockquote>\n<p>false</p>\n<p>true</p>\n<p>false</p>\n<p>true</p>\n<p>true</p>\n</blockquote>\n<h5 id=\"文件测试运算符\"><a class=\"markdownIt-Anchor\" href=\"#文件测试运算符\">#</a> 文件测试运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-b file</code></td>\n<td style=\"text-align:center\">检测文件是否是块设备文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-c file</code></td>\n<td style=\"text-align:center\">检测文件是否是字符设备文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-d file</code></td>\n<td style=\"text-align:center\">检测文件是否是目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-f file</code></td>\n<td style=\"text-align:center\">检测文件是否是普通文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-g file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了  <code>SGID</code>  位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-k file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了粘着位 <code>(Sticky Bit)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-p file</code></td>\n<td style=\"text-align:center\">检测文件是否是有名管道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-u file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了  <code>SUID</code>  位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-r file</code></td>\n<td style=\"text-align:center\">检测文件是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-w file</code></td>\n<td style=\"text-align:center\">检测文件是否可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-x file</code></td>\n<td style=\"text-align:center\">检测文件是否可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-s file</code></td>\n<td style=\"text-align:center\">检测文件是否为空（文件大小是否大于 <code>0</code> ）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-e file</code></td>\n<td style=\"text-align:center\">检测文件（包括目录）是否存在</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "shell"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/javascript/JavaScript%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/MyCodingBook/javascript/JavaScript%E7%AC%94%E8%AE%B0/",
            "title": "JavaScript笔记 - 1",
            "date_published": "2023-11-22T06:22:20.000Z",
            "content_html": "<h3 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h3>\n<blockquote>\n<p>因本人主学 <code>Java</code> , 所以下文包括以后的笔记绝大部分都是与 Java 做对比</p>\n</blockquote>\n<hr>\n<h3 id=\"概览\"><a class=\"markdownIt-Anchor\" href=\"#概览\">#</a> 概览</h3>\n<p>JavaScript 的类型有</p>\n<ul>\n<li><code>Number</code>  (数字)</li>\n<li><code>String</code>  (字符串)</li>\n<li><code>Boolean</code>  (布尔值)</li>\n<li><code>Symbol</code>  (符号)</li>\n<li><code>Object</code>  (对象)\n<ul>\n<li><code>Function</code>  (函数)</li>\n<li><code>Array</code>  (数组)</li>\n<li><code>Date</code>  (日期)</li>\n<li><code>RegExp</code>  (正则表达式)</li>\n</ul>\n</li>\n<li><code>null</code>  (空)</li>\n<li><code>undefined</code>  (未定义)</li>\n</ul>\n<p>注：在  <code>JavaScript</code>  中，所有的类型都是对象</p>\n<h4 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h4>\n<h5 id=\"变量-常量\"><a class=\"markdownIt-Anchor\" href=\"#变量-常量\">#</a> 变量 &amp; 常量</h5>\n<p>在 2015 年之前，使用  <code>var</code>  定义变量，但在 2015 年之后，ES 6 新增了两个关键字 ： <code>lei</code>  、 <code>const</code></p>\n<p><code>var</code>  声明的变量在全局都能使用，但是注意，如果在代码块外声明了变量，然后在代码块中声明了同名的变量，在代码块外的变量就会被重新定义</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 此处输出 x 为 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 此处输出 x 为 2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 此处输出 x 为 2</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>2</p>\n</blockquote>\n<p><code>let</code>  声明的变量只在  <code>let</code>  命令所在的代码块有效，即  <code>let</code>  所在的花括号内</p>\n<p><code>const</code>  声明的对象为基本类型（数字，字符串，布尔值等），那么它就是常量，即不可更改的。但是也是相对的，如果它的值为一个复合类型，那么它的值就是可变的，可以修改它的属性或元素</p>\n<blockquote>\n<p><code>let</code>  和  <code>const</code>  都是块级作用域，即只在声明所在的代码块中有效</p>\n</blockquote>\n<h5 id=\"数字\"><a class=\"markdownIt-Anchor\" href=\"#数字\">#</a> 数字</h5>\n<p>与 Java 不一样，JavaScript 没有整数 ( <code>int</code> ) 亦或者整型 ( <code>Integer</code> )，除了  <code>BigInt</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>1.5</p>\n<p>1</p>\n</blockquote>\n<p>JavaScript 提供了两个内置函数用于将字符串转换为整型和将浮点数转换为整型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>parseInt(String str , Number radix)</code></td>\n<td style=\"text-align:center\">接收两个参数， <code>str</code>  为要转换的字符串， <code>radix</code>  为目标整数的基进制，返回转换后的指定进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>parseFloat(String str)</code></td>\n<td style=\"text-align:center\">接收一个参数， <code>str</code>  为要转换的字符串，返回转换后的十进制数</td>\n</tr>\n</tbody>\n</table>\n<p>要转换字符串为整数也可以使用一元运算符  <code>'+'</code> 。</p>\n<p>如果给定的字符串没有  <code>Number</code>  (数值) 类型，那么此时就会返回一个  <code>NaN</code>  (Not a Number 的缩写) 值</p>\n<p>除了  <code>NaN</code> ，JavaScript 还提供了两个特殊值， <code>Infinity</code>  (正无穷) 和  <code>-Infinity</code>  (负无穷)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">id</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">str</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1234.567\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>1234</p>\n<p>1234.567</p>\n<p>123</p>\n<p>NaN</p>\n</blockquote>\n<p>可以使用  <code>isNaN()</code>  来判断一个变量是否为  <code>NaN</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>true</p>\n</blockquote>\n<p>可以使用  <code>isFinite()</code>  来判断一个变量是否为一个有穷数，如果值为  <code>Infinity</code> 、 <code>-Infinity</code>  或  <code>NaN</code>  ，那么就返回  <code>false</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>false</p>\n<p>false</p>\n<p>false</p>\n</blockquote>\n<blockquote>\n<p>小知识 1：使用  <code>parseInt()</code>  及  <code>parseFloat()</code>  时，这两个函数回尝试逐个解析字符串中的字符，直到遇到一个无法被解析的字符，然后返回该字符之前所有数字组成的数字。</p>\n</blockquote>\n<blockquote>\n<p>小知识 2：使用单目运算符  <code>'+'</code>  来转换字符串时，只要字符串中包含无法转换的字符，就会返回  <code>NaN</code></p>\n</blockquote>\n<h5 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h5>\n<blockquote>\n<p>在 JavaScript 中，所有字符串都是一串  <code>Unicode</code>  字符序列。更准确的说，它是一串  <code>UTF-16</code>  编码单元的序列，每一个编码单元由一个 16 位二进制数表示。每一个  <code>Unicode</code>  字符由一个或两个编码单元表示。</p>\n</blockquote>\n<p>在 JavaScript 中， <code>String</code>  是一个对象，因此你可以像操作普通对象一样对它进行操作。</p>\n<p>使用  <code>length</code>  方法获取它的长度，使用  <code>charAt(0)</code>  返回第一个字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>5</p>\n<p>h</p>\n</blockquote>\n<h5 id=\"其他类型\"><a class=\"markdownIt-Anchor\" href=\"#其他类型\">#</a> 其他类型</h5>\n<p><code>null</code>  表示一个空值， <code>undefined</code>  是一个  <code>undefined</code>  (未定义) 类型的对象，表示一个未初始化的值，即没有被分配空间的值。在变量声明之后并未赋值，那么它的值就是  <code>undefined</code> 。</p>\n<p>JavaScript 的逻辑值与 Java 中的一样， <code>false</code> 、 <code>0</code> 、空字符串 ( <code>&quot;&quot;</code> )、 <code>NaN</code> 、 <code>null</code> 、 <code>undefined</code>  都是  <code>false</code> ，其余为  <code>true</code></p>\n<p>逻辑运算符也同 Java 一样， <code>&amp;&amp;</code> (逻辑与)、 <code>||</code> (逻辑或)、 <code>!</code> (逻辑非)，用法也一样</p>\n<p>小技巧：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> CacheName <span class=\"token operator\">&amp;&amp;</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用逻辑与可以事先检测该参数是否为空，防止意外的赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> CacheName <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> CacheName <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用逻辑或可以在参数无效时使用默认值</p>\n</blockquote>\n<h4 id=\"控制结构\"><a class=\"markdownIt-Anchor\" href=\"#控制结构\">#</a> 控制结构</h4>\n<p>JavaScript 的  <code>if</code> 、 <code>else if</code> 、 <code>while</code> 、 <code>do...while</code> 、 <code>switch</code>  都同 Java 一样，稍微有点不同的就是  <code>for</code>  ，普通的  <code>for</code>  和 Java 相同，但是  <code>for...in</code>  和  <code>for...of</code>  稍微有点不同，在 Java 中，与之对应的是  <code>foreach</code>  也就是增强  <code>for</code> 。</p>\n<h5 id=\"forin\"><a class=\"markdownIt-Anchor\" href=\"#forin\">#</a>  <code>for...in</code></h5>\n<p>使用  <code>for...in</code>  迭代可枚举属性，可以遍历属性名和属性值，但是无法使用  <code>for...of</code>  迭代可枚举属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">sex</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> l <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>naem</p>\n<p>Tom</p>\n<p>sex</p>\n<p>男</p>\n<p>age</p>\n<p>18</p>\n</blockquote>\n<h5 id=\"forof\"><a class=\"markdownIt-Anchor\" href=\"#forof\">#</a>  <code>for...of</code></h5>\n<p>使用  <code>for...of</code>  迭代可枚举对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> l <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>name</p>\n<p>undefined</p>\n<p>sex</p>\n<p>undefined</p>\n<p>age</p>\n<p>undefined</p>\n</blockquote>\n<p>注：之所以是  <code>undefined</code>  是因为  <code>list</code>  的元素并没有初始化，所有未初始化的变量一律是  <code>undefined</code></p>\n<h4 id=\"在任意浏览器中运行\"><a class=\"markdownIt-Anchor\" href=\"#在任意浏览器中运行\">#</a> 在任意浏览器中运行</h4>\n<p>在浏览器中按  <code>F12</code>  进入检查模式，然后在选项卡中找到源代码，在里面可以新建代码片段，也可以直接在控制台输入代码，然后用  <code>Ctrl+Enter</code>  运行</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/07/pilWwRS.png\" alt=\"1\"></p>\n<h4 id=\"输入输出\"><a class=\"markdownIt-Anchor\" href=\"#输入输出\">#</a> 输入输出</h4>\n<p>JavaScript 并没有提供任何打印或输出函数。但可以通过不同的方式输出数据。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>window.alert()</code></td>\n<td style=\"text-align:center\">弹出警告窗</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>document.write()</code></td>\n<td style=\"text-align:center\">将内容写入到 HTML 文档中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>innerHTML()</code></td>\n<td style=\"text-align:center\">将内容写入到 HTML 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>console.log()</code></td>\n<td style=\"text-align:center\">将内容写入到浏览器的控制台</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>由当前页面弹出警告信息弹窗</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/11/11/pi8vJsJ.jpg\" alt=\"2\"></p>\n<ol start=\"2\">\n<li>直接将内容写入 HTML 中，如果在 HTML 文档加载完后执行  <code>document.write()</code>  , 则整个页面内容将被覆盖</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以将 JavaScript 直接写在 HTML 文档中，这时的 HTML 文档是不会被覆盖的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>将内容写入指定 HTML 元素中，覆盖原有的元素内容</li>\n</ol>\n<p><code>document.getElementById(&quot;demo&quot;)</code>  是使用 id 属性来查找 HTML 元素的 JavaScript 代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"哈喽\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>将值写到控制台</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/11/11/pi8vGM4.jpg\" alt=\"3\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "JavaScript"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/Xmind%E7%A0%B4%E8%A7%A3/",
            "url": "http://yunyat.cloud/miscellaneous/issues/Xmind%E7%A0%B4%E8%A7%A3/",
            "title": "Xmind破解",
            "date_published": "2023-11-09T07:43:55.000Z",
            "content_html": "<h4 id=\"下载-xmind\"><a class=\"markdownIt-Anchor\" href=\"#下载-xmind\">#</a> 下载 Xmind</h4>\n<ol>\n<li>先去下载 Xmind 的最新版本</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bWluZC5jbi8=\">Xmind 思维导图 | Xmind 中文官方网站</span></p>\n</blockquote>\n<h4 id=\"激活\"><a class=\"markdownIt-Anchor\" href=\"#激活\">#</a> 激活</h4>\n<ol>\n<li>找到你的 Xmind 的  <code>account.json</code>  文件位置（一般在  <code>C:\\Users\\qingtian\\AppData\\Roaming\\Xmind\\Electron v3\\vana\\state</code>  下）</li>\n<li>将以下代码写入到  <code>account.json</code>  文件中（注意：你直接复制我文章的内容会有版权信息，请将信息删除之后再写入到文件里）</li>\n</ol>\n<p>然后右键此文件，选择属性，点击只读，确定保存</p>\n<blockquote region:us,openSignInDialogDate:2023-05-23T02:42:15.383Z,rawSubscriptionData:WUnYY8kQKgX3kjftuV3gnl+b7lLsBaQjZv1C8AbQBBIn9RiEkGiJGlk9EAsI5E6uuxGTkhnf5D5Si2buztQGEaLXzVXzFzsMmdXw5fzb+Oo6I78xNPCRfOKSOlrtOveGdYX+GZJKXJSG77hb93Tgst5v1BqS+PdKHwd3dMg=\"\">\n<p></p>\n</blockquote>\n<ol start=\"3\">\n<li>之后在你电脑杀毒软件中拦截 Xmind 的联网请求，由于我电脑装的是火绒，所以使用火绒演示，其他杀毒软件请自行百度</li>\n</ol>\n<p>打开火绒，选择安全设置 》系统防护 》 联网控制，在里面找到添加规则，输入 xmind ，选择操作方式为阻止联网，然后保存即可</p>\n<h4 id=\"20231212-更新\"><a class=\"markdownIt-Anchor\" href=\"#20231212-更新\">#</a> 2023.12.12 更新</h4>\n<p>经过我的测试，这个激活码大概是在  <code>2023.11.25 9:16</code>  之前有效， <code>xmind</code>  应该是通过获取系统日期，然后加密和激活码中加密过的时间进行比较来判定是否生效。</p>\n<p>知道原因了，问题就好解决了，使用  <code>RunAsdate</code>  来让  <code>xmind</code>  运行在指定的时间即可。</p>\n<blockquote>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmxhbnpvdXQuY29tL2lFcWp6MWhvcGg4ZA==\">RunAsdate</span><br>\n 密码:i50f</p>\n</blockquote>\n<p>程序是汉化过的，不用担心看不懂。</p>\n<p>你可以使用  <code>RunAsdate</code>  创建一个指定的  <code>xmind</code>  文件快捷方式，这样就不用每次都打开  <code>RunAsdate</code> ，直接使用快捷方式就行。</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "破解",
                "xmind",
                "思维导图"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/Typora%E7%9A%84%E7%A0%B4%E8%A7%A3/",
            "url": "http://yunyat.cloud/miscellaneous/issues/Typora%E7%9A%84%E7%A0%B4%E8%A7%A3/",
            "title": "Typora的破解",
            "date_published": "2023-11-07T14:40:47.000Z",
            "content_html": "<h4 id=\"前言废话\"><a class=\"markdownIt-Anchor\" href=\"#前言废话\">#</a> 前言（<s>废话</s>）</h4>\n<p>介绍一下 Typora 是什么…</p>\n<blockquote>\n<p>下面是引用自百度百科的话：</p>\n<p>Typora 是一款由 Abner Lee 开发的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkQlQkIlRTklODclOEYlRTclQkElQTcvMTAwMDI4MzU/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">轻量级</span> Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQkElOTAlRTQlQkIlQTMlRTclQTAlODEvMzk2OT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">源代码</span>和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p>\n</blockquote>\n<p>看完之后你说你不知道 Markdown 是什么？</p>\n<blockquote>\n<p>Markdown 是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkQlQkIlRTklODclOEYlRTclQkElQTclRTYlQTAlODclRTglQUUlQjAlRTglQUYlQUQlRTglQTglODAvNTI2NzE5MTU/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">轻量级标记语言</span>，创始人为约翰・格鲁伯（John Gruber）。 它允许人们使用易读易写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQUYlRTYlOTYlODclRTYlOUMlQUMlRTYlQTAlQkMlRTUlQkMlOEYvOTg2MjI4OD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">纯文本格式</span>编写文档，然后转换成有效的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9YSFRNTC8zMTY2MjE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">XHTML</span>（或者 HTML）文档。这种语言吸收了很多在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTUlQUQlOTAlRTklODIlQUUlRTQlQkIlQjYvMTExMTA2P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">电子邮件</span>中已有的纯文本标记的特性。</p>\n<p>由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9HaXRIdWIvMTAxNDUzNDE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">GitHub</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9SZWRkaXQvMTI3MjAxMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">Reddit</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9EaWFzcG9yYS8xMDcyNjg5Mz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">Diaspora</span>、[Stack Exchange](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TdGFjaw==\">https://baike.baidu.com/item/Stack</span> Exchange/13777796?fromModule=lemma_inlink)、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9PcGVuU3RyZWV0TWFwLzMxNzE2MDY/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">OpenStreetMap</span> 、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9Tb3VyY2VGb3JnZS82NTYyMTQxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">SourceForge</span>、简书等，甚至还能被使用来撰写<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTUlQUQlOTAlRTQlQjklQTYvMzQ2MDU0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">电子书</span>。</p>\n</blockquote>\n<p>好了，现在你应该有一个大概的了解了，那么请继续看破解教程</p>\n<h4 id=\"下载-typora\"><a class=\"markdownIt-Anchor\" href=\"#下载-typora\">#</a> 下载 Typora</h4>\n<p>先到官网下最新版的 Typora 软件，然后安装，先别管激活</p>\n<blockquote>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmEuaW8v\">Typora</span></p>\n</blockquote>\n<h4 id=\"破解\"><a class=\"markdownIt-Anchor\" href=\"#破解\">#</a> 破解</h4>\n<ol>\n<li>下载要用的破解软件。</li>\n</ol>\n<blockquote>\n<p>思路：使用伪造的激活码来激活</p>\n<p>破解程序在 Github 上有，需要克隆 (下载) 两个仓库，克隆下来并不能直接使用，要使用 Rust 编译为 exe 文件。</p>\n<p>或者你可以直接使用我提供的已经编译好的破解程序（要自己编译的话要安装及配置 Rust，麻烦）。</p>\n<p>编译教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21veGlhb2JlaTE5OTMvYmxvZy9pc3N1ZXMvOA==\">一劳永逸破解 Typora 全系列</span></p>\n<p>仓库一：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RpYW1vbmRIdW50ZXJzL05vZGVJbmplY3Q=\">DiamondHunters/NodeInject</span></p>\n<p>仓库二：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RpYW1vbmRIdW50ZXJzL05vZGVJbmplY3RfSG9va19leGFtcGxl\">DiamondHunters/NodeInject_Hook_example</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly84LjIyMi4xNTMuOTE6Mzk4MTEvZG93bi9QZ29qZ2NmR3dtWHAuN3o=\">exe 下载链接</span>：提取码：YunYi\t注：提取码大小写敏感</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>下载完之后在将压缩包里的文件直接提到你安装的 Typora 的根目录里（就是有 Typora.exe 文件的文件夹里，实在找不到那就直接右键桌面的 Typora 图标，然后属性，你就能看到安装的位置了）</p>\n</li>\n<li>\n<p>然后 Typora 根目录里的 run.bat 双击运行即可</p>\n</li>\n<li>\n<p>你会在弹出的 CMD 命令行中看到如下的内容：</p>\n</li>\n</ol>\n<blockquote>\n<p>License for you:  <code>CLX2WZ-WLQ7DP-PJPNGT-9AKLDL</code></p>\n</blockquote>\n<p>其中的  <code>CLX2WZ-WLQ7DP-PJPNGT-9AKLDL</code>  字段就是你要用的 “激活码”(伪)</p>\n<ol start=\"5\">\n<li>\n<p>之后你打开 Typora 软件，它应该会弹出激活或者试用页面，选择激活</p>\n</li>\n<li>\n<p>它会让你输入两次邮箱，你直接用个临时邮箱即可（临时邮箱的获取可以在我以前的安利文章里找到），第二个邮箱跟第一个填一样的，注意，这个邮箱要你自己手动输入，不能复制粘贴</p>\n</li>\n<li>\n<p>填入你的 “激活码”，然后激活</p>\n</li>\n<li>\n<p>第一次激活的时候它会提示你 <code>链接服务器失败，使用尝试访问国内域名进行激活</code> ，不用管，点确认就可以了，或者关掉重新激活一下就行</p>\n</li>\n</ol>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "markdown",
                "破解",
                "Typora"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Git的使用",
            "date_published": "2023-10-26T11:30:24.000Z",
            "content_html": "<h4 id=\"git概念\"><a class=\"markdownIt-Anchor\" href=\"#git概念\">#</a> Git 概念</h4>\n<p>git 分为工作区、暂存区和版本库</p>\n<p>工作区：就是你能直接看见的文件</p>\n<p>暂存区：暂存区位于 .git/index 文件中，暂存区中存储的都是索引</p>\n<p>版本库：整个 .git 文件夹即为版本库</p>\n<p>在版本库中还存有 master 分支所代表的目录树</p>\n<p>一般用 HEAD 来代指当前分支，HEAD 是一个指向 master 分支的指针</p>\n<h5 id=\"推送流程\"><a class=\"markdownIt-Anchor\" href=\"#推送流程\">#</a> 推送流程</h5>\n<p>git add . # 将当前目录下的所有内容添加到暂存区，此时并不会 commit 到版本库</p>\n<p>git commit -m “update” # 将暂存区的文件提交到版本库，后面的字符串为提交说明</p>\n<p>git push git 仓库位置 # 此时会将版本库中的文件提交到远程 git 仓库</p>\n<blockquote>\n<p>git add  》 git commit  》git push</p>\n</blockquote>\n<p>图解：</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t工作区<span class=\"token arrow operator\">->></span>暂存区<span class=\"token operator\">:</span> add # 添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t暂存区<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> commit # 提交</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>远程仓库<span class=\"token operator\">:</span> push # 推送</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> clone # 克隆</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> pull # 拉取</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> checkout # 分支切换</pre></td></tr></table></figure><blockquote>\n<p>参数解析：</p>\n<p>add ：添加文件到暂存区</p>\n<p>commit ：提交文件到版本库 / 本地仓库</p>\n<p>push：推送文件到远程仓库</p>\n<p>clone：将一个项目克隆到本地仓库</p>\n<p>pull：拉取一个仓库到本地</p>\n<p>checkout：切换分支</p>\n</blockquote>\n<h4 id=\"git-的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#git-的基本操作\">#</a> Git 的基本操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git init</td>\n<td style=\"text-align:center\"><code>[file]</code></td>\n<td style=\"text-align:center\">初始化仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git status</code></td>\n<td style=\"text-align:center\"><code>[-s]</code></td>\n<td style=\"text-align:center\">查看仓库当前的状态，显示有变更的文件，加 -s 参数使其简短输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git diff</td>\n<td style=\"text-align:center\"><code>[--cached]</code>   <code>[HEAD]</code></td>\n<td style=\"text-align:center\">比较文件的不同，即暂存区和工作区的差异，可以使用 --cachaed 显示已缓存的改动，使用 HEAD 显示所有已缓存和未缓存的改动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git reset</code></td>\n<td style=\"text-align:center\"><code>[HEAD~1]</code>   <code>[file]</code></td>\n<td style=\"text-align:center\">回退版本，回退到添加或提交之前，或使用 --soft HEAD~3 参数指定回退到上上上个版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rm</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">将文件从暂存区和工作区删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git mv</code></td>\n<td style=\"text-align:center\"><code>[-f] [file] [newfile]</code></td>\n<td style=\"text-align:center\">移动或重命名工作区文件，添加 -f 参数来重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git switch</td>\n<td style=\"text-align:center\"><code>&lt;branch-name&gt;</code>   <code>[-c] &lt;new-branch-name&gt;</code>   <code>tags/&lt;tag-name&gt;</code></td>\n<td style=\"text-align:center\">更清晰的切换分支，切换到指定分支。使用 -c 创建分支并切换到新创建的分支。使用 tags/ 切换到标签所指向的提交状态</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git restore</td>\n<td style=\"text-align:center\"><code>&lt;file&gt;</code>   <code>--staged &lt;file&gt;</code>   <code>--source=&lt;commit&gt; &lt;file&gt;</code></td>\n<td style=\"text-align:center\">恢复或撤销文件的更改。指定文件名将其恢复至最新的提交状态，丢弃所有未提交的更改。使用 --staged 将文件还原到添加到暂存区之前。使用 --source 将文件还原到指定的历史版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch</td>\n<td style=\"text-align:center\"><code>[new-branch-name]</code></td>\n<td style=\"text-align:center\">查看可用分支和标签。加参数新建分支</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"git-分支管理\"><a class=\"markdownIt-Anchor\" href=\"#git-分支管理\">#</a> Git 分支管理</h4>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tB<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tD<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>F<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tB<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B1<span class=\"token text string\">(b1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tB1<span class=\"token text string\">(b1)</span><span class=\"token arrow operator\">--></span>B2<span class=\"token text string\">(b2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E1<span class=\"token text string\">(e1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tE1<span class=\"token text string\">(e1)</span><span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(e2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tHEAD<span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(head)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t图解</pre></td></tr></table></figure><h5 id=\"合并分支-删除分支\"><a class=\"markdownIt-Anchor\" href=\"#合并分支-删除分支\">#</a> 合并分支 &amp; 删除分支</h5>\n<p>如上图所示，创建一个分支之后就是从那个提交历史节点 clone 一个新的节点，在此节点上所做的任何更改都不会影响到主分支。主分支所做的改动同样也不会影响到别的分支节点，但是要注意，可以使用以下命令来将指定的分支合并到主分支</p>\n<blockquote>\n<p><code>git merge &lt;branch-name&gt;</code></p>\n</blockquote>\n<p>在分支被合并之后就可以删除此分支</p>\n<blockquote>\n<p><code>git branch -d &lt;branch-name&gt;</code></p>\n</blockquote>\n<h5 id=\"合并冲突\"><a class=\"markdownIt-Anchor\" href=\"#合并冲突\">#</a> 合并冲突</h5>\n<p>当你在主分支更改了一个文件并且将更改提交到了版本库，又在另一个分支上同样更改了这个文件并且也提交到了版本库时，这个时候假设你想要将这个分支合并到主分支上，此时会出现合并冲突问题，这需要我们去手动解决</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nhello world\n=======\n你好世界\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre>\n<p>在上面的文件 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中，我们在主分支中添加了 hello world 内容。在 master 分支中添加了 你好世界 内容。</p>\n</blockquote>\n<p>解决冲突只需要将 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中的标记删除然后重新添加和提交即可</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\nhello world\n你好世界\n</code></pre>\n<p>修改之后用 git add 添加和 git commit 提交</p>\n</blockquote>\n<h4 id=\"查看-git-的提交历史\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的提交历史\">#</a> 查看 Git 的提交历史</h4>\n<h5 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a> Git log</h5>\n<blockquote>\n<p><code>git log</code></p>\n<p>使用此命令会显示从最新到最旧的所有提交信息，包括提交的哈希值、作者、提交日期、提交说明</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git log [选项] [分支名/提交哈希]</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-p</code></td>\n<td style=\"text-align:center\">显示提交的具体更改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--oneline</code></td>\n<td style=\"text-align:center\">以简洁的一行格式显示提交信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--graph</code></td>\n<td style=\"text-align:center\">以图形化的方式显示分支和合并历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--decorate</code></td>\n<td style=\"text-align:center\">显示分支和标签指向的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--author=&lt;作者&gt;</code></td>\n<td style=\"text-align:center\">只显示指定的作者的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--since=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之后的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--until=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之前的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--grep=&lt;模式&gt;</code></td>\n<td style=\"text-align:center\">只显示包含特定模式的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--no-merges</code></td>\n<td style=\"text-align:center\">不显示合并提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--stat</code></td>\n<td style=\"text-align:center\">显示简略统计信息，包括修改的文件和行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--abbrev-commit</code></td>\n<td style=\"text-align:center\">使用短提交哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--pretty=&lt;格式&gt;</code></td>\n<td style=\"text-align:center\">使用自定义的提交信息的显示格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--reverse</code></td>\n<td style=\"text-align:center\">逆向显示所有日志</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用  <code>git log</code>  命令会输出以下内容</p>\n<pre><code>$ git log\ncommit 0c98d56e9822f23406758d2339833ffec7af0c1a (HEAD -&gt; main)\nMerge: 434acee e6e3e72\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 11:11:19 2023 +0800\n\n\ttest3\n\ncommit e6e3e72d10cf8b1218e0118beac857af06ff57cd (master)\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:59:53 2023 +0800\n\n\ttest2\n\ncommit 434aceeb3a6fbac0ec94fdbedb15d74455528f2f\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:58:50 2023 +0800\n\n\t test\n\ncommit 33e6c64449e0e094e19d7aea162bfddc23a10832\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Wed Oct 25 10:29:18 2023 +0800\n\n\tREADME.md\n</code></pre>\n<p>使用  <code>git log --oneline --graph</code>  以图形化的方式显示简洁的一行提交信息</p>\n<pre><code>$ git log --oneline --graph\n*   0c98d56 (HEAD -&gt; main) test3\n|\\\n| * e6e3e72 (master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>此时可以清晰的看见何时工作分叉，又何时合并分支</p>\n</blockquote>\n<p>可以使用  <code>git log --help</code>  查看帮助信息</p>\n<h5 id=\"git-blame\"><a class=\"markdownIt-Anchor\" href=\"#git-blame\">#</a> Git blame</h5>\n<blockquote>\n<p><code>git blame</code></p>\n<p>使用此命令可以查看指定文件的每一行代码是由谁在什么时候引入或修改的</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git blame [选项] &lt;文件路径&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-L &lt;起始行号&gt;,&lt;结束行号&gt;</code></td>\n<td style=\"text-align:center\">只显示指定行号范围内的代码注释</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C</code></td>\n<td style=\"text-align:center\">对于重命名或拷贝的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-M</code></td>\n<td style=\"text-align:center\">对于移动的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C -C</code>  or  <code>-M -M</code></td>\n<td style=\"text-align:center\">对于较多改动的代码行，进行更进一步的溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--show-stats</code></td>\n<td style=\"text-align:center\">显示包含每个作者的行数统计信息</td>\n</tr>\n</tbody>\n</table>\n<p>更多用法可以使用  <code>git blame --help</code>  查看帮助文档</p>\n<h4 id=\"git-标签\"><a class=\"markdownIt-Anchor\" href=\"#git-标签\">#</a> Git 标签</h4>\n<p><code>git tag -a &lt;标签名&gt;</code></p>\n<p>在发布版本的时候，可以使用 tag 来给本次提交打上标签。使用 -a 参数来创建一个带注解的标签，加上这个参数它会记录此标签是何时打的，谁打的，以及让你添加一个标签的注解</p>\n<p><code>git tag -a &lt;标签名&gt; &lt;提交哈希&gt;</code></p>\n<p>你可以使用上面的命令给以前的提交追加 tag 标签。我给  <code>e6e3e72</code>  这个提交追加了  <code>v0.9</code>  的标签</p>\n<pre><code>$ git tag -a v0.9 e6e3e72\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2 \t# 此处显示了追加的标签\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p><code>git log --decorate</code></p>\n<p>使用此命令来查看我们打的标签</p>\n<pre><code>$ git log --oneline --decorate --graph\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>也可以使用  <code>git tag</code>  来查看所有的标签</p>\n<p>指定标签信息的命令：</p>\n<p><code>git tag -a &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p>PGP 签名标签命令：<br>\n <code>git tag -s &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p><code>gti tag -d v0.9</code> <br>\n 使用上面的命令删除指定的标签</p>\n<h4 id=\"git-远程仓库操作\"><a class=\"markdownIt-Anchor\" href=\"#git-远程仓库操作\">#</a> Git 远程仓库操作</h4>\n<h5 id=\"添加远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#添加远程仓库\">#</a> 添加远程仓库</h5>\n<p><code>git remote add &lt;仓库别名&gt; &lt;仓库的 ssh url 地址&gt;</code></p>\n<ul>\n<li>使用以上命令可以添加一个远程仓库并设置别名，别名在推送时会用的上</li>\n</ul>\n<h5 id=\"推送\"><a class=\"markdownIt-Anchor\" href=\"#推送\">#</a> 推送</h5>\n<p>推送代码到仓库里有两种方法：</p>\n<ol>\n<li>\n<p>然后使用  <code>git push -u &lt;仓库别名&gt; master</code>  来将本地的 master 分支推送到 origin 的 master 分支上</p>\n</li>\n<li>\n<p>也可以使用  <code>git push &lt;仓库地址&gt;</code>  来推送你的当前分支</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>这两种方法的区别是第一种方法来推送是将本地的 master 分支推送到 origin 主机的 master 分支，并且指定 你所设置的仓库别名所代表的主机为默认主机，这样在以后推送时就可以不加任何参数的使用  <code>git push</code></p>\n</li>\n<li>\n<p>第二种方法只是单纯的将本地的当前分支上传到指定的远程仓库地址，并不会指定默认主机，也不会创建或更改远程分支，只是简单的上传代码。</p>\n</li>\n<li>\n<p>查看当前配置有哪些仓库，可以加上 -v 参数来显示所有的仓库别名的实际连接地址</p>\n<p><code>git remote [-v]</code></p>\n</li>\n</ul>\n<h5 id=\"提取远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#提取远程仓库\">#</a> 提取远程仓库</h5>\n<ol>\n<li>先使用  <code>git fetch [仓库名] [分支名]</code>  将远程仓库的分支下载到本地主机，因为时拉取，所以需要指定远程仓库名和分支名</li>\n</ol>\n<pre><code>$ git fetch origin main\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 996 bytes | 90.00 KiB/s, done.\nFrom gitee.com:Zero_Li_Fun/Decimal-conversion\n * branch            main       -&gt; FETCH_HEAD\n   dfb4d6e..9d5cf43  main       -&gt; origin/main\n</code></pre>\n<ol start=\"2\">\n<li>然后使用  <code>git merge [origin/master]</code>  来合并远程分支到本地的当前分支，合并分支要指定被合并的分支名</li>\n</ol>\n<pre><code>$ git merge origin/main\nUpdating dfb4d6e..9d5cf43\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<h5 id=\"删除远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#删除远程仓库\">#</a> 删除远程仓库</h5>\n<p><code>git remote rm &lt;仓库别名&gt;</code></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "title": "Git同时部署多个仓库",
            "date_published": "2023-10-26T03:20:32.000Z",
            "content_html": "<h4 id=\"私有仓库的配置\"><a class=\"markdownIt-Anchor\" href=\"#私有仓库的配置\">#</a> 私有仓库的配置</h4>\n<p>刚需：先在服务器端创建 git 用户，并且配置用户密码</p>\n<p>可以使用下面的命令创建和修改</p>\n<blockquote>\n<p>useradd git</p>\n<p>passwd git</p>\n<p>#注：密码要输入两次确认</p>\n</blockquote>\n<h5 id=\"服务器端配置\"><a class=\"markdownIt-Anchor\" href=\"#服务器端配置\">#</a> 服务器端配置：</h5>\n<blockquote>\n<p>su git \t# 切换到 git 用户</p>\n<p>cd \t# 进入用户家目录</p>\n<p>mkdir .ssh ; cd .ssh  \t# 创建 .ssh 配置目录并进入</p>\n<p>touch authorized_keys \t# 创建 authorized_keys 来存放公钥</p>\n<p>chmod 700 /home/git/.ssh/ ; chmod 600 /home/git/.ssh/authorized_keys \t# 修改 .ssh 及 authorized_keys 的权限</p>\n<p>vim /etc/ssh/sshd_config</p>\n<p>#在此文件中查找以下字段是否存在或取消注释</p>\n<p>#1. RSAAuthentication yes</p>\n<p>#2. PubkeyAuthentication yes</p>\n<p>#3. AuthorizedkeysFile .ssh/authorized_keys</p>\n</blockquote>\n<h5 id=\"客户端生成公钥\"><a class=\"markdownIt-Anchor\" href=\"#客户端生成公钥\">#</a> 客户端生成公钥：</h5>\n<blockquote>\n<p>ssh-keygen -t rsa -C “git” -f “id_rsa_git” \t<br>\n# 使用 -f 来指定生成的密钥文件名<br>\n #使用 -C 来指定生成密钥的注释信息，以便使用 -v 调试时区分密钥</p>\n</blockquote>\n<h4 id=\"配置-github-和-gitee-仓库\"><a class=\"markdownIt-Anchor\" href=\"#配置-github-和-gitee-仓库\">#</a> 配置 Github 和 Gitee 仓库</h4>\n<blockquote>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span>” -f “id_rsa_gitee”</p>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span>” -f “id_rsa_github”</p>\n</blockquote>\n<div class=\"note primary\">\n<p>生成公钥请在 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的终端里进行，文件名为 .pub 后缀的文件为公钥文件</p>\n<p>然后将不同仓库的公钥里的值分别添加到不同的仓库里即可</p>\n<p>私有仓库则将值添加到 git 用户的 .ssh/authorized_keys 里</p>\n</div>\n<div class=\"note info\">\n<p>注：可以使用 echo “值” &gt;&gt; authorized_keys 将值追加到文件里，这样可以防止覆盖以前配置的 ssh 公钥，防止其他用户无法使用免密登录</p>\n</div>\n<p>然后配置本地主机的 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的  <code>config</code>  文件来解决  <code>ssh</code>  冲突问题 ，没有就创建一个，然后填入以下内容</p>\n<div class=\"note info\">\n<p>创建的 config 文件没有后缀名</p>\n</div>\n<blockquote>\n<p>#hexo 用户</p>\n<p>Host hexohost \t# 别名<br>\n HostName 8.222.153.91 \t# 主机地址<br>\n Post 5213 \t# 端口<br>\n User hexo \t# 用户名<br>\n IdentityFile ~/.ssh/id_rsa_hexo \t# 私钥位置，一般位于 C:\\\\Users\\username\\.ssh\\ 下</p>\n<p>#root 用户</p>\n<p>Host roothost<br>\nHostName 8.222.153.91<br>\nPost 5213<br>\nUser root<br>\nIdentityFile ~/.ssh/id_rsa</p>\n<p>#git 登录 github</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_github</p>\n<p>#git 登录 gitee</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_gitee</p>\n</blockquote>\n<p>也可以在使用 ssh 的时候在后面使用 -p 参数指定端口</p>\n<blockquote>\n<p>ssh <span class=\"exturl\" data-url=\"bWFpbHRvOmhleG9AOC4yMjIuMTUzLjkx\">hexo@8.222.153.91</span> -p 5213</p>\n</blockquote>\n<p>然后可以使用下面的命令测试登录：</p>\n<blockquote>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span></p>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span></p>\n</blockquote>\n<h4 id=\"查看-git-的-push-模式\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的-push-模式\">#</a> 查看 git 的 push 模式</h4>\n<blockquote>\n<p>git remote -v</p>\n<p>git remote set-url origin 你的仓库地址 \t# 修改不同的模式用不同的仓库地址</p>\n</blockquote>\n<h4 id=\"坑\"><a class=\"markdownIt-Anchor\" href=\"#坑\">#</a> 坑</h4>\n<ol>\n<li>如果使用 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span> 或者 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span> 来测试登录显示如下报错：</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span>: Permission denied (publickey).</p>\n</blockquote>\n<h5 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h5>\n<p>如果检查公钥配置没有问题，使用下面的命令将本机的 git 仓库与相对应的 SSH Key 关联上即可</p>\n<blockquote>\n<p>ssh-agent bash \t# 打开身份代理验证连接</p>\n<p>ssh-add ~/.ssh/id_rsa_gitee \t# 你的 gitee 私钥文件位置</p>\n<p>ssh-add ~/.ssh/id_rsa_github \t# 你的 github 私钥文件位置</p>\n</blockquote>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "url": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "title": "使用cAdvisor+Prometheus+Grafana监控Docker容器",
            "date_published": "2023-09-26T15:22:58.000Z",
            "content_html": "<h4 id=\"10-下载镜像\"><a class=\"markdownIt-Anchor\" href=\"#10-下载镜像\">#</a> 1.0 下载镜像</h4>\n<ol>\n<li>先使用下面的命令下载必要的镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull google/cadvisor <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull prom/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHGeun.png\" alt=\"pPHGeun.png\"></p>\n<h4 id=\"20-cadvisor-的部署\"><a class=\"markdownIt-Anchor\" href=\"#20-cadvisor-的部署\">#</a> 2.0 cAdvisor 的部署</h4>\n<ol>\n<li>使用下面的命令将本地的 根目录、/sys、/var/lib/docker、/dev/disk 等目录以只读形式挂载到容器里，然后使用 -p 将本地端口映射到容器，使用 --privileged 给予容器特权模式，使用 --device=/dev/kmsg 将主机的 /dev/kmsg 设备文件添加到容器中</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> /:/rootfs:ro <span class=\"token parameter variable\">-v</span> /var/run:/var/run:ro <span class=\"token parameter variable\">-v</span> /sys:/sys:ro <span class=\"token parameter variable\">-v</span> /var/lib/docker/:/var/lib/docker:ro <span class=\"token parameter variable\">-v</span> /dev/disk/:/dev/disk:ro <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25571</span>:8080 <span class=\"token parameter variable\">--detach</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>cadvisor <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--device</span><span class=\"token operator\">=</span>/dev/kmsg google/cadvisor</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwpYq.png\" alt=\"pPHwpYq.png\"></p>\n<ol start=\"2\">\n<li>在浏览器输入  <code>你的ip:25571/containers/docker</code>  即可访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwilT.png\" alt=\"pPHwilT.png\"></p>\n<h4 id=\"30-prometheus-的部署\"><a class=\"markdownIt-Anchor\" href=\"#30-prometheus-的部署\">#</a> 3.0 Prometheus 的部署</h4>\n<ol>\n<li>先创建配置文件存放的目录，然后使用 vim 创建并编辑  <code>prometheus.yml</code>  配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> /etc/prometheus/prometheus.yml</pre></td></tr></table></figure><ol start=\"2\">\n<li>然后在 prometheus.yml 文件中写入以下内容</li>\n</ol>\n<p>将 ip 地址跟端口号改为自己的就行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   scrape_interval: 15s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   evaluation_interval: 15s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> alerting:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  alertmanagers:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  - static_configs:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    - targets:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> rule_files:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> scrape_configs:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   - job_name: <span class=\"token string\">'prometheus'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25572'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   - job_name: <span class=\"token string\">'cadvisor'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25571'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>注意：缩进一定要跟我的一样，错一个字符都不行，因为我容器已经运行起来了才截的图，所以你们现在应该是没有这个容器的</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHw9f0.png\" alt=\"pPHw9f0.png\"></p>\n<ol start=\"3\">\n<li>使用 run 将容器运行起来</li>\n</ol>\n<blockquote>\n<p>建议先使用 docker ps -a 查看容器有没有真正运行起来，有时候会出现成功创建但是没有运行起来的情况，这种情况一般都是配置文件有问题导致的</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>prometheus <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25572</span>:9090 <span class=\"token parameter variable\">-v</span> /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus <span class=\"token parameter variable\">--config.file</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus.yml --web.enable-lifecycle</pre></td></tr></table></figure><ol start=\"4\">\n<li>在浏览器输入你的 ip:25572/targets 来访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwPpV.png\" alt=\"pPHwPpV.png\"></p>\n<h4 id=\"40-grafana-的部署\"><a class=\"markdownIt-Anchor\" href=\"#40-grafana-的部署\">#</a> 4.0 Grafana 的部署</h4>\n<ol>\n<li>因为之前已经把所有的镜像都已经下载了，所以直接用 run 来运行就行了，之后在浏览器中使用 你的 IP:25573/login 来访问即可</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>grafana <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25573</span>:3000 grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyPpR.png\" alt=\"pPHyPpR.png\"></p>\n<ol start=\"2\">\n<li>默认账号及密码都为 admin ，登录之后网站会强制你更新密码</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyZ7D.png\" alt=\"pPHyZ7D.png\"></p>\n<ol start=\"3\">\n<li>进入管理界面之后点击 DATA SOURCES 来创建数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyV0O.png\" alt=\"pPHyV0O.png\"></p>\n<ol start=\"4\">\n<li>选择第一个数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyuhd.png\" alt=\"pPHyuhd.png\"></p>\n<ol start=\"5\">\n<li>在 HTTP 的 URL 栏填入你的 Prometheus 访问地址，然后选 Save &amp; test 保存并退出</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//192.168.234.128:25572/targets</span></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy8nf.png\" alt=\"pPHy8nf.png\"></p>\n<ol start=\"6\">\n<li>点击左边工具栏的 ‘+’ 号，然后点击 Import ，输入 193 ，点击后面的 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHytAg.png\" alt=\"pPHytAg.png\"></p>\n<ol start=\"7\">\n<li>在 Prometheus 列选择数据源，之后点击 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy0cq.png\" alt=\"pPHy0cq.png\"></p>\n<ol start=\"8\">\n<li>之后就可以看到仪表盘显示的数据了</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHycEF.png\" alt=\"pPHycEF.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Docker",
                "cAdvisor",
                "Prometheus",
                "Grafana"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Linux2023-9-18%E4%BD%9C%E4%B8%9A/",
            "url": "http://yunyat.cloud/linux/Linux2023-9-18%E4%BD%9C%E4%B8%9A/",
            "title": "Linux2023-9-18作业",
            "date_published": "2023-09-18T06:40:30.000Z",
            "content_html": "<blockquote>\n<p>题目要求：</p>\n<p>1、破解 centos7 操作系统密码为 flectrag</p>\n<p>2、查找系统中文件，要求将文件大小大于 5M 小于 10M 的文件查找出来放置 /findfile 目录下</p>\n<p>3、查找文件 /usr/share/xml/iso-codes/iso_639_3.xml 中包含字符串 ng 的所有行。<br>\n将所有这些行的副本按原始顺序放在文件 /root/list 中。/root/list 不得包含空行，<br>\n且所有行必须是 /usr/share/xml/iso-codes/iso_639_3.xml 中原始行的确切副本</p>\n<p>4、新建用户 student，设置密码为 flectrag</p>\n<p>5、修改 student 用户策略，允许 student 组成员 sudo 时不需要密码</p>\n</blockquote>\n<hr>\n<h4 id=\"10-破解-centos7-操作系统的-root-用户密码\"><a class=\"markdownIt-Anchor\" href=\"#10-破解-centos7-操作系统的-root-用户密码\">#</a> 1.0 破解 centos7 操作系统的 root 用户密码</h4>\n<ol>\n<li>先重启虚拟机，在如下图的界面按 e 键进入 edit</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4i8FH.jpg\" alt=\"pP4i8FH.jpg\"></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iJfA.jpg\" alt=\"pP4iJfA.jpg\"></p>\n<ol start=\"2\">\n<li>找到 linux16 字段，把里面的  <code>ro rhgb quiet</code>  改为  <code>rw init=/bin/sh</code> ，之后按 ctrl+x 进入单用户模式</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iNlt.jpg\" alt=\"pP4iNlt.jpg\"></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4itSI.jpg\" alt=\"pP4itSI.jpg\"></p>\n<ol start=\"3\">\n<li>在该模式下输入  <code>passwd root</code>  来更改 root 密码，之后输入 touch /.autorelabel 创建文件，然后输入 exec /sbin/init 正常启动 init 进程即可</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iGYd.jpg\" alt=\"pP4iGYd.jpg\"></p>\n<h4 id=\"20-查找文件1\"><a class=\"markdownIt-Anchor\" href=\"#20-查找文件1\">#</a> 2.0 查找文件 1</h4>\n<ol>\n<li>首先要在根目录创建一个  <code>findfile</code>  文件夹，然后使用下面的命令来查找并复制</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /findfile</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +5M <span class=\"token parameter variable\">-size</span> <span class=\"token parameter variable\">-10M</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">cp</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> /findfile <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4kyMq.png\" alt=\"pP4kyMq.png\"></p>\n<ol start=\"2\">\n<li>可以使用  <code>ll</code>  命令验证大小</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4ApQI.png\" alt=\"pP4ApQI.png\"></p>\n<h4 id=\"30-查找文件2\"><a class=\"markdownIt-Anchor\" href=\"#30-查找文件2\">#</a> 3.0 查找文件 2</h4>\n<ol>\n<li>先在用户的家目录下用  <code>touch</code>  命令创建  <code>list</code>  文件，然后使用下面的命令完成要求，最后使用  <code>cat list</code>  来验证</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> list</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token string\">\"ng\"</span> /usr/share/xml/iso-codes/iso_639_3.xml <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\r'</span> <span class=\"token operator\">></span> /root/list</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> list</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4AGY4.png\" alt=\"pP4AGY4.png\"></p>\n<h4 id=\"40-创建用户\"><a class=\"markdownIt-Anchor\" href=\"#40-创建用户\">#</a> 4.0 创建用户</h4>\n<ol>\n<li>使用下面的命令创建 student 用户并指定其密码，使用普通用户 sir 登录测试</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>openssl <span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-1</span> flectrag<span class=\"token variable\">)</span></span> student</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4e3uR.png\" alt=\"pP4e3uR.png\"></p>\n<h4 id=\"50-修改用户策略\"><a class=\"markdownIt-Anchor\" href=\"#50-修改用户策略\">#</a> 5.0 修改用户策略</h4>\n<ol>\n<li>先使用下面的命令将 student 用户添加到 /etc/sudoers 文件中</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"%student ALL=(ALL) NOPASSWD: ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers</pre></td></tr></table></figure><p>然后切换到 student 用户，之后使用 sudo passwd root 来试着更改 root 用户的密码，可以看到，可以直接更改，不需要输入密码，然后切到 sir 普通用户，同样试着更改 root 用户的密码，可以看到，无法更改</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4e8D1.png\" alt=\"pP4e8D1.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Linux"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/%E8%B0%88%E8%B0%88%E7%9C%8B%E5%AE%8C%E3%80%8A%E5%AD%A4%E6%B3%A8%E4%B8%80%E6%8E%B7%E3%80%8B%E7%9A%84%E6%84%9F%E6%83%B3/",
            "url": "http://yunyat.cloud/miscellaneous/%E8%B0%88%E8%B0%88%E7%9C%8B%E5%AE%8C%E3%80%8A%E5%AD%A4%E6%B3%A8%E4%B8%80%E6%8E%B7%E3%80%8B%E7%9A%84%E6%84%9F%E6%83%B3/",
            "title": "谈谈看完《孤注一掷》的感想",
            "date_published": "2023-09-16T10:29:35.000Z",
            "content_html": "<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>我并没有什么文采，也不懂什么高深的遣词造句，此篇如其名，只是谈一下我对看完这部电影的浅薄感想！</p>\n<p>就这么多吧，将就着看看就成，不必当真。</p>\n<hr>\n<h4 id=\"1-起因\"><a class=\"markdownIt-Anchor\" href=\"#1-起因\">#</a> 1. 起因</h4>\n<p>本来我对孤注一掷并没有什么观影欲望，单纯只是想出去透透气，看个电影放松一下，毕竟在学校一直呆着，每天差不多是天天早八了，而且基本上每天都有最少六节课，不是在实训楼就是教室跟宿舍，我学校小，也没什么地方可去，就怕啥时候憋出病来😅，所以在今天（星期六），跟舍友商量了一下，准备去看孤注一掷。</p>\n<h4 id=\"2-观影\"><a class=\"markdownIt-Anchor\" href=\"#2-观影\">#</a> 2. 观影</h4>\n<p>看完电影我感觉有太多感触了，回来的路上我不断的有想法冒出来，但是到了宿舍，创建了这篇文章，此时竟然不知如何写起。</p>\n<p>我认为电影里的主角是不幸的，同时也是幸运的，不幸是因为在职场中竞争失利，毕竟一个普通人，在中国这个人情社会中，想要活下去没有背景和人脉是不可能的，潘生就是一个典型的例子，后面他一气之下出国，被拐入诈骗集团，这些都是他的不幸。但幸运的是，有人还记得他，他并不是孤单一人，即使被拐入诈骗集团数次求救失败他也没有放弃，如果是另外一个人，估计早就被彻底 PUA 了，而在电影的后段，如果没有阿才放掉梁安娜，那也就不会有最后的获救了，所以他是幸运的，因为并不是所有人都有这个运气，绝大多数人很可能穷其一生也不可能逃出去，就像其中的那个路人甲，他也曾以为自己得救了，但没想到还是会被卖给另一个诈骗团伙，最后更是惨死。</p>\n<p>还有里面的阿天，以及梁安娜，他们都有一个共同点，那就是那么明显的骗局他们为什么还会上当？其实所有的问题都是一个原因造成的，他们都需要钱，在这里面我有点想不通的就是阿天他的条件明显很不错，比如硕士毕业，有房有车，还有稳定的工作，以及还有一个女朋友，这他娘的还要什么自行车？我并不能理解他为什么急需钱，可能是我们的眼界不同吧，亦可能是为了所谓的虚荣心。</p>\n<p>当然，将我们的处境换位一下，在你急需用钱的时候，突然出现了一个可以赚快钱的机会，我也可能会做出和他们同样的选择，哪怕有一定可能是诈骗，毕竟人总是抱着侥幸心理的，就像我们为一件事而犹豫时，此时我们会去询问周围的朋友，他们的话有可能是劝阻你，但哪怕有百分之 99 的人反对你，可只要有一个人支持你，你就会毫不犹豫的去做，其实早在你去问他们之前你心里就已经有了答案，只不过你缺少一个说服自己的借口罢了。电影中的梁安娜就是如此，在一个刚认识的闺蜜的口头保证下，她也相信了那张被画的圆圆的大大的饼。</p>\n<h4 id=\"3-结语\"><a class=\"markdownIt-Anchor\" href=\"#3-结语\">#</a> 3. 结语</h4>\n<p>其实看完电影之后，我最大的感触就是人心不足蛇吞象，人的欲望是不断增长的，一旦开始就无法停下，这也导致了阿天的家破人亡，他最大的弱点就是贪心，这也是人这种生物的共性，我也同样如此，我从来不认为我是一个高尚的人，我同样自私且自利，但人要懂得控制自己的欲望，如果被欲望击垮，那就会堕入无边的深渊，再也无法上岸.</p>\n<p>我从电影中所获取的最大收获即是人不能太过贪心，天下也没有那么多好事等着你去做，真正的好事早就被那些有背景的人瓜分了，哪还轮的到你，自己要擦亮眼睛，才能不被骗。</p>\n",
            "tags": [
                "原创",
                "记录"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Linux2023-9-15%E4%BD%9C%E4%B8%9A/",
            "url": "http://yunyat.cloud/linux/Linux2023-9-15%E4%BD%9C%E4%B8%9A/",
            "title": "Linux2023.9.15作业",
            "date_published": "2023-09-15T06:18:57.000Z",
            "content_html": "<blockquote>\n<p>题目要求：</p>\n<p>1、创建用户和用户组</p>\n<p>请按照以下要求创建用户、用户组：</p>\n<p>新建一个名为 adminuser 的组，组 id 为 40000</p>\n<p>新建一个名为 natasha 的用户，并将 adminuser 作为其附属组</p>\n<p>新建一个名为 harry 的用户，并将 adminuser 作为其附属组</p>\n<p>新建一个名为 sarah 的用户，其不属于 adminuser 组，并将其 shell 设置为不可登陆 shell</p>\n<p>natasha、harry 和 sarah 三个用户的密码均设置为 glegunge</p>\n<p>2、复制文件 /etc/fstab 到 /var/tmp 目录下，并按照以下要求配置 /var/tmp/fstab 文件的权限:</p>\n<p>该文件的所属人为 root</p>\n<p>该文件的所属组为 root</p>\n<p>该文件对任何人均没有执行权限</p>\n<p>用户 natasha 对该文件有读和写的权限</p>\n<p>用户 harry 对该文件既不能读也不能写</p>\n<p>所有其他用户（包括当前已有用户及未来创建的用户）对该文件都有读的权限</p>\n<p>3、打包文件</p>\n<p>请对 /etc/sysconfig 目录进行打包并用 bzip2 压缩，生成的文件保存为 /root/sysconfig.tar.bz2</p>\n<p>4、创建一个大小为 500M 的分区，永久挂载到 /test 目录下</p>\n</blockquote>\n<hr>\n<h5 id=\"创建用户和用户组\"><a class=\"markdownIt-Anchor\" href=\"#创建用户和用户组\">#</a> 创建用户和用户组</h5>\n<ol>\n<li>新建一个名为 adminuser 的组，组 id 为 40000</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groupadd</span> <span class=\"token parameter variable\">-g</span> <span class=\"token number\">40000</span> adminuser</pre></td></tr></table></figure><ol start=\"2\">\n<li>新建一个名为 natasha 的用户，并将 adminuser 作为其附属组</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-G</span> adminuser natasha</pre></td></tr></table></figure><ol start=\"3\">\n<li>新建一个名为 harry 的用户，并将 adminuser 作为其附属组</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-G</span> adminuser harry</pre></td></tr></table></figure><ol start=\"4\">\n<li>新建一个名为 sarah 的用户，其不属于 adminuser 组，并将其 shell 设置为不可登陆 shell</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-s</span> /usr/sbin/nologin sarah</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsWAf.png\" alt=\"pPWsWAf.png\"></p>\n<ol start=\"5\">\n<li>natasha、harry 和 sarah 三个用户的密码均设置为 glegunge</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsfN8.png\" alt=\"pPWsfN8.png\"></p>\n<p>测试：</p>\n<p>查看组 id 及附属组</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWs2HP.png\" alt=\"pPWs2HP.png\"></p>\n<p>测试 sarah 的 shell 登录</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsqH0.png\" alt=\"pPWsqH0.png\"></p>\n<h5 id=\"复制文件etcfstab到vartmp目录下并按照以下要求配置vartmpfstab文件的权限\"><a class=\"markdownIt-Anchor\" href=\"#复制文件etcfstab到vartmp目录下并按照以下要求配置vartmpfstab文件的权限\">#</a> 复制文件 /etc/fstab 到 /var/tmp 目录下，并按照以下要求配置 /var/tmp/fstab 文件的权限:</h5>\n<p>先复制</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /etc/fstab /var/tmp</pre></td></tr></table></figure><ol>\n<li>该文件的所属人为 root，该文件的所属组为 root</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW6pi8.png\" alt=\"pPW6pi8.png\"></p>\n<ol start=\"2\">\n<li>该文件对任何人均没有执行权限，用户 natasha 对该文件有读和写的权限，用户 harry 对该文件既不能读也不能写</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW69JS.png\" alt=\"pPW69JS.png\"></p>\n<ol start=\"3\">\n<li>所有其他用户（包括当前已有用户及未来创建的用户）对该文件都有读的权限</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWyxdP.png\" alt=\"pPWyxdP.png\"></p>\n<h5 id=\"打包文件\"><a class=\"markdownIt-Anchor\" href=\"#打包文件\">#</a> 打包文件</h5>\n<ol>\n<li>请对 /etc/sysconfig 目录进行打包并用 bzip2 压缩，生成的文件保存为 /root/sysconfig.tar.bz2</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWyzIf.png\" alt=\"pPWyzIf.png\"></p>\n<h5 id=\"创建分区\"><a class=\"markdownIt-Anchor\" href=\"#创建分区\">#</a> 创建分区</h5>\n<ol>\n<li>创建一个大小为 500M 的分区</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW26T1.png\" alt=\"pPW26T1.png\"></p>\n<ol start=\"2\">\n<li>使用 mkfs 将 sda4 格式化为 ext4 文件系统</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2wSU.png\" alt=\"pPW2wSU.png\"></p>\n<ol start=\"3\">\n<li>将分区挂载到 /test 目录，如果没有请自行创建</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2aWT.png\" alt=\"pPW2aWT.png\"></p>\n<ol start=\"4\">\n<li>使用开机自启实现永久挂载目录</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2UYV.png\" alt=\"pPW2UYV.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Linux"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Docker之nginx的负载均衡",
            "date_published": "2023-09-12T10:49:35.000Z",
            "content_html": "<h4 id=\"使用docker部署nginx的负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#使用docker部署nginx的负载均衡\">#</a> 使用 docker 部署 nginx 的负载均衡</h4>\n<ol>\n<li>下载 nginx 和 tomcat 镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull nginx <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull tomcat</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Vg10.png\" alt=\"pP2Vg10.png\"></p>\n<ol start=\"2\">\n<li>新建 tomcat 网页</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www1/ROOT <span class=\"token punctuation\">;</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www2/ROOT</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VhBF.png\" alt=\"pP2VhBF.png\"></p>\n<ol start=\"3\">\n<li>进入刚创建的 www1/ROOT 目录里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root/www1/ROOT</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 创建 index.jsp 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> index.jsp</pre></td></tr></table></figure><p>输入以下内容：</p>\n<pre><code class=\"language-jsp\">&lt;html&gt;\n    &lt;head&gt;\n           &lt;title&gt;Tomcat1&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\t\n           &lt;%\n                  out.println(&quot;this is Tomcat1&quot;);\n           %&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VoN9.png\" alt=\"pP2VoN9.png\"></p>\n<p>在 /root/www2/ROOT/ 下同样创建 index.jsp 文件，输入内容同上，将 Tomcat1 改为 Tomcat2 即可</p>\n<ol start=\"5\">\n<li>运行 tomcat1 和 tomcat2 ，并且将 docker 的 /root/www1 和 /root/www2 与容器的 /usr/local/webapps 目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32769</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www1:/usr/local/tomcat/webapps tomcat:latest <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat2 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32770</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www2:/usr/local/tomcat/webapps tomcat:latest</pre></td></tr></table></figure><p>注：上面是一条命令</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Z3uT.png\" alt=\"pP2Z3uT.png\"></p>\n<ol start=\"6\">\n<li>在浏览器分别输入以下语句：</li>\n</ol>\n<blockquote>\n<p>你的 ip:32769</p>\n<p>你的 ip:32770</p>\n<p>示例：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc2OQ==\">tomcat1</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MA==\">tomcat2</span></p>\n</blockquote>\n<ol start=\"7\">\n<li>运行 nginx</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> nginx <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25567</span>:80 nginx:latest</pre></td></tr></table></figure><ol start=\"8\">\n<li>在 /root 目录下使用 vim 创建 nginx.conf 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> nginx.conf</pre></td></tr></table></figure><p>填入以下内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user  nginx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>error_log  /var/log/nginx/error.log warn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid        /var/run/nginx.pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    include       /etc/nginx/mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    log_format  main  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    access_log  /var/log/nginx/access.log  main<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sendfile        on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">#tcp_nopush     on;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#gzip  on;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    include /etc/nginx/conf.d/*.conf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    upstream tomcat <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32772<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32773<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        server_name <span class=\"token number\">192.168</span>.100.100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                proxy_pass http://tomcat<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 server 后面的 ip 改为你的 ip 加端口号，server_name 同理</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2eKde.png\" alt=\"pP2eKde.png\"></p>\n<ol start=\"9\">\n<li>将 nginx.conf 文件 cp 到你的容器里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> nginx.conf e11dd26a3930:/etc/nginx/nginx.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 记住，容器 id 改为自己的 nginx 容器的 id</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MeET.png\" alt=\"pP2MeET.png\"></p>\n<ol start=\"10\">\n<li>重启 nginx 容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> restart 你的nginx容器id</pre></td></tr></table></figure><ol start=\"11\">\n<li>浏览器访问你服务器的 ip，因为我的 80 端口被占用，所以使用 25567 代替</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MmUU.png\" alt=\"pP2MmUU.png\"></p>\n<p>刷新会在 tomcat1 和 tomcat2 切换</p>\n<p>示例：<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2Nw==\">tomcat1 or tomcat2</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "url": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "title": "harbor本地仓库搭建",
            "date_published": "2023-09-12T03:34:02.000Z",
            "content_html": "<h4 id=\"创建-harbor-仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建-harbor-仓库\">#</a> 创建 Harbor 仓库</h4>\n<ol>\n<li>访问官方网站下载官方镜像源</li>\n</ol>\n<blockquote>\n<p>官方网站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2hhcmJvci5pby8=\">Harbor (goharbor.io)</span></p>\n</blockquote>\n<ol start=\"2\">\n<li>使用 scp 将下载的官方镜像上传到服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scp <span class=\"token operator\">-</span>P 2000 <span class=\"token punctuation\">.</span>\\harbor-offline-installer-v2<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>tgz root@你服务器的ip:<span class=\"token operator\">/</span>root/</pre></td></tr></table></figure><p>注：使用 -P 参数可以指定 scp 的端口号</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPg4W1U.png\" alt=\"pPg4W1U.png\"></p>\n<ol start=\"3\">\n<li>使用下面的命令解压文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> harbor-offline-installer-v2.7.3.tgz</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 更改 harbor.yml.tmep 的内容</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> harbor.yml.tmep</pre></td></tr></table></figure><p>将 hostname 修改为自己的 ip 地址，然后将 https 全部注释掉，同时也可以更改密码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgHXgP.png\" alt=\"pPgHXgP.png\"></p>\n<ol start=\"5\">\n<li>使用 yum 下载 epel-release 及 docker-compose</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release <span class=\"token punctuation\">;</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span></pre></td></tr></table></figure><p>注：由于不可抗力的原因（我服务器带不动 [倒] ），下面的所有演示都是在我室友的虚拟机上完成的</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgORaD.png\" alt=\"pPgORaD.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgO2VO.png\" alt=\"pPgO2VO.png\"></p>\n<ol start=\"6\">\n<li>安装 harbor</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> ./harbor.yml.tmep ./harbor.yml <span class=\"token punctuation\">;</span> ./install.sh</pre></td></tr></table></figure><p>注：安装之前请先将 harbor.yml.tmep 文件改为 harbor.yml ，要不然会找不到文件</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgXj0K.png\" alt=\"pPgXj0K.png\"></p>\n<ol start=\"7\">\n<li>在浏览器中访问</li>\n</ol>\n<p>在浏览器中输入：</p>\n<blockquote>\n<p>你的 IP/harbor</p>\n<p>由于我用的是室友的电脑中的虚拟机来做的，在我电脑上是直接访问不到虚拟机里的，所以做了个 net 端口转发使我电脑能够访问，你们在自己的浏览器中就不需要输入端口号了，默认 80</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjrB6.png\" alt=\"pPgjrB6.png\"></p>\n<ol start=\"8\">\n<li>输入账号密码</li>\n</ol>\n<blockquote>\n<p>账号默认为 admin，密码默认为 Harbor12345，如果你更改了默认密码那就填你改的密码</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjXgs.png\" alt=\"pPgjXgs.png\"></p>\n<ol start=\"9\">\n<li>点击新建项目来新建一个仓库</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgvLdK.png\" alt=\"pPgvLdK.png\"></p>\n<ol start=\"10\">\n<li>修改 Docker 配置</li>\n</ol>\n<p>因为我使用的使 http 协议，而 docker 默认为 https，所以需要将本地私有仓库添加到信任仓库中</p>\n<p>使用下面的命令修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/docker/daemon.json</pre></td></tr></table></figure><p>注意：你在配置 daemon 文件的时候，除了最后一个键值对后面不用英文逗号，其他都要</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRpcxe.png\" alt=\"pPRpcxe.png\"></p>\n<ol start=\"11\">\n<li>刷新刚刚编辑的 daemon.json 文件并重启 docker</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon.json <span class=\"token punctuation\">;</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>给要推送的镜像添加 tag 标签</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> tag centos:centos7 <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 注：ip 后面的为你在仓库命名空间创建的仓库名</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAdS0.png\" alt=\"pPRAdS0.png\"></p>\n<ol start=\"13\">\n<li>在终端登录至搭建的 harbor 私有仓库</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> login http://192.168.100.10 <span class=\"token parameter variable\">-u</span> admin <span class=\"token parameter variable\">-p</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAUWq.png\" alt=\"pPRAUWq.png\"></p>\n<ol start=\"14\">\n<li>使用 push 命令上传镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> push <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRANYn.png\" alt=\"pPRANYn.png\"></p>\n<ol start=\"15\">\n<li>从浏览器进入 harbor 仓库管理界面</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAwlV.png\" alt=\"pPRAwlV.png\"></p>\n<p>可以看到，已经上传到 zero 仓库了</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker",
                "harbor"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "title": "Docker构建镜像及使用的笔记",
            "date_published": "2023-09-11T13:52:29.000Z",
            "content_html": "<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>本文并不记录详细过程，只是为了记录一下大概构建及使用的经过（还有踩坑记录，重点！！！）</p>\n<hr>\n<h4 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h4>\n<p>由于一些特殊原因，我需要一个包含 nodejs 的基础镜像来构建一个新的镜像，但是由于各种原因，没能下成，并且我也不知道哪些镜像中含有 nodejs，所以没办法，只能自己构建一个含有 nodejs 的镜像，为了使镜像最小化，我选择了 alpine 发行的 Linux 镜像</p>\n<p>直接 docker pull alpine ，没毛病，下好之后准备 run 的，结果发现根本没有 bash 这个命令，查过资料才发现，它还是用的 sh 。。。。</p>\n<p>好了，重新 run ， <code>docker run -it alpine /bin/sh</code>  .</p>\n<p>这下没毛病了，进了终端，然后竟然发现无从下手！！！（毕竟 alpine 跟 centos 不一样），一开始用的 yum ，结果直接 not found ，，查了资料发现，这玩意儿连 yum 都没有。。只能用 apk ，不愧是最小的 Linux .</p>\n<p>在用 apk 将 nodejs 下好后，直接构建，然后尼玛又少了 npm ，淦！</p>\n<p>同样的方法，用 apk 下好之后，构建！！！不出意外的话又出意外了，构建的时候有一步比较吃 cpu 资源 ，我用服务器构建了两次，</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Win%E8%87%B3Linux%E7%9A%84%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/",
            "url": "http://yunyat.cloud/linux/Win%E8%87%B3Linux%E7%9A%84%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/",
            "title": "Win至Linux的免密登录",
            "date_published": "2023-09-09T15:30:41.000Z",
            "content_html": "<h4 id=\"配置-windows-端\"><a class=\"markdownIt-Anchor\" href=\"#配置-windows-端\">#</a> 配置 Windows 端</h4>\n<ol>\n<li>先在 Windows 下生成公钥文件</li>\n</ol>\n<p>使用 win+R 打开运行对话框，输入 cmd 打开命令提示符（或者随便打开一个文件夹 --&gt; 右键 --&gt; 在终端中打开）</p>\n<p>输入以下命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token operator\">-</span>t rsa</pre></td></tr></table></figure><p>之后无脑回车确定</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcuprT.png\" alt=\"powershell1\"></p>\n<ol start=\"2\">\n<li>找到你默认存放公钥的位置</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcuPZF.png\" alt=\"powershell2\"></p>\n<ol start=\"3\">\n<li>将你生成的公钥文件传到 Linux 服务器上</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scp 你公钥存放的位置<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh/id_rsa<span class=\"token punctuation\">.</span>pub  你要登录的用户名@你服务器的ip:~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh</pre></td></tr></table></figure><p>上传完毕之后 Windows 端的配置就完成了</p>\n<h4 id=\"配置-linux-端\"><a class=\"markdownIt-Anchor\" href=\"#配置-linux-端\">#</a> 配置 Linux 端</h4>\n<ol>\n<li>先登录到 Linux 服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh root@你服务器的ip</pre></td></tr></table></figure><p>在输入密码后就能登录上去</p>\n<ol start=\"2\">\n<li>在当前用户家目录下找到  <code>.ssh</code>  文件夹</li>\n</ol>\n<p>使用以下命令查看：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><p>然后使用以下命令将  <code>id_rsa.pub</code>  文件的内容追加到  <code>authorized_keys</code>  中</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> id_rsa.pub <span class=\"token operator\">>></span> authorized_keys</pre></td></tr></table></figure><ol start=\"3\">\n<li>然后用  <code>chmod</code>  修改文件的权限</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> .ssh/authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> .ssh</pre></td></tr></table></figure><h5 id=\"修改ssh的配置文件\"><a class=\"markdownIt-Anchor\" href=\"#修改ssh的配置文件\">#</a> 修改 SSH 的配置文件</h5>\n<ol>\n<li>使用以下命令进入  <code>ssh</code>  的配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/ssh/sshd_config</pre></td></tr></table></figure><ol start=\"2\">\n<li>找到下面的三句不被注释掉，没有直接添加</li>\n</ol>\n<p>温馨提示：可以使用  <code>斜杠“/”</code>  来快速查找</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RSAAuthentication <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PubkeyAuthentication <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AuthorizedKeysFile .ssh/authorized_keys</pre></td></tr></table></figure><p>然后  <code>:wq</code>  保存并退出</p>\n<ol start=\"3\">\n<li>使用以下命令重启 SSH 服务</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> sshd restart</pre></td></tr></table></figure><h4 id=\"测试免密登录\"><a class=\"markdownIt-Anchor\" href=\"#测试免密登录\">#</a> 测试免密登录</h4>\n<p>在 Windows 的 power shell 上输入以下命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh root@你服务器的ip</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcQcQI.png\" alt=\"powershell3\"></p>\n<p>可以看到，直接连上了服务器，到这你的免密登录就成功了</p>\n<h4 id=\"使用指定端口登录\"><a class=\"markdownIt-Anchor\" href=\"#使用指定端口登录\">#</a> 使用指定端口登录</h4>\n<p>一般来说，为了服务器的安全起见，我们都会更改 SSH 的默认登录端口</p>\n<p>可以在服务器 ip 后加 -p 参数来指定要使用的端口</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "电脑技术",
                "SSH"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/%E5%8F%AF%E9%81%93%E4%BA%91%E6%A1%8C%E9%9D%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/linux/%E5%8F%AF%E9%81%93%E4%BA%91%E6%A1%8C%E9%9D%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/",
            "title": "可道云桌面搭建笔记",
            "date_published": "2023-09-08T09:10:26.000Z",
            "content_html": "<h4 id=\"可道云桌面搭建\"><a class=\"markdownIt-Anchor\" href=\"#可道云桌面搭建\">#</a> 可道云桌面搭建</h4>\n<ol>\n<li>先创建 dockerfile-two 及 kod-two 文件夹（因为我之前搭过一遍，但是忘记截图了，所以重搭一遍，防止文件名重复所以用 -two ）</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> dockerfile-two/kod-two</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6lYIe.png\" alt=\"pP6lYIe.png\"></p>\n<ol start=\"2\">\n<li>使用 scp 将所必要的文件传到服务器上（请务必不要照抄我的命令）</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> .<span class=\"token punctuation\">\\</span>source<span class=\"token punctuation\">\\</span>* root@8.222.153.91:/root/dockerfile-two/kod-two/</pre></td></tr></table></figure><ul>\n<li>实在不会上传那就用下面的这条命令吧（复制粘贴总会吧？）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-f</span> source/* ./ <span class=\"token punctuation\">;</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> sour*</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP61SeK.png\" alt=\"pP61SeK.png\"></p>\n<ol start=\"3\">\n<li>使用 vim 创建 dockerfile 文件并填入以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> dockerfile</pre></td></tr></table></figure><pre><code>FROM centos:centos7    # 改为你的基础镜像\n\nADD Centos-7.repo /etc/yum.repos.d/\n\nADD epel-7.repo /etc/yum.repos.d/\n\nRUN yum -y install nginx php-fpm php-gd php-mbstring unzip\n\nRUN sed -i '/^user/c user=nginx' /etc/php-fpm.d/www.conf\n\nRUN sed -i '/^group/c group=nginx' /etc/php-fpm.d/www.conf\n\nCOPY nginx.conf /etc/nginx/nginx.conf\n\nRUN mkdir /code\n\nWORKDIR /code/\n\nCOPY kodexplorer4.40.zip .\n\nRUN unzip kodexplorer4.40.zip\n\nRUN chown -R nginx.nginx .\n\nADD init.sh /init.sh\n\nEXPOSE 80\n\nENTRYPOINT [&quot;/bin/bash&quot;,&quot;/init.sh&quot;]\n</code></pre>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68PxA.png\" alt=\"pP68PxA.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68krt.png\" alt=\"pP68krt.png\"></p>\n<ol start=\"4\">\n<li>然后用 vim 创建一个名为 <span class=\"exturl\" data-url=\"aHR0cDovL2luaXQuc2g=\">init.sh</span> 的 shell 脚本并写入以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> init.sh</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>php-fpm <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">>></span> /etc/nginx/nginx.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nginx <span class=\"token parameter variable\">-g</span> <span class=\"token string\">'daemon off;'</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68UG4.png\" alt=\"pP68UG4.png\"></p>\n<ol start=\"5\">\n<li>之后执行以下命令</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> kod:v1 <span class=\"token builtin class-name\">.</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25567</span>:80 kod:v1 <span class=\"token string\">'#testtest'</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68sZ6.png\" alt=\"pP68sZ6.png\"></p>\n<ol start=\"6\">\n<li>\n<p>在浏览器访问</p>\n<pre><code>你的IP:25567/kodexplorer4.40/index.php\n</code></pre>\n</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68ydK.png\" alt=\"pP68ydK.png\"></p>\n<hr>\n<p>示例：<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2OS9rb2RleHBsb3JlcjQuNDAvaW5kZXgucGhwP3VzZXIvbG9naW4=\">可道云桌面</span></p>\n<p>END</p>\n",
            "tags": [
                "原创",
                "可道云"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "title": "Docker的使用-叁",
            "date_published": "2023-09-08T07:00:14.000Z",
            "content_html": "<h4 id=\"dockerfile的使用\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的使用\">#</a> Dockerfile 的使用</h4>\n<p>使用 Dockerfile 部署扫雷 web 程序</p>\n<ol>\n<li>\n<p>先将必要的文件上传至服务器，然后在当前目录创建 init.sh 和 dockerfile 文件</p>\n<p>友情提示：可以使用 scp 上传</p>\n<ul>\n<li>scp 不会用那就用下面的这条命令，我把资源都打包到我服务器上了，可以直接下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-f</span> source/* ./ <span class=\"token punctuation\">;</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> sour*</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6Celd.png\" alt=\"pP6Celd.png\"></p>\n</li>\n<li>\n<p>通过 vim 向 dockerfile  <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbml0LTk5MGcuc2g=\">及 init.sh</span> 写入以下内容：</p>\n</li>\n</ol>\n<blockquote>\n<p>请不要照抄我的配置，每句后面都有注释，稍微动一下脑子就行了，要不然寄</p>\n</blockquote>\n<p>使用 dockerfile 之前，你首先要确保你的当前目录下有以下几个文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><blockquote>\n<p>Centos-7.repo</p>\n<p>epel-7.repo</p>\n<p>saolei.zip</p>\n<p>dockerfile</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2luaXQuc2g=\">init.sh</span></p>\n</blockquote>\n<p>你还要确保你的本地有 centos:centos7 这个镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcdAF1.png\" alt=\"pPcdAF1.png\"></p>\n<p>没有怎么办？凉拌！！！</p>\n<p>用下面这条命令下载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull centos:centos7</pre></td></tr></table></figure><p>要是还报错，那你就自己百度去吧，问题奇奇怪怪的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos:centos7    <span class=\"token comment\"># 这是你要使用的基础镜像，记住改为自己的基础镜像 (如果你使用了上面的 pull 下载了镜像，就不需要改)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ADD Centos-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 这条命令的意思是添加 Centos7.repo 文件到容器的 /etc/yum.repos.d 下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ADD epel-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 同上</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>RUN yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> tomcat <span class=\"token function\">unzip</span> <span class=\"token function\">curl</span>    <span class=\"token comment\"># 运行 yum 命令安装 tomcat 、 unzip 、 curl ，其中 -y 表示安装过程中的选择全部为 yes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>WORKDIR /var/lib/tomcat/webapps/    <span class=\"token comment\"># 指定工作目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>RUN <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/saolei.zip    <span class=\"token comment\"># 从指定站点下载 saolei.zip 资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>RUN <span class=\"token function\">unzip</span> saolei.zip    <span class=\"token comment\"># 解压 saolei.zip 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>RUN <span class=\"token function\">mv</span> saolei ROOT     <span class=\"token comment\"># 将 saolei 移动至 ROOT 文件或目录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ADD init.sh /init.sh    <span class=\"token comment\"># 添加 init.sh 至 /init.sh</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>EXPOSE <span class=\"token number\">8080</span>    <span class=\"token comment\"># 声明 8080 端口 ，此时并没有开放此端口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>CMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span>,<span class=\"token string\">\"/init.sh\"</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 在容器启动时运行 /init.sh 脚本</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/libexec/tomcat/server start    <span class=\"token comment\"># 在指定目录启动 tomcat server 服务器</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>直接构建镜像</li>\n</ol>\n<blockquote>\n<p>docker build -t saolei:v1 .</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PyUf.png\" alt=\"pP6PyUf.png\"></p>\n<ol start=\"4\">\n<li>运行容器</li>\n</ol>\n<blockquote>\n<p>docker run -itd -P saolei:v1</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PWvj.png\" alt=\"pP6PWvj.png\"></p>\n<ol start=\"5\">\n<li>在浏览器通过 ” 你的 IP“: 开放的随机端口 /saolei.jsp 访问</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PjM9.png\" alt=\"pP6PjM9.png\"></p>\n<hr>\n<p>示例: <span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MC9zYW9sZWkuanNwP2xldmVsPTgmYW1wO2xlaU51bT04JmFtcDtzaXplPTg=\">扫雷</span></p>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "url": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "title": "Docker的使用-贰",
            "date_published": "2023-09-05T10:57:03.000Z",
            "content_html": "<h4 id=\"docker容器的应用\"><a class=\"markdownIt-Anchor\" href=\"#docker容器的应用\">#</a> Docker 容器的应用</h4>\n<blockquote>\n<p>前言：使用 Docker 部署 nginx 站点实现外网访问</p>\n</blockquote>\n<p>1. 先创建一个 nginx 站点</p>\n<blockquote>\n<p><code>docker run --name nginx-one -itd -P nginx:latest</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFU6s.png\" alt=\"nginx1\"></p>\n<p>2. 将本地的 <code>./nginx/www</code> 、 <code>./nginx/logs</code> 、 <code>./nginx/conf</code>  分别挂载到容器的 <code>/usr/share/nginx/html</code> 、 <code>/var/log/nginx</code> 、 <code>/etc/nginx/nginx.conf</code>  并且将主机端口 25568 映射到容器的 80 端口</p>\n<blockquote>\n<p><code>docker run -itd -p 25568:80 --name nginx-two -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/logs:/var/log/nginx -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf nginx:latest</code></p>\n<p>注意：挂载之前要用 <code>docker cp f9226f7ac7f7:/etc/nginx/nginx.conf ./nginx/conf/</code>  命令将 <code>nginx.conf</code>  文件 <code>copy</code>  到本地，要不然会报挂载错误，使用本命令时注意将容器 ID 改为自己的</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFwmq.png\" alt=\"nginx2\"></p>\n<p>3. 在本地的 <code>/root/nginx/www</code>  文件夹下创建 <code>index.html</code></p>\n<blockquote>\n<p><code>cd /root/nginx/www; vim index.html</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFaXn.png\" alt=\"nginx3\"></p>\n<p>4. 直接在浏览器访问你服务器的 ip 加之前指定的端口 (由于我服务器防火墙没开放 20000 端口，所以用 25568 代替一下)</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFNlj.png\" alt=\"nginx4\"></p>\n<blockquote>\n<p>点击连接访问<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2OA==\"> nginx 站点</span></p>\n</blockquote>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "title": "Docker的使用-壹",
            "date_published": "2023-09-05T01:14:52.000Z",
            "content_html": "<h4 id=\"docker使用\"><a class=\"markdownIt-Anchor\" href=\"#docker使用\">#</a> Docker 使用</h4>\n<ul>\n<li>在 docker 容器内运行应用程序</li>\n</ul>\n<blockquote>\n<p><code>docker run ubuntu:15.10 /bin/echo &quot;hello world&quot;</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsklv9.png\" alt=\"docker使用1\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>docker</code> :Docker 的二进制执行文件</li>\n<li><code>run</code> : 与 Docker 组合运行一个容器</li>\n<li><code>ubuntu:15.10</code> : 要运行的镜像，本地没有就会从镜像仓库下载</li>\n<li><code>/bin/echo &quot;hello world&quot;</code> : 在启动的容器里执行 <code>echo</code>  命令</li>\n</ol>\n<ul>\n<li>与 docker 容器进行交互</li>\n</ul>\n<blockquote>\n<p><code>docker run -t -i centos:centos7 /bin/bash</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskQgJ.png\" alt=\"docker使用2\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>-t</code> : 在新的容器里指定一个终端</li>\n<li><code>-i</code> : 允许与指定的终端进行交互</li>\n</ol>\n<p>注意：可以用 <code>exit</code>  退出伪终端</p>\n<ul>\n<li>通过 ps 查看正在运行的容器</li>\n</ul>\n<blockquote>\n<p><code>docker ps</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskM34.png\" alt=\"docker的使用3\"></p>\n<p>参数解析：</p>\n<ol>\n<li>\n<p><code>CONTAINER ID</code> : 容器 ID</p>\n</li>\n<li>\n<p><code>IMAGE</code> : 使用的镜像</p>\n</li>\n<li>\n<p><code>COMMAND</code> : 启动镜像时运行的命令</p>\n</li>\n<li>\n<p><code>CREATED</code> : 容器的创建时间</p>\n</li>\n<li>\n<p><code>STATUS</code> : 容器的状态 （容器的七种状态：</p>\n<p>1. <code>created</code>  已创建</p>\n<p>2. <code>restaring</code>  重启中</p>\n<p>3. <code>running</code>  或 <code>Up</code>  运行中</p>\n<p>4. <code>removing </code> 迁移中</p>\n<p>5. <code>paused </code> 暂停</p>\n<p>6. <code>exited </code> 停止</p>\n<p>7. <code>dead </code> 死亡）</p>\n</li>\n<li>\n<p><code>PORTS</code> : 容器的端口信息和使用的连接类型（ <code>TCP/UDP</code> ）</p>\n</li>\n<li>\n<p><code>NAMES</code> : 自动分配的容器名称</p>\n</li>\n</ol>\n<h5 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h5>\n<ol>\n<li><code>docker images</code>         \t列出本地主机上的镜像</li>\n<li><code>docker search centos[:7] </code>       \t 搜索镜像</li>\n<li><code>docker pull centos[:centos7] </code>       \t 下载镜像</li>\n<li><code>docker tag centos:centos7 mycentos:centos7 </code>        \t为镜像添加标签，其中分号前为镜像类型，分号后为镜像版本</li>\n<li><code>docker history centos:centos7 </code>        \t查看镜像的构建历史信息</li>\n<li><code>docker rmi centos:centos7</code>         \t删除镜像（可以使用 <code>-f</code>  强制删除，在删除使用 tag 标签标记的镜像时可以不用加 <code>-f</code>  参数）</li>\n<li><code>docker image prune [-a] [-f]</code>         清理镜像，加 <code>-a</code>  参数即删除所有无用的镜像，不仅仅是临时镜像  <code>-f</code>  参数即可强制删除镜像而不提示</li>\n<li><code>docker image save centos:centos7 &gt; ./my-centos7.tar.gz </code>        导出镜像到当前目录，格式为一个压缩包（可以自行选择导出的位置）</li>\n<li><code>docker image load [-i] [-q] ./my-centos7.tar.gz</code>         将 centos7 的镜像压缩包导入， <code>-i</code>  参数是指定导入的文件， <code>-q</code>  参数是精简输出信息</li>\n<li><code>docker image inspect [-f] &#123; &#123;&quot;.Os&quot;&#125; &#125; centos:centos7</code>         查看镜像信息，可以使用 <code>-f</code>  参数获取指定信息</li>\n<li><code>docker restart $(docker ps -a -q)</code>  重启所有 docker 容器</li>\n</ol>\n<p>注意：[ ] 里的为可选内容，选择具体版本</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "title": "Docker部署",
            "date_published": "2023-09-04T08:53:57.000Z",
            "content_html": "<h3 id=\"docker部署\"><a class=\"markdownIt-Anchor\" href=\"#docker部署\">#</a> Docker 部署</h3>\n<blockquote>\n<p>前言：部署 docker 要先确保 yum 源保持最新</p>\n</blockquote>\n<hr>\n<p>1. 先安装运行 docker 所必要的工具包</p>\n<blockquote>\n<p><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVkQJ.png\" alt=\"docker1\"></p>\n<p>2. 添加 docker 源</p>\n<blockquote>\n<p><code>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrViz4.png\" alt=\"pPrViz4.png\"></p>\n<p>3. 修改 docker 源为阿里源</p>\n<blockquote>\n<p><code>sed -i 's+download.docker.com+mirrors.aliyun.com/docker-ce+' /etc/yum.repos.d/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVPWF.png\" alt=\"pPrVPWF.png\"></p>\n<p>4. 更新 docker 源并安装 docker</p>\n<blockquote>\n<p>更新源  <code>yum makecache fast</code></p>\n<p>安装  <code>yum  -y install docker-ce</code></p>\n<p>注意：在 Centos8 中本命令不适用，将 fast 去掉即可</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrV9iT.png\" alt=\"pPrV9iT.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVSoV.png\" alt=\"pPrVSoV.png\"></p>\n<p>5. 重启 docker 服务并设置下次启动生效</p>\n<blockquote>\n<p>重新启动  <code>systemctl  restart  docker</code></p>\n<p>设置下次启动生效  <code>systemctl  enable  docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVCJU.png\" alt=\"pPrVCJU.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVAy9.png\" alt=\"pPrVAy9.png\"></p>\n<p>6. 配置镜像加速器</p>\n<blockquote>\n<p>用 vim 创建 <code>daemon.json</code>  文件</p>\n<p><code>vim /etc/docker/daemon.json</code></p>\n<p>写入以下内容:</p>\n<pre><code>&#123;\n&quot;registry-mirrors&quot;: [&quot;https://14lrk6zd.mirror.aliyuncs.com&quot;]\n&#125;\n</code></pre>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVELR.png\" alt=\"pPrVELR.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVZe1.png\" alt=\"pPrVZe1.png\"></p>\n<p>7. 重新加载并重启 docker</p>\n<blockquote>\n<p>重新加载  <code>systemctl  daemon-reload</code></p>\n<p>重启  <code>systemctl restart docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVedx.png\" alt=\"pPrVedx.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVmo6.png\" alt=\"pPrVmo6.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/Java-lambda%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "url": "http://yunyat.cloud/MyCodingBook/java/Java-lambda%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "title": "Java-lambda的方法引用",
            "date_published": "2023-07-11T07:43:23.000Z",
            "content_html": "<h5 id=\"方法引用\"><a class=\"markdownIt-Anchor\" href=\"#方法引用\">#</a> 方法引用</h5>\n<p>方法引用有四种引用方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">语法</th>\n<th style=\"text-align:center\">对应的 lambda 表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对象引用非静态方法</td>\n<td style=\"text-align:center\">对象名 : : 实例方法名</td>\n<td style=\"text-align:center\">（ i ) -&gt; 对象名。实例方法名 (i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用静态方法</td>\n<td style=\"text-align:center\">类名 : : 静态方法名 引用</td>\n<td style=\"text-align:center\">(i) -&gt; 类名。静态方法名 ( i )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用非静态方法</td>\n<td style=\"text-align:center\">类名 : : 实例方法名 引用</td>\n<td style=\"text-align:center\">(i) -&gt; 类名。实例方法名 ( i )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用构造方法</td>\n<td style=\"text-align:center\">类名 : : new\t// 构造引用</td>\n<td style=\"text-align:center\">(i) -&gt; new 类名 ( i )</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>千万注意，要引用的方法的形参和返回值一定要跟接口的一样，要不然找不到这个方法的</strong></li>\n</ul>\n<p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>对象名::实例方法名</code> 引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先定义一个接口，可以接受泛型，接口必须是函数式接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 形参为 Optional，Optional 是一个可以存储 null 值的容器对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 要引用的方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 通过 对象名：：方法名 引用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 方法接收任意类型的对象，new 一个本类对象，引用本类的 m 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> simple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//of 方法将非 null 值转换为 Optional 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        simple<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 对应的 lambda 表达式，结果一样</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Simple1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> simple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        simple1<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::静态方法名</code> 引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 还是先定义一个接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Integer</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 然后定义一个实现类，这个类里面就是要引用的静态方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 静态方法可以直接通过类名引用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 对应的 lambda 表达式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple22 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple22<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::实例方法名</code> 引用</p>\n<p>只有接口中有两个及以上形参，且第一个参数是调用者，其他参数是被调用者才能使用此类型引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先定义一个接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main2</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> i <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 链式调用将字符串拼接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 花里胡哨的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 对应的 lambda 方式没整出来。。。</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::new</code>  引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将上面的代码小改一手</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple4</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 返回值为实现接口的类，参数就是实现类的构造方法参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Main2</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//simple.test 返回的其实就是一个实现类对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "lambda表达式"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/maven%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/linux/Versioning/maven%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Maven的使用",
            "date_published": "2023-07-08T15:32:50.000Z",
            "content_html": "<p>maven 的项目结构</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgiQts.png\" alt=\"pCgiQts.png\"></p>\n<ul>\n<li>main\t-- 项目的主要代码和资源\n<ul>\n<li>java\t-- 项目的源代码</li>\n<li>resources\t-- 项目的资源</li>\n</ul>\n</li>\n<li>test\t-- 测试项目代码，目录相当于 JUnit 的测试代码的目录\n<ul>\n<li>java\t-- 所有的单元测试.java 文件，JUnit 测试类等</li>\n<li>resources\t-- 项目测试的资源，spring，hibernate 的配置文件</li>\n</ul>\n</li>\n<li>target\t-- 项目输出位置，maven 编译后的类文件及打包文件会在此目录</li>\n<li>pom.xml\t--maven 的配置文件</li>\n</ul>\n<h4 id=\"pom基础标签\"><a class=\"markdownIt-Anchor\" href=\"#pom基础标签\">#</a> pom 基础标签</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- pom 版本 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>fun.zero.li<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 域名（项目组的唯一标识） --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>MavenWSM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 项目的唯一 id / 模块名 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 项目当前版本 SNAPSHOT (快速开发) --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- groupId  artifactId  version: 也决定了项目在打包 / 发布文件的样式 / 地址：本地仓库下 /fun/zero/MavenWSM/1.0-SNAPSHOT/MavenWSM-1.0-SNAPSHOT.jar --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>WSM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>    <span class=\"token comment\">&lt;!-- 项目别名 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 项目打包产生的工件类型 有 jar、war、ear、pom --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Jar: 一般公司自己制作，方便开发调用的组件 Jar...     war: 项目打包成 war 可以部署至服务器中运行... 的格式；这里不是 web 工程所以不需要 war jar 即可～--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>    <span class=\"token comment\">&lt;!-- 给 pom 定义的一些常量 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 指定项目使用的 jdk 版本 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 提供的依赖下载坐标 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 每个 dependency 都是一个 jar 坐标 1. 先从本地找 -> 2. 去私服找 -> 3. 到中央仓库下载 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- Jar 包使用的范围：默认使用范围是 compile, 则测试代码和主代码都可以使用该代码 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">&lt;!-- &lt;scope>system&lt;/scope>               &lt;systemPath> 引入 Jar 资源路径... &lt;/systemPath> --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.testng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>testng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"scopy标签\"><a class=\"markdownIt-Anchor\" href=\"#scopy标签\">#</a> scopy 标签</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">依赖范围</th>\n<th style=\"text-align:center\">对于编译 class path 有效</th>\n<th style=\"text-align:center\">对于测试 class path 有效</th>\n<th style=\"text-align:center\">对于运行 class path 有效</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">compile</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">spring-core</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">test</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Junit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">provided</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">servlet-api</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">runtime</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">JDBC 驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">system</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">本地的，maven 仓库之外的类库</td>\n</tr>\n</tbody>\n</table>\n<p>添加依赖时需要指定其依赖范围</p>\n<ul>\n<li>compile\n<ul>\n<li>编译范围，默认范围值，依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>编译范围，在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。比如：junit。</li>\n</ul>\n</li>\n<li>provided\n<ul>\n<li>编译范围，provided 依赖在编译和测试时需要，在运行时不需要，比如：servlet api 运行时被 tomcat 容器提供。(冲突反而会报错！)</li>\n</ul>\n</li>\n<li>runtime\n<ul>\n<li>编译范围，依赖在运行和测试系统的时候需要，但在编译的时候不需要。 比如：jdbc 驱动包。</li>\n</ul>\n</li>\n<li>system\n<ul>\n<li>编译范围，system 范围依赖与 provided 类似，使用本地之外的路径的 Jar 需要指定 systemPath 磁盘路径 (不推荐！)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用maven一键构建\"><a class=\"markdownIt-Anchor\" href=\"#使用maven一键构建\">#</a> 使用 maven 一键构建</h4>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgBz7V.png\" alt=\"pCgBz7V.png\"></p>\n<blockquote>\n<p>在 cmd 终端中输入 mvn -v 查看 maven 版本及是否安装正确</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg3QqH.png\" alt=\"pCg3QqH.png\">]</p>\n<blockquote>\n<p>使用 mvn compile 将项目编译为 class 文件并输出到 target 目录</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg3zTA.png\" alt=\"pCg3zTA.png\"></p>\n<blockquote>\n<p>使用 mvn clean 清理 target 目录，整个目录一起删掉</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg8Fl8.png\" alt=\"pCg8Fl8.png\"></p>\n<blockquote>\n<p>使用 mvn test 执行 src/test/java 目录下的单元测试类</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg8llT.png\" alt=\"pCg8llT.png\"></p>\n<blockquote>\n<p>使用 mvn package 将 java 工程打包为 jar 包，将 web 工程打包为 war 包</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg82tI.png\" alt=\"pCg82tI.png\"></p>\n<blockquote>\n<p>使用 mvn install 将项目打包并发布到本地仓库，本步骤包含 package 和 test</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgYGnS.png\" alt=\"pCgYGnS.png\"></p>\n<blockquote>\n<p>使用 mvn deploy 也可以将项目打包，并发布到本地仓库和私服中，包含 package、test 及 install</p>\n</blockquote>\n<blockquote>\n<p>使用 mvn clean test 会先清理再 test 测试</p>\n</blockquote>\n<blockquote>\n<p>使用 IDEA 也可以直接双击</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgY4c6.png\" alt=\"pCgY4c6.png\"></p>\n<h4 id=\"使用maven进行模块开发\"><a class=\"markdownIt-Anchor\" href=\"#使用maven进行模块开发\">#</a> 使用 maven 进行模块开发</h4>\n<ol>\n<li>\n<p>先将自己写的类用 maven 打包为 jar 并发布到本地仓库 (建议将本地仓库的存储位置改一下，具体度娘)</p>\n<blockquote>\n<pre><code>mvn install:install-file -Dfile='xxx.jar' -DgroupId='xxx.xxx.xxx' -DartifactId=xxx -Dversion='xxx.xxx.xxx' -Dpackaging=jar\n</code></pre>\n</blockquote>\n<p><code>-Dfile</code>  是 <code>jar</code>  包的路径， <code>-DgroupID</code>  是你在 <code>pom.xml</code>  中设置的组名， <code>-DartifactID</code>  是你在 <code>pom.xml</code>  中设置的项目名， <code>-Dversion</code>  是版本</p>\n<p>注意：一定要将带点的加上单引号，否则报错</p>\n</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgBQLq.png\" alt=\"pCgBQLq.png\"></p>\n<ol start=\"2\">\n<li>\n<p>然后将依赖引入即可</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgB3wV.png\" alt=\"pCgB3wV.png\"></p>\n</li>\n</ol>\n<hr>\n<p>本教程参考的一些大佬的文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9oWEU5Vg==\">http://t.csdn.cn/hXE9V</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi84MUltNg==\">http://t.csdn.cn/81Im6</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FNGVOOA==\">http://t.csdn.cn/E4eN8</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXZlbi9tYXZlbi10dXRvcmlhbC5odG1s\">Maven 教程 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "java",
                "maven"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%89%93%E6%9A%91%E5%81%87%E5%B7%A5%E7%9A%84%E7%BB%8F%E5%8E%86/",
            "url": "http://yunyat.cloud/miscellaneous/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%89%93%E6%9A%91%E5%81%87%E5%B7%A5%E7%9A%84%E7%BB%8F%E5%8E%86/",
            "title": "记一次打暑假工的经历",
            "date_published": "2023-06-28T09:26:18.000Z",
            "content_html": "<p>一切的不顺，全都来之于能力的不足</p>\n<a id=\"more\"></a>\n<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>​\t相信很多人跟我一样，都想在两个月长的暑假里去找点零活干，好为自己挣点零花钱。说实话，感觉现在的暑假工越来越不好找了，我就是被坑了很多次之后才不得不向现实妥协（没办法，我可不想在家里再玩两月，所以只能找一个勉强能看的过去的地上班）</p>\n<hr>\n<h4 id=\"经历\"><a class=\"markdownIt-Anchor\" href=\"#经历\">#</a> 经历</h4>\n<h5 id=\"第一次被骗\"><a class=\"markdownIt-Anchor\" href=\"#第一次被骗\">#</a> 第一次被骗</h5>\n<p>​\t说实话，在武汉的这三四天，我坐了最少六七十站的地铁了（属实给我整吐了），记得第一次找到的工作是去中百罗森当店员，当时我还是比较开心的，毕竟这年头找个工作不容易（因为我是不想进厂的，那死亡流水线属实干不来），但是让我万万没想到的是，已经快离校了，它给我整一个只招 22 岁的（🌿，太艹了）。没办法，只能重新找了，第二个是进厂，记得是一个格力的厂子，是通过中介找的，当时我室友是想去的，我不大愿意，当时距离离校只有一天左右，也没有其他的选择了（当天晚上我和我室友在网上疯狂投简历，真的不想进厂 [倒]），到第二天上午的时候，我们投的简历终于有人回了（当时我真的是感动的不行，因为终于不用进厂了）。当天我们就去面试了（其实是找中介），顺利通过，我在网上找的是图书仓库的分拣员，一开始的时候我还抱有很大期望，但是有句话叫希望越大失望越大，我的这次经历就很好的印证了这句话，当时那个地方有一堆人，看到这么多人的时候我就感觉有一点不妙，果然，后面那中介就让我们去里面的一个房间看去哪个地方，结果等我们过去一看，踏么的全是厂，当时我就妈卖批，就不该信这个中介的。</p>\n<h5 id=\"第二次被骗\"><a class=\"markdownIt-Anchor\" href=\"#第二次被骗\">#</a> 第二次被骗</h5>\n<p>​\t随后又有一个朋友找到了一个话务员的事，是替补习班招生的，于是我们只能从光谷广场跑到江岸区去找那个话务员，一开始面试的时候说的好好的，说有七天试用期，然后说如果试用期有人被淘汰了，其他人被录用了，被录用的不能全部一起跟着被淘汰的人一起走，我们当时也答应了，然后就是解决住的问题，当天晚上我们找了一个旅店是 30 块钱一晚上的便宜旅店，当时我们从地铁站出来之后已经是筋疲力尽了，毕竟拖着个行李跑了一整天，没累趴下已经算是万幸了，那个酒店的定位离我们出的地铁站口有个大概一公里的距离，当时我们是真的不想动了，于是便叫了一辆网约车，到达目的地定位之后打电话给那个客服，结果他告诉我定位有偏差？？？我心里直接一万头草泥马，当真是把他们祖上十八代都问候了一遍，因为那个旅馆的实际定位是在我们出地铁口不远的地方，而我们就相当与打网约车的钱白花了，淦 @#！！！！</p>\n<p>​\t在我们历经十几分钟的路程之后，终于到了旅馆里，刚准备休息下又尼玛来了一个 “好消息”，那个话务员的面试的人发消息说只要一个人，其他的人都不要。得，又被骗了呗，直接无语死，浪费我大半天时间，结果就给我来个这？</p>\n<h5 id=\"第三次被骗\"><a class=\"markdownIt-Anchor\" href=\"#第三次被骗\">#</a> 第三次被骗</h5>\n<p>​\t没办法，只能继续在网上找了，因为我们不可能在武汉逗留很长时间的，时间和精力都不允许，大概过了一个多小时，在网上投的又一个简历有了回应，是一个零食店的，从这开始就是我们不幸的开端，那个招聘的说要办一个健康证，要三十块钱，当时我们本来是不信的，但是我们也别无选择了，根本没有多余的时间去消耗，况且也只是三十块钱而已，于是我们三个人一人转了三十一共九十过去，他让我们留一个能接短信的手机号，第二天下午一两点会有短信通知我们面试地方，我们信了，其实从理性的角度来说，是不应该相信的，但是我们还是心存一丝侥幸吧，选择了相信，当时我朋友在跟我一个同学打电话，我那个同学说他被中介骗了 140 块，当时我们还使劲的嘲笑他，可是报应来得是如此之快，在第二天的时候，我们在汉口火车站地铁站里等到了一点多，但是还是没有短信来，直到两点多的时候还是没有短信来，我们终于死心了，但是我还是不甘心，因为是在 boss 直聘上找的，它那个上面是有那个注册地址的，于是我准备过去跟他们理论理论，反正也不远，当时我的想法就是，哪怕我花 50 块钱的车费，我也要过去找你理论，虽然只是被骗了 30 块钱，但是我就是不甘心。</p>\n<p>​\t说做就做，我们直接坐地铁去那个定位的地方，到的时候已经是三点多了，因为那上面只有一个比较模糊的地址，于是我们准备去问一下，结果一问才知道，根本没有这个地，虽然我们已经做好了白跑一趟的准备，可是真的没找到还是有些不爽，这真的是我一生之耻啊，我唯一被骗的钱就是这三十块，玛德。</p>\n<h5 id=\"第四次被骗\"><a class=\"markdownIt-Anchor\" href=\"#第四次被骗\">#</a> 第四次被骗</h5>\n<p>​\t 在所有的事情都尘埃落定之后已经是四五点钟了，这个时间点已经什么都做不了，没办法，只能先找个旅馆住着，在美团上找了一个五十块钱的旅店，住了一晚上之后，我朋友的朋友跟我们说有一个日结的事，问我们做不做，当时我们想着做一下也不是不行，毕竟出来用了这么多钱，回一点血也可以。于是我们拖着行李坐了半个小时的地铁，到了金银湖地铁站，我们刚出地铁口，正准备问具体在哪呢，我朋友的那个朋友就直接发消息说人满了，不要人了，真是气的我差点一口气没缓过来，我 TM 拖着行李坐了半个小时的地铁，结果你跟我说人满了，真是吐了，如果我没有带行李，那就算坐两个小时的地铁也无所谓，但是我提着大包小包的，直接人麻了。</p>\n<h5 id=\"终章\"><a class=\"markdownIt-Anchor\" href=\"#终章\">#</a> 终章</h5>\n<p>​\t当时出地铁站已经是下午一点多了，再回去找别的事也来不及了，所以又在美团上找了一个三十多的旅馆，在晚上我们讨论了一下，都不想再到处跑了，最终决定稳妥一点，就直接来面试地铁安检了，来这之后还好没被骗，不然真的要心态炸裂。</p>\n<p>​\t在地铁安检我感觉唯一不好的就是有时候要住站，因为它是分为早班和晚班的，早班是上午六点多上到下午两点，而晚班是下午两点上到晚上十一点多，一般来说是一个晚班和一个早班连起来上的，而住站顾名思义，就是晚上住地铁站里，那条件可真算不上好，因为是晚上十一点多下班，稍微搞个什么就十二点了，然后第二天起来上早班，就是说要五点多就起来，然后上到下午两点下班，也就是说你只能睡四个多小时，我上班的时候真的怕自己啥时候就猝死了（难怪他们面试的要看体检报告的心电图，毕竟只能睡四个多小时…）。</p>\n<h4 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\">#</a> 后记</h4>\n<p>​\t身为过来人，我给想在武汉找暑假工的一些兄弟一点建议，那就是千万千万别在武汉找暑假工，真的，就像我一个朋友说的一样，武汉就是一个小缅甸，到处都是骗子和中介，中介全部都是一窝的，所以找暑假工最好是去外地找。</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "记录",
                "暑假工"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/%E6%B9%96%E5%8C%97%E9%A3%9Eyoung%E7%AE%97%E5%8F%B7%E5%99%A8/",
            "url": "http://yunyat.cloud/miscellaneous/issues/%E6%B9%96%E5%8C%97%E9%A3%9Eyoung%E7%AE%97%E5%8F%B7%E5%99%A8/",
            "title": "湖北飞young算号器",
            "date_published": "2023-06-13T08:24:40.000Z",
            "content_html": "<hr>\n<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<ul>\n<li>\n<p>关于校园网</p>\n<p>​\t\t基本上上过大学的因该都知道校园网这个东西，由于在学校，单纯只用流量的话很不划算，所以大部分人都会去办一个校园网，但是校园网一般都会限制用户的登录数量，比如限制你只能登录三台设备等等，所以，有很多人都会选择去买一个破解路由器，但是这又有一个新的问题，破解路由器的价格几乎比正常路由器贵个一半左右，这是很不划算的。当然，你也可以选择不去买破解路由器，去用一些别的方法来绕过校园网的登录设备限制，比如抓包等等。</p>\n</li>\n<li>\n<p>破解限制</p>\n<p>​\t\t如上面提到的，破解的方法无非也就那几种，其实破解路由器也是在路由器中内置了算法，使用破解路由器要方便一些。如果你不想花很大的代价，那其实也是有办法的，上有政策，下有对策。在网上其实早就有大佬去逆向过飞 young 的拨号程序，所以本文也只是沿着大佬们的足迹去走而已。</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"正文\"><a class=\"markdownIt-Anchor\" href=\"#正文\">#</a> 正文</h4>\n<p>​\t我所使用的方法其实就是将飞 young 加密后的密码算出来，然后使用别人写的拨号程序来进行拨号认证而已（至于为什么要用别人的程序，因为我懒，不想自己写了）。</p>\n<p>​\t整个认证流程就是将加密后的密码及一些别的参数通过发包发送到飞 young 的认证服务器，让服务器误以为是飞 young 的拨号程序发的认证包，然后返回认证信息。</p>\n<ul>\n<li>\n<p>密码加密算法</p>\n<p>其实飞 young 的加密算法不止一套（听别的大佬说，貌似有三四套，淦），当初我算出来的密码和抓包抓出来的密码不管怎样都不一样，把我差点没气死。经过某位大佬的提点，才终于醒悟，我的算好器使用的算法是手机端的，而抓包抓的是 pc 端的程序，它两使用的算法都不一样，怎么可能算出来的密码一样（🌿此处省略一万字）</p>\n<p>加密的流程其实就是先把初始密码 rc4 一下，再 md5 一下（其实还是很简单的有木有ಥ_ಥ）</p>\n</li>\n<li>\n<p>程序</p>\n<p>关于 飞 young 的密码程序我写了两个版本的，有 GUI 和无 GUI ， 建议使用无 GUI 版的（如果你不想折腾的话）</p>\n<p>GUI 版纯粹是当初闲的，用 JavaFx 去写一个图形化界面。</p>\n</li>\n<li>\n<p>使用</p>\n<p><strong>重要：使用前你需要自行准备好一个能正常上网的路由器，并确保你或你宿舍中有人已经办理了一条宽带。</strong></p>\n<p>先将算 31 天密码的程序下载下来，然后将 cyoung 也下载下来，运行程序，Password.txt 里面的东西就是你的 31 天密码，然后按照 cyoung 的文档填就好了</p>\n</li>\n</ul>\n<p>注意：密码一般来说是你身份证后六位（如果你没有改密码的话）</p>\n<h4 id=\"免责声明\"><a class=\"markdownIt-Anchor\" href=\"#免责声明\">#</a> 免责声明</h4>\n<p>本博客所发布的一切文件仅限用于学习和研究目的；不得将上述内容用于商业或者非法用途，否则，一切后果请用户自负。您必须在下载后的 24 个小时之内，从您的电脑中彻底删除上述文件。 如果您喜欢该程序，请支持正版软件，购买注册，得到更好的正版服务。如有侵权请邮件与我联系处理。</p>\n<hr>\n<p>无 GUI 版：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmxhbnpvdXQuY29tL2IwNHdzMnB3ag==\">点击下载</span> 密码:enwb</p>\n<p>GUI 版：点击链接访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1plcm8tUWwvZmVpeW91bmc=\"> Github</span></p>\n",
            "tags": [
                "原创",
                "java",
                "破解"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "url": "http://yunyat.cloud/MyCodingBook/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "title": "集合接口的继承及实现概览",
            "date_published": "2023-05-14T13:45:06.000Z",
            "content_html": "<h5 id=\"map-根接口包含键和值\"><a class=\"markdownIt-Anchor\" href=\"#map-根接口包含键和值\">#</a> Map    -- 根接口 (包含键和值)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>Bindings</li>\n<li>ConcurrentMap\n<ul>\n<li>ConcurrentNavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n<li>SoredMap\n<ul>\n<li>NavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Map 接口的类</p>\n<p><code>AbstractMap</code> ,<br>\n <code>Attributes</code> ,<br>\n <code>AuthProvider</code> ,<br>\n <code>ConcurrentHashMap</code> ,<br>\n <code>ConcurrentSkipListMap</code> ,<br>\n <code>EnumMap</code> ,<br>\n <code>HashMap</code> ,<br>\n <code>Hashtable</code> ,<br>\n <code>Headers</code> ,<br>\n <code>IdentityHashMap</code> ,<br>\n <code>LinkedHashMap</code> ,<br>\n <code>PrinterStateReasons</code> ,<br>\n <code>Properties</code> ,<br>\n <code>Provider</code> ,<br>\n <code>RenderingHints</code> ,<br>\n <code>SimpleBindings</code> ,<br>\n <code>TabularDataSupport</code> ,<br>\n <code>TreeMap</code> ,<br>\n <code>UIDefaults</code> ,<br>\n <code>WeakHashMap</code></p>\n<h5 id=\"collection-根接口只有元素\"><a class=\"markdownIt-Anchor\" href=\"#collection-根接口只有元素\">#</a> Collection    -- 根接口 (只有元素)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>BeanContext\n<ul>\n<li>BeanContextServices</li>\n</ul>\n</li>\n<li>Queue<E>\n<ul>\n<li>BlockingQueue<E>\n<ul>\n<li>BlockingDeque<E></li>\n<li>TransferQueue<E></li>\n</ul>\n</li>\n<li>Deque<E></li>\n</ul>\n</li>\n<li>List<E></li>\n<li>Set<E>\n<ul>\n<li>EventSet</li>\n<li>SortedSet<E>\n<ul>\n<li>NavigableSet<E></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Collection 的类</p>\n<p><code>AbstractCollection</code> ,<br>\n <code>AbstractList</code> ,<br>\n <code>AbstractQueue</code> ,<br>\n <code>AbstractSequentialList</code> ,<br>\n <code>AbstractSet</code> ,<br>\n <code>ArrayBlockingQueue</code> ,<br>\n <code>ArrayDeque</code> ,<br>\n <code>ArrayList</code> ,<br>\n <code>AttributeList</code> ,<br>\n <code>BeanContextServicesSupport</code> ,  <code>BeanContextSupport</code> ,  <code>ConcurrentHashMap.KeySetView</code> ,  <code>ConcurrentLinkedDeque</code> ,<br>\n <code>ConcurrentLinkedQueue</code> ,<br>\n <code>ConcurrentSkipListSet</code> ,<br>\n <code>CopyOnWriteArrayList</code> ,<br>\n <code>CopyOnWriteArraySet</code> ,<br>\n <code>DelayQueue</code> ,<br>\n <code>EnumSet</code> ,<br>\n <code>HashSet</code> ,<br>\n <code>JobStateReasons</code> ,<br>\n <code>LinkedBlockingDeque</code> ,<br>\n <code>LinkedBlockingQueue</code> ,<br>\n <code>LinkedHashSet</code> ,<br>\n <code>LinkedList</code> ,<br>\n <code>LinkedTransferQueue</code> ,<br>\n <code>PriorityBlockingQueue</code> ,<br>\n <code>PriorityQueue</code> ,<br>\n <code>RoleList</code> ,<br>\n <code>RoleUnresolvedList</code> ,<br>\n <code>Stack</code> ,<br>\n <code>SynchronousQueue</code> ,<br>\n <code>TreeSet</code> ,<br>\n <code>Vector</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/frp%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/",
            "url": "http://yunyat.cloud/miscellaneous/issues/frp%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/",
            "title": "frp之内网穿透",
            "date_published": "2023-05-08T04:12:18.000Z",
            "content_html": "<p><img data-src=\"https://s1.ax1x.com/2023/05/01/p98QaIP.jpg\" alt=\"p98QaIP.jpg\"></p>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<hr>\n<p>众所周知，在我大内网环境里，你没有公网 ip 想要别人能够访问你电脑的内容是不可能的（除非你利用一些第三方的软件，但是第三方软件往往有一些限制，比如带宽啊，流量啊，收费啊等等）</p>\n<p>而你利用 frp 反向代理就可以在你没有公网 ip 的情况下实现别人访问你电脑的内容。</p>\n<ul>\n<li>\n<p>frp 是什么</p>\n<p>用百度百科的解释</p>\n<blockquote>\n<p>高性能反向代理应用<br>\n frp 是一个高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>\n</blockquote>\n<p>这是官方的解释</p>\n<blockquote>\n<p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p>\n</blockquote>\n</li>\n</ul>\n<p>官方的解释往往有些不是很通俗易懂（毕竟是官方嘛）</p>\n<p>其实 <code>frp</code>  就是利用一台有公网 <code>ip</code>  的服务器来进行端口转发（所以说使用 <code>frp</code>  前你要有一台云服务器或 <code>vps</code> ，因为云服务器或 <code>vps</code>  一般都有公网 <code>ip</code> ），这么说吧，你首先要在云服务器装一个 <code>frps</code> （服务器端的程序），然后再本地装一个 <code>frpc</code> （客户端程序，本地指的是你要访问的内网机器），之后你再配置好他们的端口映射关系（比如说你把云服务器端的 <code>23333</code>  端口开放了，然后在本地把你要访问的服务的端口也打开，就比如说 <code>http</code>  的 <code>80</code>  端口，然后在程序里将它们的映射关系 配置好），这个时候你访问有公网 <code>ip</code>  的服务器的指定端口（上面开放的 <code>23333</code> ），服务器端的程序 <code>frps</code>  就会把这个访问请求转发到它映射到客户端的端口（上面说的 <code>80</code> ），这个时候你就实现了在没有公网 <code>ip</code>  的情况下让别人访问你电脑的内容。</p>\n<p>有人会说你云服务器不是有公网 <code>ip</code>  嘛，为什么不用？</p>\n<p>首先，你对这个服务器的公网 <code>ip</code>  没有使用权，你有使用这个服务器的权力，这个公网 <code>ip</code>  的使用权在服务器手里。</p>\n<hr>\n<h4 id=\"具体如何操作\"><a class=\"markdownIt-Anchor\" href=\"#具体如何操作\">#</a> 具体如何操作</h4>\n<blockquote>\n<p>2023.5.22 更新，最近是真的懒，一点都不想动</p>\n</blockquote>\n<p>1. 首先你要前往它的官方 GitHub 库下载最新的程序（<s>废话</s>）</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycC9yZWxlYXNlcw==\">Releases · fatedier/frp (github.com)</span></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9I2ZnJ.png\" alt=\"p9I2ZnJ.png\"></p>\n<p>可以看到，有很多版本，至于下哪个，看你要穿透的内网主机和当作穿透服务器的云服务器是什么 <code>cpu</code>  架构了，比如我电脑 <code>windows</code>  系统， <code>cpu</code>  是 <code>x64</code>  架构的，那就选 <code>windows_amd64的</code> ，而我的服务器是装的 <code>Linux</code> ， <code>cpu</code>  是 <code>x86_64</code>  架构，那就选 <code>Linux_amd64</code> ，至于 <code>macos</code>  的，我身边也没有人用 <code>macos</code>  系统的，所以请自行查阅资料吧</p>\n<p>在命令行使用命令查看</p>\n<blockquote>\n<p>Windows</p>\n</blockquote>\n<p>在 <code>cmd</code> （命令提示框中）中输入： <code>systeminfo</code></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9IREPP.png\" alt=\"p9IREPP.png\"></p>\n<blockquote>\n<p>Linux</p>\n</blockquote>\n<p>同样在命令行中输入： <code>lscpu</code></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9I4tYR.png\" alt=\"p9I4tYR.png\"></p>\n<p>至于 <code>x64</code>  和 <code>x86_64</code> ，它们其实是指 <code>cpu</code>  的指令集架构， <code>cpu</code>  指令集目前主要是分为两大类</p>\n<p>​\t1. 复杂指令集</p>\n<p>​\t\t复杂指令集主要是 <code>Intel</code>  和 <code>AMD</code>  的 <code>cpu</code>  在使用，复杂指令集分为 <code>x86</code> 、 <code>x64</code> ，如果你的电脑是 <code>32</code>  位操作系统（现在应该没有用 <code>32</code>  位系统的吧），那就是 <code>x86</code>  的（为什么叫 <code>x86</code>  而不是 <code>x32</code> , 那是因为早期的处理器名称都是以数字 <code>86</code>  结尾，因此其架构被称为 <code>x86</code> ），如果是 <code>64</code>  位系统，那就是 <code>x64</code></p>\n<p>​\t\t现在复杂指令集架构的 <code>cpu</code>  大多应用在 <code>pc</code>  机上，包括 <code>Windows</code> 、 <code>Linux</code> 、 <code>MacOS</code></p>\n<p>​\t2. 简单指令集</p>\n<p>​\t\t简单指令集是 <code>arm</code>  的一种架构，这种架构的 <code>cpu</code>  主要是应用在手机上，包括安卓和苹果</p>\n<p>知道改下哪个架构的程序之后就可以下载了，但是注意，程序下载下来之后是包含服务器端和客户端的， <code>frps</code>  是服务器端的程序， <code>frpc</code>  是客户端的程序</p>\n<p>比如说你下载了 <code>windouws</code>  的程序，它里面是包含服务器端程序和客户端程序，看你需要哪一端的程序吧，另外一端可以删了（当时我也是在这卡了一会儿）</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9Ior0U.png\" alt=\"p9Ior0U.png\"></p>\n<h4 id=\"关于配置问题\"><a class=\"markdownIt-Anchor\" href=\"#关于配置问题\">#</a> 关于配置问题</h4>\n<p><b>注意：由于官方配置文件发生改变，以下配置文件仅供参考</b></p>\n<p>配置文件是 *.ini 为结尾的文件，服务器端的程序和客户端的程序都要配置</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2ZycC5vcmcvemgtY24vZG9jcy9leGFtcGxlcy9zc2gv\">通过 SSH 访问内网机器 | frp (gofrp.org</span> 官方配置参考</p>\n</blockquote>\n<ul>\n<li>客户端配置</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9I7Us0.png\" alt=\"p9I7Us0.png\"></p>\n<ul>\n<li>\n<p>服务器端配置</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/22/p9I72sx.png\" alt=\"p9I72sx.png\"></p>\n</li>\n</ul>\n<h4 id=\"新版配置文件模板\"><a class=\"markdownIt-Anchor\" href=\"#新版配置文件模板\">#</a> 新版配置文件模板</h4>\n<p>服务器端（frps.toml）:</p>\n<figure class=\"highlight toml\"><figcaption data-lang=\"TOML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># bindPort 是 frp 程序通信使用的端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key property\">bindPort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">7000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># token 用于验证客户端的正确性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key property\">token</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><p>客户端（frpc.toml）：</p>\n<figure class=\"highlight toml\"><figcaption data-lang=\"TOML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># serverAddr 是你公网服务器的 IP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key property\">serverAddr</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"x.x.x.x\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># serverPort 是客户端和服务器端的通信端口，客户端和服务器端要保持一致</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key property\">serverPort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">7000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># token 填和服务器端相同的 token</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key property\">token</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">proxies</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 你要穿透的服务的名称，如：ssh</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"ssh\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 穿透使用的协议 tcp or udp</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key property\">type</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"tcp\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 本机 ip，默认即可</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key property\">localIP</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"127.0.0.1\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 本机的要穿透服务端口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key property\">localPort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 服务器的访问端口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key property\">remotePort</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">8022</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 可以配置多个服务，只需更改客户端即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 多个服务之间 name 的名字需要不同，localPort 和 remotePort 都需要与之前的不同</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># [[proxies]]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># name = \"\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># type = \"\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># localIP = \"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># localPort = \"\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># remotePort =</span></pre></td></tr></table></figure><h4 id=\"启动-frp\"><a class=\"markdownIt-Anchor\" href=\"#启动-frp\">#</a> 启动 frp</h4>\n<h5 id=\"frps\"><a class=\"markdownIt-Anchor\" href=\"#frps\">#</a> frps</h5>\n<ol>\n<li>安装  <code>systemd</code></li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 yum 安装，适用于 CentOS 和 RHEL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> systemd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 apt 安装，适用于 Debian 和 Ubuntu</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> systemd</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 frps.service 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 vim 在 /etc/systemd/system/ 下创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/systemd/system/frps.service</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如报错可以试一下取消 sudo</span></pre></td></tr></table></figure><p>然后写入以下内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 服务名称，可自定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Description <span class=\"token operator\">=</span> frp server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>After <span class=\"token operator\">=</span> network.target syslog.target</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Wants <span class=\"token operator\">=</span> network.target</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Type <span class=\"token operator\">=</span> simple</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 启动 frps 的命令，需修改为您的 frps 的安装路径，如：/root/frp/frps -c /root/frp/frps.toml</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ExecStart <span class=\"token operator\">=</span> /path/to/frps <span class=\"token parameter variable\">-c</span> /path/to/frps.toml</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>WantedBy <span class=\"token operator\">=</span> multi-user.target</pre></td></tr></table></figure><p>配置完之后就可以直接使用  <code>systemctl start frps</code>  来启动  <code>frps</code>  服务</p>\n<h5 id=\"frpc\"><a class=\"markdownIt-Anchor\" href=\"#frpc\">#</a> frpc</h5>\n<p>在 <code>frp</code>  的安装目录下输入以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./frpc <span class=\"token parameter variable\">-c</span> ./frpc.toml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果出现了 Illegal instruction 报错那就是你版本没选对</span></pre></td></tr></table></figure><h4 id=\"常用的-systemctl-命令\"><a class=\"markdownIt-Anchor\" href=\"#常用的-systemctl-命令\">#</a> 常用的  <code>systemctl </code>  命令：</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动程序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start frps</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看程序状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>systemctl status frps</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 停止程序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl stop frps</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 重新启动</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>systemctl restart frps</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 开机自启</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> frps</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 关闭开机启动</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>systemctl disable frps</pre></td></tr></table></figure><hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "frp"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%B5%E8%84%91%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%A5%9E%E8%93%9D%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "http://yunyat.cloud/miscellaneous/issues/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%B5%E8%84%91%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%A5%9E%E8%93%9D%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "记一次电脑启动原神蓝屏解决方案",
            "date_published": "2023-05-05T16:24:25.000Z",
            "content_html": "<ul>\n<li>\n<p>原因：</p>\n<p>电脑启动原神时蓝屏，退出代码为 kernel-security_check_failure（内核安全检查失败）</p>\n</li>\n<li>\n<p>解决方法：</p>\n<p>进入设置 windows 安全中心将内核隔离的内核模式硬件强制堆栈保护关闭即可</p>\n</li>\n</ul>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "计算机"
            ]
        },
        {
            "id": "http://yunyat.cloud/miscellaneous/issues/%E5%AE%89%E5%88%A9%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/",
            "url": "http://yunyat.cloud/miscellaneous/issues/%E5%AE%89%E5%88%A9%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/",
            "title": "安利几个好用的网站",
            "date_published": "2023-05-02T10:07:29.000Z",
            "content_html": "<h4 id=\"今天来分享几个十分好用的网站\"><a class=\"markdownIt-Anchor\" href=\"#今天来分享几个十分好用的网站\">#</a> 今天来分享几个十分好用的网站</h4>\n<hr>\n<h5 id=\"游戏类\"><a class=\"markdownIt-Anchor\" href=\"#游戏类\">#</a> 游戏类</h5>\n<ul>\n<li>\n<p>rutracker</p>\n<blockquote>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXRyYWNrZXIubmV0\">https://rutracker.net</span></p>\n</blockquote>\n<p>这个网站可能很多人都知道，它是俄区最大的盗版游戏网站之一，在这里面，你可以找到绝大多数游戏</p>\n<ul>\n<li>注意：该网站目前是可以注册的，如果你有账号了，可以直接忽略第一二步，直接到第三步（Time：2023.5.24）</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9Gz26O.png\" alt=\"p9Gz26O.png\"></p>\n<p>1. 如果你直接在里面搜索的话，它是要你注册的，而想要不注册下载，你可以在地址栏中输入你要下载的 <code>游戏名</code>  + <code>site:http://rutracker.org</code>  然后回车，然后等地址栏加载出网址，将 <code>rutracker.org</code>  后缀改为 <code>net</code></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JSVHJ.png\" alt=\"p9JSVHJ.png\"></p>\n<p>2. 在左边随便点一个，哪个能下载就点哪个<br>\n<img data-src=\"https://s1.ax1x.com/2023/05/02/p9JCN59.png\" alt=\"p9JCN59.png\"></p>\n<p>3. 之后在打开的页面下滑，找到通过磁力链接下载分发，点击它 (注意，这个时候你要打开迅雷，要不然你点了打开没反应的)</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JSK9x.png\" alt=\"p9JSK9x.png\"></p>\n<p>4. 在开始下载之后，右键正在下载的任务，选择种子另存为，不用管存在哪，只要你找的到就行</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JiIAg.png\" alt=\"p9JiIAg.png\"></p>\n<p>5. 然后现在打开 qBittorrent 下载器（为什么不直接在迅雷里下？如果你能忍受它的下载速度的话那也不是不可以），将存好的种子拖入 qBittorrent，点击 ok 就可以开始下载了</p>\n<p>至于下载速度慢嘛，先点击工具，然后点击设置，选择 BitTorrent，下滑找到自动将以下 Tracker 加入新的任务，然后将 bt.txt 中的内容全部复制粘贴到其中就好了</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JFAu6.png\" alt=\"p9JFAu6.png\"></p>\n<p>至于为什么你配置好 BitTorrent 后还是下载的那么慢，那就要看你下载的这个资源的做种的人多不多了，如果少的话那当然慢了，等你把资源下载完，会自动进入做种状态，你下载的东西其实都是从别人电脑里下的，所以，你下载完成之后也不要忘记帮助别人哦 (<s>虽然我也只是偶尔做种</s>)</p>\n<p>如果不想看图文版可以去看视频版，视频版做的不是特别好，将就着看吧</p>\n<blockquote>\n<p>视频版链接：【俄区网站游戏下载视频版】</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBrNHkxRTdxdC8/c2hhcmVfc291cmNlPWNvcHlfd2ViJmFtcDt2ZF9zb3VyY2U9ZGRjYjdhOTk5MmU4Y2FjNGVhNzFkNzM0Y2U1NTZlMTA=\">https://www.bilibili.com/video/BV1pk4y1E7qt/?share_source=copy_web&amp;vd_source=ddcb7a9992e8cac4ea71d734ce556e10</span></p>\n<p>上面所有用到的软件我都打包好了（服务器小水管带宽，稍等一下吧）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly84LjIyMi4xNTMuOTE6Mzk4MTEvZG93bi84azZVTmh0TGlGSXMuN3o=\">下载链接</span> 提取码：YunYi</p>\n</blockquote>\n</li>\n<li>\n<p>byrutdb</p>\n<blockquote>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ieXJ1dGRiLm9yZw==\">https://byrutdb.org</span></p>\n</blockquote>\n<p>这也是一个俄区的游戏网站，但是与上面的一个不同的是，这个网站没有上面的那么麻烦（该网站经常会跳出 edge 的警告，直接忽略即可）</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9Jk9Z8.png\" alt=\"p9Jk9Z8.png\"></p>\n<p>1. 进入首页之后，你可以直接搜索你要下载的游戏的英文名，然后选择你要下载的游戏点击进入，往下面划，在其他赠品里选一个下载，一定不要点上面的哪些绿色的下载按钮，因为很有可能下载到病毒，到目前为止我还没遇到过（悄悄告诉你，盗版网站也是有可联机版的）</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JkPIg.png\" alt=\"p9JkPIg.png\"></p>\n<p>2. 之后它会下载一个种子文件，将这个文件拖入 qBittorrent 就行了</p>\n</li>\n</ul>\n<p>上面的两个网站是相辅相成的</p>\n<p>如何破解游戏？</p>\n<p>这就要看游戏的附加信息了，每个游戏的附加信息都不一样，其实破解流程都差不多，无非就是替换文件，具体怎么操作，就要看你的自己灵活变通了</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JkOTU.png\" alt=\"p9JkOTU.png\"></p>\n<hr>\n<h5 id=\"邮箱类\"><a class=\"markdownIt-Anchor\" href=\"#邮箱类\">#</a> 邮箱类</h5>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21haWwxLmlv\">mail1.io</span></p>\n<blockquote>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYXNrZXRiYWxsLmdyb3VwLw==\">https://basketball.group/</span></p>\n</blockquote>\n<p>现在很多东西都需要邮箱注册，而你又不想透露自己的真实邮箱，那你就可以用这个网站生成一个临时电子邮箱</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JACOx.png\" alt=\"p9JACOx.png\"></p>\n</li>\n</ul>\n<h5 id=\"视频类\"><a class=\"markdownIt-Anchor\" href=\"#视频类\">#</a> 视频类</h5>\n<ul>\n<li>\n<p>yhdmp</p>\n<blockquote>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueWhkbXAubmV0\">https://www.yhdmp.net</span></p>\n</blockquote>\n<p>这是一个看动漫的网站</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JAwn0.png\" alt=\"p9JAwn0.png\"></p>\n</li>\n</ul>\n<h5 id=\"图床\"><a class=\"markdownIt-Anchor\" href=\"#图床\">#</a> 图床</h5>\n<ul>\n<li>\n<p>imgse</p>\n<blockquote>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdzZS5jb20=\">https://imgse.com</span></p>\n</blockquote>\n<p>路过图床是一个免费的存储图片的网站</p>\n</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2023/05/02/p9JAJhQ.png\" alt=\"p9JAJhQ.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "分享"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/%E9%9B%86%E5%90%88-Map/",
            "url": "http://yunyat.cloud/MyCodingBook/java/%E9%9B%86%E5%90%88-Map/",
            "title": "集合-Map",
            "date_published": "2023-05-02T09:58:51.000Z",
            "content_html": "<h4 id=\"map接口双列队列\"><a class=\"markdownIt-Anchor\" href=\"#map接口双列队列\">#</a> Map 接口 (双列队列)</h4>\n<ul>\n<li>\n<p><code>HashMap</code>  和 <code>LinkedHashMap</code></p>\n<p><code>HashMap</code>  实现了 <code>Map</code>  接口，而 <code>LinkedHashMap</code>  继承自 <code>HashMap</code>  类</p>\n<ul>\n<li><code>hashmap</code>  和 <code>linkedhashmap</code>  的区别\n<ul>\n<li><code>hashmap</code>  采用了哈希表实现 <code>map</code>  接口，但是它的存储是无序的</li>\n<li><code>linkedhashmap</code>  同样也采用了哈希表实现，但不同的是它同时采用了链表结构，这使得它的存储是有序的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"hashmap构造方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap构造方法\">#</a> HashMap 构造方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 其他构造方法都是在此基础上衍生而来</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token comment\">//initialCapacity 初始容量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token comment\">//loadFactor 初始系数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"hashmap的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的常用方法\">#</a> HashMap 的常用方法</h5>\n<ul>\n<li>\n<p><em> <code>get()</code> </em>、<em> <code>put()</code> </em>、<em> <code>remove()</code> </em></p>\n<p><code>get()</code></p>\n<ul>\n<li>返回指定键的键值</li>\n</ul>\n<p><code>put()</code></p>\n<ul>\n<li>将指定的键值装入列表</li>\n</ul>\n<p><code>remove()</code></p>\n<ul>\n<li>删除指定健的键值，删除后健的值为 <code>null</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 初始容量为 5，初始系数为 0.75</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 可以使用泛型指定存储类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//key 为键值 1，value 为 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 返回键为 “键值 1” 的对应键值 value</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 注意：此 value 为 Object 类型，输出会自动调用 toString 方法将值转换为 String</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 删除键为 “键值 1” 的对应值 value，删除后键 “键值 1” 的值为 null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>LinkedHashMap</code>  的构造方法同 <code>HashMap</code>  相同</p>\n<ul>\n<li>\n<p><em> <code>containsKey</code> </em>、<em> <code>containsValue</code> </em>、<em> <code>isEmpty</code> </em></p>\n<p><code>containskey</code></p>\n<ul>\n<li>如果此列表中包含指定的键就返回 true，反之 false</li>\n</ul>\n<p><code>containsValue</code></p>\n<ul>\n<li>如果此列表将一个或多个健映射到此键值就返回 true，反之 false</li>\n</ul>\n<p><code>isEmpty</code></p>\n<ul>\n<li>如果此列表不包含健和键值就返回 true，反之 false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含健 \"键值\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       \t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containskey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否有指定值的映射</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含键值对</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序执行结果为</p>\n<p><code>b1=true</code>   <code>b2=true</code>   <code>b3=false</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/javafx%E4%BD%BF%E7%94%A8maven%E6%89%93%E5%8C%85%E5%8F%8A%E8%BF%90%E8%A1%8C/",
            "url": "http://yunyat.cloud/MyCodingBook/java/javafx%E4%BD%BF%E7%94%A8maven%E6%89%93%E5%8C%85%E5%8F%8A%E8%BF%90%E8%A1%8C/",
            "title": "JavaFx使用Maven打包及运行",
            "date_published": "2023-05-02T09:53:25.000Z",
            "content_html": "<h4 id=\"javafx使用maven打包依赖及运行\"><a class=\"markdownIt-Anchor\" href=\"#javafx使用maven打包依赖及运行\">#</a> javafx 使用 maven 打包依赖及运行</h4>\n<p>1. 先照图打包<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTPAZ6.png\" alt=\"1\"><br>\n2. 在 target 下会生成 app 文件夹和压缩包，进入 app/bin/ 目录，里面有 app.bat 批处理文件，双击即可运行<br>\n 3. 可以在 app 目录下写一个脚本文件来运行 app.bat，以便隐藏 cmd 命令窗口<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTP6FU.png\" alt=\"3\"><br>\n4. 脚本代码<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTP5ex.png\" alt=\"4\"></p>\n<pre><code class=\"language-vbscript\">set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)\nws.Run &quot;.\\bin\\app.bat&quot;,0\n</code></pre>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java",
                "javafx"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%BA%A7%E5%88%AB%E6%AF%94%E8%BE%83/",
            "url": "http://yunyat.cloud/MyCodingBook/java/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%BA%A7%E5%88%AB%E6%AF%94%E8%BE%83/",
            "title": "运算符级别比较",
            "date_published": "2023-05-02T09:50:16.000Z",
            "content_html": "<hr>\n<h3 id=\"运算符级别\"><a class=\"markdownIt-Anchor\" href=\"#运算符级别\">#</a> 运算符级别</h3>\n<ul>\n<li>* /</li>\n<li>+ -</li>\n</ul>\n<h6 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*/]\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+-]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 相同级别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*/]\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+-]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//s1>s2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//code</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//code</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/04/11/ppLkjaj.md.png\" alt=\"ppLkjaj.md.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/hexo%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8ASSL%E5%BA%94%E7%94%A8/",
            "url": "http://yunyat.cloud/hexo/hexo%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8ASSL%E5%BA%94%E7%94%A8/",
            "title": "hexo及SSL获取",
            "date_published": "2023-04-30T07:38:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文只记录大概过程 (具体教程百度上都有)</p>\n</div>\n<h2 id=\"hexo\"><a class=\"markdownIt-Anchor\" href=\"#hexo\">#</a> hexo</h2>\n<p>这是一个开源的博客框架，你可以通过这个框架快速搭建属于你的个人博客</p>\n<div class=\"note primary\">\n<p>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==\">Hexo</span></p>\n</div>\n<p><span class=\"spoiler\" title=\"...\">跟着官方文档走就能搭好 (大概吧)</span></p>\n<p>搭建个人博客首先要一个托管平台，下面我就说两个常见的:</p>\n<p>1. 自掏腰包买个云服务器 (本站就是通过这种方式搭建的)，这种方式对于我们这种搭建个人博客的群体而言并不是很划算，毕竟一个云服务器少说几十，多则上百 <span class=\"spoiler\" title=\"...\">买了服务器，我的钱包已经瘪瘪的啦</span></p>\n<p>2. 使用那些免费的托管平台，比如  <code>github pages</code> ，这个的话好处是它是免费的，但是由于它的服务器在国外，所以有点时灵时不灵的，当然，你要是挂个梯子，啥网站上不去勒🤨</p>\n<p>关于  <code>hexo</code>  怎么搭建，我只说一下大致搭建流程，具体的网上的教程比我讲的详细多了，我就不多说了</p>\n<p>首先你要在本地 (windows) 下一个  <code>node.js</code>  <span class=\"spoiler\" title=\"...\">应该不会有人下错吧？</span>，毕竟这个框架是基于这个东西运行的，至于版本最好选择大于 12 的版本</p>\n<div class=\"note primary\">\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNu\">Node.js (nodejs.org)</span>(官网有中文版，这点还是挺不错的)</p>\n</div>\n<p>下载好之后直接无脑 next，然后在控制台用 <code>node -v;npm -v </code> 检查版本来看是否安装成功</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93OgEV.png\" alt=\"p93OgEV.png\"></p>\n<p>下载好之后直接使用 <code>npm install -g hexo-cli</code>  安装  <code>hexo</code></p>\n<p>装好之后用 <code>hexo -v</code>  查看版本</p>\n<p>然后创建一个网站，将下面命令的  <code>hexo-blog</code>  换成你要创建的网站名称即可</p>\n<p><code>hexo init hexo-blog</code></p>\n<p>然后进入  <code>hexo-blog</code>  文件夹，比如我的在 D 盘的  <code>hexo</code>  目录下</p>\n<p><code>cd D:\\hexo\\hexo-blog</code></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93O7Hx.png\" alt=\"p93O7Hx.png\"></p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>将网站初始化</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre>npm install</pre></td></tr></table></figure><p>使用 <code>hexo g</code>  来生成静态资源，生成的资源在  <code>public</code>  目录下，生成静态资源之前可以先清除缓存 <code>hexo clean</code></p>\n<p>用 <code>hexo s</code>  来开启服务器端</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93OqUK.png\" alt=\"p93OqUK.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93OouR.png\" alt=\"p93OouR.png\"></p>\n<p>启动之后可以用 <span class=\"kbd\">Ctrl</span> + 鼠标左键 点击 <code>http://localhost:4000/</code>  来在本地查看网页</p>\n<p>至于为什么你们的网站和我的不一样，因为我更改了主题，关于主题你们可以自行百度，毕竟每个主题的配置文档都不一样</p>\n<p>至此  <code>hexo</code>  本地搭建就完成了</p>\n<hr>\n<h2 id=\"关于怎么部署\"><a class=\"markdownIt-Anchor\" href=\"#关于怎么部署\">#</a> 关于怎么部署</h2>\n<p>部署有两种方法</p>\n<div class=\"tab\" data-id=\"1\" data-title=\"方法一\">\n<p>直接将 <code>public</code>  中的静态文件全部上传到云服务器上就行了</p>\n</div>\n<div class=\"tab\" data-id=\"1\" data-title=\"方法二\">\n<p>使用 hexo 自带的部署功能</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>使用下面的命令部署</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre>hexo d</pre></td></tr></table></figure><div class=\"note info\">\n<p>该命令会将 public 中的内容上传到 config.yml 配置文件的  <code>deploy</code>  中指定的服务器上</p>\n</div>\n<p>例如：</p>\n<p><img data-src=\"https://figurebed.yunyat.cloud/imgs/20241101162226.png\" alt=\"image-20241101162226345\"></p>\n</div>\n<hr>\n<h2 id=\"ssl\"><a class=\"markdownIt-Anchor\" href=\"#ssl\">#</a> SSL</h2>\n<p>本章重点来了，首先是  <code>ssl</code>  是什么，以及它和  <code>https</code>  的关系</p>\n<blockquote>\n<ul>\n<li>\n<p>它是一个安全套接层协议 (Secure Sockets Layer)，用来在服务器和浏览器之间进行安全的数据传输和身份认证</p>\n</li>\n<li>\n<p>https 其实就是使用了 ssl 的 http 协议，至于为什么使用 https 而不使用 http，就是因为 http 是使用明文传输数据的，这种方式极其容易被第三方截获和修改，而且以为它是明文的原因，第三方攻击者可以直接读懂其中的信息<span class=\"spoiler\" title=\"...\">比如某校的校园网程序，就是通过 http 来传输的，我可以直接通过抓包来获取它加密后的密码，如果它改用 https，那我宿舍就要为网络发愁咯</span></p>\n</li>\n</ul>\n</blockquote>\n<p>既然介绍完  <code>ssl</code> ，那现在说说怎么获取吧，关于  <code>ssl</code>  的获取分为两种:</p>\n<ul>\n<li>\n<p>直接使用你的钞能力买买买</p>\n</li>\n<li>\n<p>去找免费的用 ( <em><s>白嫖</s></em>)</p>\n</li>\n</ul>\n<p>像我这种穷逼当然选择第二种啦</p>\n<p>本站使用的就是阿里云的免费  <code>ssl</code>  证书，你也可以使用别的平台的免费证书，比如腾讯云，华为云，百度云等</p>\n<p>关于怎么获取</p>\n<ul>\n<li>首先你要有一个阿里云的账号，登录之后搜索  <code>ssl</code>  证书，之后按照截图点击购买免费证书</li>\n</ul>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93OvgH.png\" alt=\"p93OvgH.png\"></p>\n<p>阿里的  <code>ssl</code>  免费证书每年都能购买 (好像吧)，一次能买 20 张<span class=\"spoiler\" title=\"...\">一张能管三个月，以前是一年的，真的抠唆</span>，想多买就要给钱钱咯</p>\n<p>使用的话也挺简单的，如果你是阿里云的话可以直接部署，至于怎么部署就需要你慢慢研究啦</p>\n<p>我是直接下载的证书来进行部署的，可以下载的类型挺多的</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93OTD1.png\" alt=\"p93OTD1.png\"></p>\n<p>因为我服务器是使用  <code>Nginx</code> ，所以下载第一个，具体的根据你服务器类型下载。</p>\n<p>下载好之后是一个  <code>zip</code>  的压缩包，里面有  <code>key</code>  和  <code>pem</code>  为后缀的文件 (不同类型有所差异)</p>\n<p>可以在宝塔面板里部署下载的证书（其实就是把对应文件里的内容复制过去）</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/04/30/p93ObE6.png\" alt=\"p93ObE6.png\"></p>\n<p>然后保存就可以了</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "hexo",
                "原创"
            ]
        },
        {
            "id": "http://yunyat.cloud/test/Mermaid%E7%94%BB%E5%9B%BE%E6%B5%8B%E8%AF%95/",
            "url": "http://yunyat.cloud/test/Mermaid%E7%94%BB%E5%9B%BE%E6%B5%8B%E8%AF%95/",
            "title": "Mermaid画图测试",
            "date_published": "2023-04-29T12:20:55.000Z",
            "content_html": "<h4 id=\"流程图\"><a class=\"markdownIt-Anchor\" href=\"#流程图\">#</a> 流程图</h4>\n<ul>\n<li>语法解释: <code>graph</code>  表示声明一张流程图  <code>TD</code>  表示方向 T (top)-D (down) 由上至下  <code>()</code>  表示圆形框  <code>&#123;&#125;</code>  表示菱形框</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(B)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tA<span class=\"token arrow operator\">--></span>C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tB<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">&#123;D&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t流程图</pre></td></tr></table></figure><h5 id=\"时序图\"><a class=\"markdownIt-Anchor\" href=\"#时序图\">#</a> 时序图</h5>\n<ul>\n<li>语法解释: <code>-&gt;&gt;代表实线箭头</code>    <code>--&gt;&gt;代表虚线箭头</code></li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token arrow operator\">->></span>J<span class=\"token operator\">:</span> hello J!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tJ<span class=\"token arrow operator\">-->></span>A<span class=\"token operator\">:</span> good!</pre></td></tr></table></figure><h5 id=\"状态图\"><a class=\"markdownIt-Anchor\" href=\"#状态图\">#</a> 状态图</h5>\n<ul>\n<li>语法解释: <code>[*]代表开始或结束</code>  如果在箭头右边则表示结束</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">stateDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token text string\">[*]</span> <span class=\"token arrow operator\">--></span> s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts <span class=\"token arrow operator\">--></span><span class=\"token text string\">[*]</span></pre></td></tr></table></figure><h5 id=\"类图\"><a class=\"markdownIt-Anchor\" href=\"#类图\">#</a> 类图</h5>\n<ul>\n<li>语法解释: <code>&lt;|--</code>  表示继承  <code>+</code>  表示 <code>public</code>   <code>-</code>  表示 <code>private</code></li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">classDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA <span class=\"token arrow operator\">&lt;|--</span> D</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tA <span class=\"token arrow operator\">&lt;|--</span> F</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tA <span class=\"token operator\">:</span> + int a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tA <span class=\"token operator\">:</span> + toString<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">class</span> D<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t+ String S</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t+ setS<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">class</span> F<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t- char c</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t- getC<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"饼图\"><a class=\"markdownIt-Anchor\" href=\"#饼图\">#</a> 饼图</h5>\n<ul>\n<li>语法解释：饼图使用 <code>pie</code>  表示 标题下面分别是区域名称及其所占百分比</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">pie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ttitle 每日时间分配</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"睡觉\"</span> <span class=\"token operator\">:</span> 40</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"学习\"</span> <span class=\"token operator\">:</span> 25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"吃饭刷视频\"</span> <span class=\"token operator\">:</span> 15</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"生活杂事\"</span> <span class=\"token operator\">:</span> 20</pre></td></tr></table></figure><hr>\n<p>END</p>\n",
            "tags": [
                "markdown",
                "mermaid"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/java/Java/",
            "url": "http://yunyat.cloud/MyCodingBook/java/Java/",
            "title": "Java线程池",
            "date_published": "2023-04-28T15:15:03.000Z",
            "content_html": "<h5 id=\"future\"><a class=\"markdownIt-Anchor\" href=\"#future\">#</a> Future</h5>\n<p>此类用于异步存储计算结果</p>\n<ul>\n<li>\n<p>方法摘要：</p>\n<p><code>get()</code></p>\n<ul>\n<li>此方法会阻塞当前线程直到任务完成，然后检索其结果</li>\n</ul>\n</li>\n</ul>\n<p><code>get(long timeout ,TimeUnit unit)</code></p>\n<ul>\n<li>此方法也会阻塞当前线程，但是到指定时间后立即返回，然后检索其结果 (如果任务完成)</li>\n</ul>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<p><code>isCancelled()</code></p>\n<ul>\n<li>如果任务在完成之前被取消，则返回 true。</li>\n</ul>\n<p><code>isDone()</code></p>\n<ul>\n<li>如果任务结束，无论是正常完成、中途取消，还是发生异常，都返回 true。</li>\n</ul>\n<h5 id=\"runnable任务和calable任务\"><a class=\"markdownIt-Anchor\" href=\"#runnable任务和calable任务\">#</a> Runnable 任务和 Calable 任务</h5>\n<ul>\n<li>\n<p><code>Runnable</code></p>\n</li>\n<li>\n<p>此方法没有返回值也不会抛出异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 被执行时没有返回值也无法抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>可以通过 <code>Executors</code>  工具类将 <code>Runnable</code>  转换为 <code>Callable</code></p>\n<ul>\n<li>\n<p><code>Calable</code></p>\n</li>\n<li>\n<p>指定的泛型返回值  <code>&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * @throws 当无法计算结果则抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * @return 返回计算结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"提交任务\"><a class=\"markdownIt-Anchor\" href=\"#提交任务\">#</a> 提交任务</h5>\n<p><code>execute()</code>  和 <code>submit()</code></p>\n<ul>\n<li>\n<p><code>execute()</code></p>\n<ul>\n<li>此方法用于提交不需要返回值的任务，所以无法判断任务是否被执行成功</li>\n</ul>\n</li>\n<li>\n<p><code>submit()</code></p>\n<ul>\n<li>\n<p>此方法用于提交需要返回值的任务。返回值为 <code>FutureTask</code></p>\n<p><code>FutureTask</code>  继承自 <code>Future</code></p>\n<p>可以调用返回值的 <code>get()</code>  方法判断任务是否执行成功</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"取消任务\"><a class=\"markdownIt-Anchor\" href=\"#取消任务\">#</a> 取消任务</h5>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<h5 id=\"关闭线程池\"><a class=\"markdownIt-Anchor\" href=\"#关闭线程池\">#</a> 关闭线程池</h5>\n<p><code>shutdown()</code>  和 <code>shutdowNow()</code></p>\n<ul>\n<li>\n<p><code>shutdown</code></p>\n<ul>\n<li>有序关闭线程池，队列中的任务会被执行，此时线程池不会接受新的任务，此方法无返回值</li>\n</ul>\n</li>\n<li>\n<p><code>shutdowNow</code></p>\n<ul>\n<li>关闭线程池，中止当前正在执行的任务，队列中的任务不会执行并且返回从未开始执行的 <code>list</code>  列表</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"判断线程池是否开始关闭\"><a class=\"markdownIt-Anchor\" href=\"#判断线程池是否开始关闭\">#</a> 判断线程池是否开始关闭</h5>\n<p><code>isShutdown</code>  和 <code>isTerminated</code></p>\n<ul>\n<li>\n<p><code>isShoudown</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后就返回 <code>true</code>  , 此时线程池可能并没有完全关闭 (队列中可能还有待执行的任务)</li>\n</ul>\n</li>\n<li>\n<p><code>isTerminated</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后返回 <code>true</code>  , 此时线程池及队列中的任务应该都已执行完毕，否则返回 <code>false</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h5>\n<ul>\n<li><code>ThreadPoolExecutor</code>  线程池创建的构造方法 (其它构造方法都是在此基础上的衍生)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token comment\">// 保留的核心线程数，定义了最小可以同时运行的线程数量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token comment\">// 当队列中的任务达到队列容量时当前可以同时运行的线程数变成最大线程数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                          <span class=\"token comment\">// 当线程数大于核心线程数时，多余空闲线程在死亡之前等待新任务的最大时长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          <span class=\"token comment\">//keepAliveTime 的时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                          <span class=\"token comment\">// 任务队列，用来保存等待执行的任务，当新任务被提交的时候先判断当前运行的线程数是否达到了核心线程数，达到的话就存入队列</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                          <span class=\"token comment\">// 创建新线程时使用的工厂方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                          <span class=\"token comment\">// 拒绝策略，当任务过多而拒绝执行时使用的处理程序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                         <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为非法或不适当的参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为 null 等非法参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> threadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \t<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 核心线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 等待时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 队列长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 拒绝策略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 execute 提交任务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">sumit</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 sumit 提交任务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"时间值单位\"><a class=\"markdownIt-Anchor\" href=\"#时间值单位\">#</a> 时间值单位</h5>\n<p><code>TimeUnit</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>DAYS</code></td>\n<td style=\"text-align:center\">时间单位代表二十四小时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HOURS</code></td>\n<td style=\"text-align:center\">时间单位代表六十分钟。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MICROSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一毫秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MILLISECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MINUTES</code></td>\n<td style=\"text-align:center\">时间单位代表六十秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NANOSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一微秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表一秒。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "原创",
                "java线程"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/shoka/special/",
            "url": "http://yunyat.cloud/hexo/shoka/special/",
            "title": "Step.4 主题特殊功能",
            "date_published": "2020-08-13T13:45:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p><a href=\"/computer-science/note/theme-shoka-doc/\">🚀快速开始</a> - <a href=\"/computer-science/note/theme-shoka-doc/dependents/\">💌依赖插件</a> - <a href=\"/computer-science/note/theme-shoka-doc/config/\">📌基本配置</a> - <a href=\"/computer-science/note/theme-shoka-doc/display/\">🌈界面显示</a> - <a href=\"/computer-science/note/theme-shoka-doc/special/\"><strong>🦄特殊功能</strong></a></p>\n</div>\n<div class=\"note info\">\n<p>以下介绍可以使用的 markdown 或者标签代码。<br>\n功能大部分基于 <code>hexo-renderer-multi-markdown-it</code>  渲染器，尤其是代码块的显示，与默认渲染器不兼容。</p>\n</div>\n<h1 id=\"links-链接块\"><a class=\"markdownIt-Anchor\" href=\"#links-链接块\">#</a>  <code>links</code>  链接块</h1>\n<p>本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。</p>\n<p>文章中的使用格式：</p>\n<ol>\n<li>使用 <code>links</code>  标签块，包围 <code>yml</code>  语法书写的内容，字段包括</li>\n</ol>\n<p>–|--|–<br>\n <code>site</code>  | 站点名称 | 必填<br>\n <code>owner</code>  | 管理员名字 | 可选，默认为 <code>site</code>  的值<br>\n <code>url</code>  | 站点链接 | 必填<br>\n <code>desc</code>  | 站点描述 | 可选，默认为 <code>url</code>  的值<br>\n <code>image</code>  | 站点图片 | 可选，默认为 <code>images/404.png</code> <br>\n <code>color</code>  | 方块颜色 | 可选，默认为 <code>#666</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- site: #站点名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  owner: #管理员名字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url: #站点网址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  desc: #简短描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  image: #一张图片</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  color: #颜色代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  image: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;amehime&#x2F;shoka@latest&#x2F;images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  image: images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  color: &quot;#9d5b8b&quot;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr></table></figure><div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div><div class=\"item\" title=\"霜月琉璃\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div>\n<ol start=\"2\">\n<li>以上标签块里的内容，还可以保存到一个 <code>yml</code>  文件中，然后使用 <code>linksfile</code>  标签。<br>\n其中， <code>path</code>  位于 <code>&lt;root&gt;/source</code>  目录下。</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% linksfile [path] %&#125;</pre></td></tr></table></figure><p>举个栗子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% linksfile friends&#x2F;_data.yml %&#125;</pre></td></tr></table></figure><h1 id=\"code代码块\"><a class=\"markdownIt-Anchor\" href=\"#code代码块\">#</a>  <code>code</code>  代码块</h1>\n<p>使用 <code>markdown-it-prism</code>  进行代码高亮，支持显示行号、行高亮 <code>mark</code> 、命令行提示符 <code>command</code> 、代码块标题。</p>\n<p>基本格式： <code>[language] [title] [url] [link text] [mark] [command]</code></p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>language</td>\n<td>- 支持的语言<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWpzLmNvbS8jc3VwcG9ydGVkLWxhbmd1YWdlcw==\">戳此</span></td>\n<td>null \\</td>\n</tr>\n<tr>\n<td></td>\n<td>- 如果不需要代码高亮，但希望显示代码块样式，则设为 <code>raw</code></td>\n<td>\\</td>\n</tr>\n<tr>\n<td></td>\n<td>- 留空或设为 <code>info</code> ，将不显示代码高亮和代码块样式</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>代码块的标题文字</td>\n<td>null</td>\n</tr>\n<tr>\n<td>url</td>\n<td>代码块标题右侧显示的链接</td>\n<td>null</td>\n</tr>\n<tr>\n<td>link text</td>\n<td>上述链接显示的标题</td>\n<td>link</td>\n</tr>\n<tr>\n<td>mark</td>\n<td>行高亮显示，格式为 <code>mark:行号,行号开始-行号结束,其他行号</code> 。</td>\n<td>null \\</td>\n</tr>\n<tr>\n<td></td>\n<td>例如 <code>mark:1,4-7,10</code> ，将高亮显示第 1、4、5、6、7、10 行</td>\n<td></td>\n</tr>\n<tr>\n<td>command</td>\n<td>命令行提示符，格式为 <code>command:(&quot;提示内容&quot;:行号,行号||&quot;提示内容&quot;:行号开始-行号结束)</code></td>\n<td>null \\</td>\n</tr>\n<tr>\n<td></td>\n<td>例如 <code>command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#96;&#96;&#96;java 行高亮 https:&#x2F;&#x2F;shoka.lostyu.me 参考链接 mark:1,6-7</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import java.util.Scanner;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Scanner in &#x3D; new Scanner (System.in);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 输入 Scan 之后，按下键盘 Alt + “&#x2F;” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>System.out.println (&quot;Hello&quot; + &quot;world.&quot;);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#96;&#96;&#96;bash 命令行提示符 command:(&quot;[root@localhost] $&quot;:1,9-10||&quot;[admin@remotehost] #&quot;:4-6)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;usr&#x2F;home&#x2F;chris&#x2F;bin</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ls -la</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>git add -A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>git commit -m &quot;update&quot;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-la</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-A</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h1 id=\"quiz-练习题与答案\"><a class=\"markdownIt-Anchor\" href=\"#quiz-练习题与答案\">#</a>  <code>quiz</code>  练习题与答案</h1>\n<p>这个功能是用来显示练习题的。<br>\n需要在 Front Matter 中添加 <code>quiz: true</code> ，以正确显示题型标签。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>几个例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 练习题与答案</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>quiz: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &#123;.quiz .true&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2. 有基类 &#96;SHAPE&#96;，派生类 &#96;CIRCLE&#96;，声明如下变量：  &#123;.quiz .multi&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &#96;&#96;&#96;cpp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    SHAPE shape1,*p1;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CIRCLE circle1,*q1;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    下列哪些项是 “派生类对象替换基类对象”。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - &#96;p1&#x3D;&amp;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - &#96;q1&#x3D;&amp;shape1;&#96;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    - &#96;shape1&#x3D;circle1;&#96; &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    - &#96;circle1&#x3D;shape1;&#96;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &gt; - :x: 派生类指针指向基类的引用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    &gt; - :heavy_check_mark: 派生类对象给基类对象赋值</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &gt; - :x: 基类对象给派生类对象赋值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    &gt; &#123;.options&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>3. 下列叙述正确的是 []&#123;.gap&#125; 。 &#123;.quiz&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    - 虚函数只能定义成无参函数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    - 虚函数不能有返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    - 能定义虚构造函数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    - A、B、C 都不对 &#123;.correct&#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>&#123;.options&#125;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>10. 如果定义 &#96;int e&#x3D;8; double f&#x3D;6.4, g&#x3D;8.9;&#96;，则表达式 &#96;f+int (e&#x2F;3*int (f+g)&#x2F;2)%4&#96; 的值为 [9.4]&#123;.gap&#125;。 &#123;.quiz .fill&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    &gt; 注意运算顺序和数据类型</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &gt; [8.4]&#123;.mistake&#125;</pre></td></tr></table></figure><p>点击选项可以显示答案，以及答案解析。</p>\n<ol>\n<li class=\"quiz\">\n<p>下列叙述正确的是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li class=\"correct\">A、B、C 都不对</li>\n</ul>\n</li>\n<li class=\"quiz multi\">\n<p>有基类 <code>SHAPE</code> ，派生类 <code>CIRCLE</code> ，声明如下变量： </p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SHAPE shape1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CIRCLE circle1<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>q1<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>p1=&amp;circle1;</code> </li>\n<li><code>q1=&amp;shape1;</code></li>\n<li class=\"correct\"><code>shape1=circle1;</code> </li>\n<li><code>circle1=shape1;</code></li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>✔️ 令基类对象的指针指向派生类对象</li>\n<li>❌ 派生类指针指向基类的引用</li>\n<li>✔️ 派生类对象给基类对象赋值</li>\n<li>❌ 基类对象给派生类对象赋值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。</p>\n</li>\n<li class=\"quiz fill\">\n<p>如果定义 <code>int e=8; double f=6.4, g=8.9;</code> ，则表达式  <code>f+int(e/3*int(f+g)/2)%4</code>  的值为 <span class=\"gap\">9.4</span>。</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br>\n<span class=\"mistake\"> 8.4</span></p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\">#</a> 使用说明</h2>\n<p>本功能基于 <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code></p>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#123;.quiz&#125;</code></td>\n<td>选择题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .multi&#125;</code></td>\n<td>多选题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .true&#125;</code></td>\n<td>正确的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .false&#125;</code></td>\n<td>错误的判断题</td>\n</tr>\n<tr>\n<td><code>&#123;.quiz .fill&#125;</code></td>\n<td>填空题</td>\n</tr>\n<tr>\n<td><code>[]&#123;.gap&#125;</code></td>\n<td>空白下划线</td>\n</tr>\n<tr>\n<td><code>[答案内容]&#123;.gap&#125;</code></td>\n<td>答案内容带下划线</td>\n</tr>\n<tr>\n<td><code>&#123;.options&#125;</code></td>\n<td>ABCDE 选项</td>\n</tr>\n<tr>\n<td><code>&#123;.correct&#125;</code></td>\n<td>选择题的正确选项</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>答案解析</td>\n</tr>\n<tr>\n<td><code>[8.4]&#123;.mistake&#125;</code></td>\n<td>错题备注</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"emoji-绘文字\"><a class=\"markdownIt-Anchor\" href=\"#emoji-绘文字\">#</a>  <code>emoji</code>  绘文字</h1>\n<p>本功能基于 <code>markdown-it-emoji</code> ，所有<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LWVtb2ppL2Jsb2IvbWFzdGVyL2xpYi9kYXRhL2Z1bGwuanNvbg==\">标签参考戳此</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:kissing_heart:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:ring:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:notes:</pre></td></tr></table></figure><p>😘 💍 🎶</p>\n<h1 id=\"effects-文字特效\"><a class=\"markdownIt-Anchor\" href=\"#effects-文字特效\">#</a>  <code>effects</code>  文字特效</h1>\n<p>本功能基于 <code>markdown-it-ins</code> 、  <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code></p>\n<blockquote>\n<p>本主题风格颜色通用样式：default、primary、success、info、warning、danger</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 波浪线 ++&#123;.wavy&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>++ 着重点 ++&#123;.dot&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>++ 紫色下划线 ++&#123;.primary&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>++ 绿色波浪线 ++&#123;.wavy .success&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>++ 黄色着重点 ++&#123;.dot .warning&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>~~ 删除线～～</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>~~ 红色删除线～～&#123;.danger&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#x3D;&#x3D; 荧光高亮 &#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>[赤橙黄绿青蓝紫]&#123;.rainbow&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>[红色]&#123;.red&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[粉色]&#123;.pink&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>[橙色]&#123;.orange&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>[黄色]&#123;.yellow&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>[绿色]&#123;.green&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>[靛青]&#123;.aqua&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>[蓝色]&#123;.blue&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>[紫色]&#123;.purple&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>[灰色]&#123;.grey&#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>快捷键 [Ctrl]&#123;.kbd&#125; + [C]&#123;.kbd .red&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>H~2~0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>29^th^</pre></td></tr></table></figure><div class=\"note warning\">\n<p>这段代码因为自动被 pangu.js 处理了一下，加了几个空格，导致直接复制代码不能正常显示。<br>\n正确的代码是 <code>++下划线++</code>   <code>~~删除线~~</code>   <code>==荧光高亮==</code> ，不能有空格哦。</p>\n</div>\n<p><ins>下划线</ins><br>\n<ins class=\"wavy\">波浪线</ins><br>\n<ins class=\"dot\">着重点</ins><br>\n<ins class=\"primary\">紫色下划线</ins><br>\n<ins class=\"wavy success\">绿色波浪线</ins><br>\n<ins class=\"dot warning\">黄色着重点</ins><br>\n<s>删除线</s><br>\n<s class=\"danger\">红色删除线</s><br>\n<mark>荧光高亮</mark><br>\n<span class=\"rainbow\">赤橙黄绿青蓝紫</span><br>\n<span class=\"red\">红色</span><br>\n<span class=\"pink\">粉色</span><br>\n<span class=\"orange\">橙色</span><br>\n<span class=\"yellow\">黄色</span><br>\n<span class=\"green\">绿色</span><br>\n<span class=\"aqua\">靛青</span><br>\n<span class=\"blue\">蓝色</span><br>\n<span class=\"purple\">紫色</span><br>\n<span class=\"grey\">灰色</span><br>\n快捷键 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span><br>\nH<sub>2</sub>0<br>\n29<sup>th</sup></p>\n<h1 id=\"spoiler隐藏文字\"><a class=\"markdownIt-Anchor\" href=\"#spoiler隐藏文字\">#</a>  <code>spoiler</code>  隐藏文字</h1>\n<p>本功能基于 <code>markdown-it-spoiler</code>  和 <code>markdown-it-attrs</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</pre></td></tr></table></figure><p><span class=\"spoiler\" title=\"...\">黑幕黑幕黑幕黑幕黑幕黑幕</span> ： 鼠标滑过显示内容<br>\n<span class=\"spoiler bulr\" title=\"...\">模糊模糊模糊模糊模糊模糊</span> ： 选中文字显示内容</p>\n<h1 id=\"label-标签块\"><a class=\"markdownIt-Anchor\" href=\"#label-标签块\">#</a>  <code>label</code>  标签块</h1>\n<p>本功能基于 <code>markdown-it-bracketed-spans</code>  和 <code>markdown-it-attrs</code> <br>\n 有以下颜色可选</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[default]&#123;.label&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[primary]&#123;.label .primary&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[info]&#123;.label .info&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[:heavy_check_mark:success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[warning]&#123;.label .warning&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[:broken_heart:danger]&#123;.label .danger&#125;</pre></td></tr></table></figure><p><span class=\"label\">default</span><br>\n<span class=\"label primary\">primary</span><br>\n<span class=\"label info\">info</span><br>\n<span class=\"label success\">✔️success</span><br>\n<span class=\"label warning\">warning</span><br>\n<span class=\"label danger\">💔danger</span></p>\n<h1 id=\"note-提醒块\"><a class=\"markdownIt-Anchor\" href=\"#note-提醒块\">#</a>  <code>note</code>  提醒块</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br>\n 标签为：</p>\n<p>–|--<br>\n 开始行 | <code>:::[风格颜色]</code> <br>\n 结束行 | <code>:::</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:::default</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>默认默认</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>:::primary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>基本基本</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>提示提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>:::success</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成功成功</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>:::warning</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>警告警告</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>:::danger no-icon</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>:::</pre></td></tr></table></figure><div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>没有图标</p>\n</div>\n<h1 id=\"tab标签卡\"><a class=\"markdownIt-Anchor\" href=\"#tab标签卡\">#</a>  <code>tab</code>  标签卡</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br>\n 标签为：</p>\n<p>–|--<br>\n 开始行 | <code>;;;[同一ID] [标签名称]</code> <br>\n 结束行 | <code>;;;</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>;;;id1 卡片 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>** 加粗 **</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[success]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  owner: 霜月琉璃</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  desc: 琉璃的医学 &amp; 编程笔记</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  image: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;amehime&#x2F;shoka@latest&#x2F;images&#x2F;avatar.jpg</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>;;;id1 卡片 2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>:::danger</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>危险危险</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>;;;id2 ②号标签卡片 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>;;;id2 ②号标签卡片 2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>;;;</pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"卡片1\">\n<p>这里是卡片 1 的内容<br>\n<strong>加粗</strong><br>\n<span class=\"label success\"> success</span></p>\n<div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div>\n</div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"卡片2\">\n<p>这里是卡片 2 的内容</p>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"②号标签卡片2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n<h1 id=\"collapse-折叠块\"><a class=\"markdownIt-Anchor\" href=\"#collapse-折叠块\">#</a>  <code>collapse</code>  折叠块</h1>\n<p>本功能基于 <code>markdown-it-container</code> <br>\n 标签为：</p>\n<p>–|--<br>\n 开始行 | <code>+++[风格颜色] [标题文字]</code> <br>\n 结束行 | <code>+++</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++ 默认默认 这里是一段文字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++ 下划线 ++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+++primary 紫色</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>:::info</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参考信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>:::</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- 第二行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+++info  蓝色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>;;;id3 卡片 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>;;;id3 卡片 2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+++success 绿色</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#123;% links %&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>- site: 優萌初華</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  url: https:&#x2F;&#x2F;shoka.lostyu.me</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  color: &quot;#e9546b&quot;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>&#123;% endlinks %&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>+++warning 黄色</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>!! 警告警告警告警告警告！！&#123;.bulr&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>[label]&#123;.label .success&#125;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+++danger 红色</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>[danger]&#123;.label .danger&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+++</pre></td></tr></table></figure><details><summary>默认默认 这里是一段文字</summary><div>\n<p><ins>下划线</ins></p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片1\">\n<p>这里是卡片 1 的内容<br>\n<ins class=\"wavy\">波浪线</ins></p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p><span class=\"spoiler bulr\" title=\"...\">警告警告警告警告警告</span><br>\n<span class=\"label success\"> label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<h1 id=\"tasklist-待办事项\"><a class=\"markdownIt-Anchor\" href=\"#tasklist-待办事项\">#</a>  <code>taskList</code>  待办事项</h1>\n<p>本功能基于 <code>markdown-it-task-checkbox</code> 。<br>\n可以利用 <code>markdown-it-attrs</code>  添加风格颜色，只可以给 <code>ul</code>  标签添加，需要新建两行。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- [ ] 这是一个小叉叉</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- [x] 这是一个红色勾勾</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#123;.danger&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- [ ] 未完成</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>- [x] 完成</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#123;.primary&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- [ ] 未完成</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>- [x] 默认颜色</pre></td></tr></table></figure><ul class=\"task-list danger\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> 这是一个小叉叉</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> 这是一个红色勾勾</label></li>\n</ul>\n<ul class=\"task-list primary\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\"><label for=\"cbx_3\"> 完成</label></li>\n</ul>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> 未完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\"><label for=\"cbx_5\"> 默认颜色</label></li>\n</ul>\n<h1 id=\"furigana文字注音\"><a class=\"markdownIt-Anchor\" href=\"#furigana文字注音\">#</a>  <code>furigana</code>  文字注音</h1>\n<p>原本用于日语汉字假名注音，但别的注音也可以。<br>\n为了兼容性，采用 <code>markdown-it-ruby</code>  的基本格式： <code>&#123;文字^注音&#125;</code> ，并且为了兼容表格，将分隔符由 <code>|</code>  换成了 <code>^</code> 。<br>\n注音分隔基于 <code>furigana-markdown-it</code> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZnVyaWdhbmEtbWFya2Rvd24taXQjcXVpY2stdXNhZ2U=\"> 显示说明看这里</span></p>\n<p>–|--<br>\n <code>&#123;取り返す^とりかえす&#125;</code> |<ruby> 取<rp>【</rp><rt>と</rt><rp>】</rp>り<rt></rt>返<rp>【</rp><rt>かえ</rt><rp>】</rp>す<rt></rt></ruby><br>\n <code>&#123;可愛い犬^か+わい・い・いぬ&#125;</code> |<ruby> 可愛<rp>【</rp><rt>かわい</rt><rp>】</rp>い<rt></rt>犬<rp>【</rp><rt>いぬ</rt><rp>】</rp></ruby><br>\n <code>&#123;可愛い犬^か・わい・いいぬ&#125;</code> |<ruby> 可<rp>【</rp><rt>か</rt><rp>】</rp>愛<rp>【</rp><rt>わい</rt><rp>】</rp>い<rt></rt>犬<rp>【</rp><rt>いぬ</rt><rp>】</rp></ruby><br>\n <code>&#123;アクセラレータ^accelerator&#125;</code>  | <ruby>アクセラレータ<rp>【</rp><rt>accelerator</rt><rp>】</rp></ruby><br>\n <code>&#123;accelerator^アクセラレータ&#125;</code>  | <ruby>accelerator<rp>【</rp><rt>アクセラレータ</rt><rp>】</rp></ruby><br>\n <code>&#123;食べる^たべる&#125;</code>  | <ruby>食<rp>【</rp><rt>た</rt><rp>】</rp>べる<rt></rt></ruby><br>\n <code>&#123;食べる^=たべる&#125;</code>  | <ruby>食べる<rp>【</rp><rt>たべる</rt><rp>】</rp></ruby><br>\n <code>&#123;あいうえお^*&#125;</code>  | <ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby><br>\n <code>&#123;あいうえお^*❤&#125;</code>  | <ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby><br>\n <code>&#123;常用账号^contact&#125;</code> |<ruby> 常用账号<rp>【</rp><rt>contact</rt><rp>】</rp></ruby></p>\n<h1 id=\"media多媒体\"><a class=\"markdownIt-Anchor\" href=\"#media多媒体\">#</a>  <code>media</code>  多媒体</h1>\n<p>本功能基于 Hexo Tag 功能，使用 <code>media</code>  标签，目前可选择两种类型，即 <code>audio</code>  和 <code>video</code> 。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% media audio %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>... 音频列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#123;% media video %&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>... 视频列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr></table></figure><p>标签包绕一段 <code>yml</code>  格式的内容，格式与<a href=\"../config/#%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90\">背景音乐</a>的配置类似。</p>\n<p>亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>举个栗子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;% media audio %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- title: 列表 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  list:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2943811283</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2297706586</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- title: 列表 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  list:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    - https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;playlist?id&#x3D;2031842656</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#123;% media video %&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>- name: &quot;测试 1&quot;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  url: https:&#x2F;&#x2F;cdn.kastatic.org&#x2F;ka-youtube-converted&#x2F;O_nY1TM2RZM.mp4&#x2F;O_nY1TM2RZM.mp4#t&#x3D;0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>- name: &quot;测试 2&quot;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  url: https:&#x2F;&#x2F;cdn.kastatic.org&#x2F;ka-youtube-converted&#x2F;O_nY1TM2RZM.mp4&#x2F;O_nY1TM2RZM.mp4#t&#x3D;0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#123;% endmedia %&#125;</pre></td></tr></table></figure><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"列表1\",\"list\":[\"https://music.163.com/#/playlist?id=2943811283\",\"https://music.163.com/#/playlist?id=2297706586\"]},{\"title\":\"列表2\",\"list\":[\"https://music.163.com/#/playlist?id=2031842656\"]}]'></div></div>\n<div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"测试1\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"},{\"name\":\"测试2\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"}]'></div></div>\n<h1 id=\"math数学公式\"><a class=\"markdownIt-Anchor\" href=\"#math数学公式\">#</a>  <code>math</code>  数学公式</h1>\n<p>本功能基于 <code>markdown-it-katex</code> <br>\n 在 Front Matter 中添加 <code>math: true</code>  以支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\"> KaTex</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 数学公式显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>math: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>行内公式：$\\sqrt &#123;3x-1&#125;+(1+x)^2$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$$\\begin &#123;array&#125;&#123;c&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#x3D; \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; &#x3D; 4 \\pi \\rho \\\\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; &#x3D; \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; &#x3D; 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\\end &#123;array&#125;$$</pre></td></tr></table></figure><p>行内公式：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sqrt{3x-1}+(1+x)^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">3</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>独立块显示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.15999999999999992em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent=\"true\"><mi mathvariant=\"bold\">j</mi><mo>⃗</mo></mover><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mover accent=\"true\"><mn mathvariant=\"bold\">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp;\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0\n\n\\end{array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.1938640000000005em;vertical-align:-1.846932em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">E</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.072377em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">B</span></span></span></span><span style=\"top:-2.96911em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9774399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">j</span></span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">E</span></span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.15216em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9145549999999996em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92744em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">0</span></span></span></span><span style=\"top:-3.21344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-1.585445em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.846932em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469320000000002em;\"><span style=\"top:-4.346932000000001em;\"><span class=\"pstrut\" style=\"height:3.072377em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">ρ</span></span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<h1 id=\"mermaid流程图\"><a class=\"markdownIt-Anchor\" href=\"#mermaid流程图\">#</a>  <code>mermaid</code>  流程图</h1>\n<p>本功能基于 <code>markdown-it-mermaid</code> <br>\n 在 Front Matter 中添加 <code>mermaid: true</code>  以支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXJtYWlkLWpzLmdpdGh1Yi5pby9tZXJtYWlkLyMv\"> Mermaid</span></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 流程图显示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mermaid: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>graph LR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    A [Square Rect] -- Link text --&gt; B ((Circle))</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    A --&gt; C (Round Rect)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    B --&gt; D &#123;Rhombus&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    C --&gt; D</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#96;&#96;&#96;mermaid</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>sequenceDiagram</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loop Daily query</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Alice-&gt;&gt;Bob: Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        alt is sick</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Bob-&gt;&gt;Alice: Not so good :(</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        else is well</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Bob-&gt;&gt;Alice: Feeling fresh like a daisy</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        opt Extra response</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Bob-&gt;&gt;Alice: Thanks for asking</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        end</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    end</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>&#96;&#96;&#96;</pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A<span class=\"token text string\">[Square Rect]</span> <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Link text</span> <span class=\"token arrow operator\">--></span></span> B<span class=\"token text string\">((Circle))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    A <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">(Round Rect)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    B <span class=\"token arrow operator\">--></span> D<span class=\"token text string\">&#123;Rhombus&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    C <span class=\"token arrow operator\">--></span> D</pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">loop</span> Daily query</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Alice<span class=\"token arrow operator\">->></span>Bob<span class=\"token operator\">:</span> Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">alt</span> is sick</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Not so good <span class=\"token operator\">:</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span> is well</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Feeling fresh like a daisy</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">opt</span> Extra response</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            Bob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Thanks for asking</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr></table></figure>",
            "tags": [
                "Hexo",
                "教程"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/shoka/display/",
            "url": "http://yunyat.cloud/hexo/shoka/display/",
            "title": "Step.3 界面显示",
            "date_published": "2020-08-13T13:12:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p><a href=\"/computer-science/note/theme-shoka-doc/\">🚀快速开始</a> - <a href=\"/computer-science/note/theme-shoka-doc/dependents/\">💌依赖插件</a> - <a href=\"/computer-science/note/theme-shoka-doc/config/\">📌基本配置</a> - <a href=\"/computer-science/note/theme-shoka-doc/display/\"><strong>🌈界面显示</strong></a> - <a href=\"/computer-science/note/theme-shoka-doc/special/\">🦄特殊功能</a></p>\n</div>\n<h1 id=\"首页置顶文章\"><a class=\"markdownIt-Anchor\" href=\"#首页置顶文章\">#</a> 首页置顶文章</h1>\n<p>在文章的 Front Matter 设置 <code>sticky: true</code> ，则该文章将显示在首页最上方的 <code>置顶文章</code> 列。<br>\n多篇文章按照发布时间倒序排列，不分页。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: 置顶文章</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sticky: true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>---</pre></td></tr></table></figure><h1 id=\"首页精选分类\"><a class=\"markdownIt-Anchor\" href=\"#首页精选分类\">#</a> 首页精选分类</h1>\n<p>想要在首页显示分类翻转块，需要按照以下示例的方式，给需要显示的分类加上封面图。</p>\n<ol>\n<li>\n<p>首先，修改站点配置：<br>\n找到 <code>category_map:</code> ，配置每个分类对应的英文映射，比如：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">C++</span><span class=\"token punctuation\">:</span> cpp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">二进制杂谈</span><span class=\"token punctuation\">:</span> note</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">计算机程序设计（C++）-西安交通大学</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">零基础学Java语言-浙江大学-翁恺</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">面向对象程序设计-Java语言-浙江大学-翁恺</span><span class=\"token punctuation\">:</span> course<span class=\"token punctuation\">-</span><span class=\"token number\">2</span></pre></td></tr></table></figure><blockquote>\n<p>注意：hexo 会自动处理路径中的特殊字符，~`!@#$%<span></span>^&amp;*()-_+=<span></span>{}|\\;:&quot;’&lt;&gt;,.? 以及空格，这些全部会被替换成 <code>-</code> <br>\n 所以避免在设置中使用上述字符，否则可导致无法抓取到目录下的 <code>cover.jpg</code></p>\n</blockquote>\n</li>\n<li>\n<p>在 <code>&lt;root&gt;/source/_posts</code>  文件夹相应的目录里，存放封面图<br>\n例子：如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9qYXZhL2NvdXJzZS0xL3dlZWstMS8=\">第 1 周 计算</span> 这篇文章。<br>\n所处的分类是</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">-</span> <span class=\"token punctuation\">[</span>计算机科学<span class=\"token punctuation\">,</span> Java<span class=\"token punctuation\">,</span> 零基础学Java语言<span class=\"token punctuation\">-</span>浙江大学<span class=\"token punctuation\">-</span>翁恺<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>现在需要在首页显示 <code>零基础学Java语言-浙江大学-翁恺</code> 这个分类，翻转卡片后，显示这个分类下的文章们。<br>\n而该分类经过英文映射，它的路径将是 <code>/computer-science/java/course-1/</code> 。</p>\n<p>那么，请在 <code>&lt;root&gt;/source/_posts/computer-science/java/course-1/</code>  的目录下放置 <code>cover.jpg</code>  文件。<br>\n只要 <code>分类路径</code> 对应的目录下<strong>存在</strong> <code>cover.jpg</code>  文件，这个分类就会在首页显示。<br>\n在进行 <code>hexo g</code>  时，本分类的封面图会自动被复制到 public 目录里相应的位置。</p>\n</li>\n<li>\n<p>事实上，为了方便文章管理，这个分类下所有文章的 md 文件，我都会放在 <code>&lt;root&gt;/source/_posts/computer-science/java/course-1/</code>  这个目录下。</p>\n<p>且站点配置文件里，永久链接设置如下</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/</pre></td></tr></table></figure><p><code>hexo g</code>  后，文章的 html 文件们将全部生成到 <code>&lt;root&gt;/public/computer-science/java/course-1/</code>  目录。<br>\n具体可以查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvc2hva2E=\">本博客的 github 仓库</span>。</p>\n</li>\n<li>\n<p>文章详情界面中的 <code>系列文章</code> ，显示的是与当前文章同一分类的其他文章，并按照文章名正序排序。</p>\n</li>\n</ol>\n<blockquote>\n<p>o (*￣▽￣*) ゞ<br>\n其实，不设置 <code>category_map</code>  也可以，只要在分类路径对应的文件夹下存在 <code>cover.jpg</code>  文件就行。<br>\n现在，这项功能与 <code>category_dir</code>  的配置也无关， <code>hexo g</code>  生成后，图片会自动被转移到 <code>category_dir</code>  的相关子目录下。</p>\n</blockquote>\n<h1 id=\"文章封面图\"><a class=\"markdownIt-Anchor\" href=\"#文章封面图\">#</a> 文章封面图</h1>\n<ul>\n<li>\n<p>如果文章的 Front Matter 设置了 <code>cover: image path</code> ，则封面会显示这张图片。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>举个栗子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Images</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> assets/wallpaper<span class=\"token punctuation\">-</span>2572384.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者写成</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//placehold.it/350x150.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>这里 <code>cover</code>  的值可以是位于 <code>source</code>  目录里的图片文件，此处是 <code>&lt;root&gt;/source/assets/wallpaper-2572384.jpg</code>  文件，也可以是一个某网址。</p>\n</li>\n<li>\n<p>如果文章是一个 <code>gallery post</code> ，即 Front Matter 设置了 <code>photos</code> ，则会封面会显示设置的第一张图片。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>举个栗子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Gallery Post</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">photos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>2572384.jpg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>2311325.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">-</span> assets/wallpaper<span class=\"token punctuation\">-</span>878514.jpg</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">-</span> http<span class=\"token punctuation\">:</span>//placehold.it/350x150.jpg</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>此时默认会显示第一个图片，即位于 <code>&lt;root&gt;/source/assets/</code>  目录里的 <code>wallpaper-2572384.jpg</code> 。</p>\n</li>\n<li>\n<p>如果站点配置中设置了 <code>post_asset_folder: true</code> ，那么上述本地图片路径应为 <code>&lt;root&gt;/source/_posts/文章同名的文件夹/assets/wallpaper-2572384.jpg</code> ，当然此时 <code>assets</code>  目录可以省掉。</p>\n</li>\n<li>\n<p>如果以上设置均不存在，将显示一张随机图片，<a href=\"../config/#%E9%9A%8F%E6%9C%BA%E5%9B%BE%E5%BA%93\">随机图库配置戳此</a>。</p>\n</li>\n</ul>\n<h1 id=\"图片展示与相册\"><a class=\"markdownIt-Anchor\" href=\"#图片展示与相册\">#</a> 图片展示与相册</h1>\n<p>在文章的 Front Matter 设置 <code>fancybox: false</code> ，可以关闭文章页的图片展示功能。<br>\n使用<span class=\"exturl\" data-url=\"aHR0cDovL21pcm9tYW5uaW5vLmdpdGh1Yi5pby9KdXN0aWZpZWQtR2FsbGVyeS8=\"> Justified-Gallery</span> 对 Gallery Post 内图案进行排列。</p>\n<p>下面介绍一些小技巧：</p>\n<ol>\n<li>让图案下方显示 <code>title</code>  的 markdown 代码</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>![这里是 alt](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicis081o9j20zk0m8dmr.jpg &quot;这里是 title&quot;)</pre></td></tr></table></figure><p><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicis081o9j20zk0m8dmr.jpg\" alt=\"这里是alt\" title=\"这里是title\"></p>\n<ol start=\"2\">\n<li>设置图片的大小</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicis081o9j20zk0m8dmr.jpg &quot;定义图片大小 - 固定宽度和高度&quot;)&#123;height&#x3D;&quot;100px&quot; width&#x3D;&quot;400px&quot;&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicis081o9j20zk0m8dmr.jpg &quot;定义图片大小 - 固定宽度&quot;)&#123;width&#x3D;&quot;400px&quot;&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicis081o9j20zk0m8dmr.jpg &quot;定义图片大小 - 固定高度&quot;)&#123;height&#x3D;&quot;100px&quot;&#125;</pre></td></tr></table></figure><p><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicis081o9j20zk0m8dmr.jpg\" alt=\"\" title=\"定义图片大小-固定宽度和高度\" height=\"100px\" width=\"400px\"></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicis081o9j20zk0m8dmr.jpg\" alt=\"\" title=\"定义图片大小-固定宽度\" width=\"400px\"></p>\n<p><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicis081o9j20zk0m8dmr.jpg\" alt=\"\" title=\"定义图片大小-固定高度\" height=\"100px\"></p>\n<ol start=\"3\">\n<li>除了在 Front Matter 里配置 <code>photos</code>  可以显示相册图案列表外，还可以这样写</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>## 图案列表 No.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1giclfdu6exj20zk0m87hw.jpg &quot;这里是 title&quot;)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1giclflwv2aj20zk0m84qp.jpg)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1giclg5ms2rj20zk0m8u0x.jpg)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1giclhnx9glj20zk0m8npd.jpg)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#123;.gallery&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>## 图案列表 No.2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicitht3xtj20zk0m8k5v.jpg)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1giclil3m4ej20zk0m8tn8.jpg)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gicljgocqbj20zk0m8e81.jpg)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>![](https:&#x2F;&#x2F;tva3.sinaimg.cn&#x2F;large&#x2F;6833939bly1gipetfk5zwj20zk0m8e81.jpg)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#123;.gallery data-height&#x3D;&quot;120&quot;&#125;</pre></td></tr></table></figure><p><code>data-height</code>  用来设置每行的高度，默认为 <code>220</code></p>\n<h2 id=\"图案列表no1\"><a class=\"markdownIt-Anchor\" href=\"#图案列表no1\">#</a> 图案列表 No.1</h2>\n<p class=\"gallery\"><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1giclfdu6exj20zk0m87hw.jpg\" alt=\"\" title=\"这里是title\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1giclflwv2aj20zk0m84qp.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1giclg5ms2rj20zk0m8u0x.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1giclhnx9glj20zk0m8npd.jpg\" alt=\"\"></p>\n<h2 id=\"图案列表no2\"><a class=\"markdownIt-Anchor\" href=\"#图案列表no2\">#</a> 图案列表 No.2</h2>\n<p class=\"gallery\" data-height=\"120\"><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicitht3xtj20zk0m8k5v.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1giclil3m4ej20zk0m8tn8.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicljgocqbj20zk0m8e81.jpg\" alt=\"\"><br>\n<img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gipetfk5zwj20zk0m8e81.jpg\" alt=\"\"></p>\n<h1 id=\"自定义页面配色\"><a class=\"markdownIt-Anchor\" href=\"#自定义页面配色\">#</a> 自定义页面配色</h1>\n<p>主题配色全部在 <code>&lt;root&gt;/themes/shoka/source/css/_colors.styl</code>  文件中，可以自行查看。</p>\n<p>在 <code>&lt;root&gt;/source/_data/</code>  目录新建文件 <code>colors.styl</code> ，在此文件中添改样式。</p>\n<blockquote>\n<p>自定义 <code>colors.styl</code>  文件将覆盖主题默认样式，为了避免出错，请保证原有样式名均存在，在原有样式基础上进行增删改。</p>\n</blockquote>\n<p>主题支持在 <code>&lt;root&gt;/source/_data/</code>  目录建立三个自定义 <code>styl</code>  文件：</p>\n<table>\n<thead>\n<tr>\n<th>自定义文件名</th>\n<th>对应默认样式文件</th>\n<th>样式功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>colors.styl</code></td>\n<td><code>_colors.styl</code></td>\n<td>页面配色</td>\n</tr>\n<tr>\n<td><code>iconfont.styl</code></td>\n<td><code>_iconfont.styl</code></td>\n<td><a href=\"../config/#iconfont%E5%9B%BE%E6%A0%87\">图标样式</a></td>\n</tr>\n<tr>\n<td><code>custom.styl</code></td>\n<td>-</td>\n<td>任意自定义样式</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"自定义主题图片\"><a class=\"markdownIt-Anchor\" href=\"#自定义主题图片\">#</a> 自定义主题图片</h1>\n<p>如果想要修改主题的 <code>&lt;root&gt;/themes/shoka/source/images/</code>  目录内的某张图片，请在 <code>&lt;root&gt;/source/_data/</code>  目录新建目录 <code>images</code> ，并在这个文件夹中添加<ins>同名</ins>文件，部署时将自动覆盖主题内的默认图片。</p>\n<p>可以用此方法自定义头像、打赏二维码等图片，并且避免覆盖更新主题时遗失自定义文件。</p>\n<h1 id=\"自定义语言包\"><a class=\"markdownIt-Anchor\" href=\"#自定义语言包\">#</a> 自定义语言包</h1>\n<p>本功能参考 NexT，主要可以用来定义菜单等处显示的文字，且可以方便主题无脑覆盖升级。</p>\n<p>在 <code>&lt;root&gt;/source/_data/</code>  目录新建文件 <code>languages.yml</code> 。</p>\n<p>按照以下格式添加配置项：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># language</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">zh-CN</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># items</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">copyright</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\"># the translation you perfer</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 本文博主</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">en</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">travellings</span><span class=\"token punctuation\">:</span> Travellings</pre></td></tr></table></figure><p>可以参考主题目录下的 <code>example/source/_data</code>  文件夹。</p>\n<blockquote>\n<p>站点配置及文件的 Front Matter 中， <code>language</code>  项只支持 <code>zh-CN</code> 、 <code>zh-HK</code> 、 <code>zh-TW</code> 、 <code>ja</code> 、 <code>en</code> 。<br>\n类似写成 <code>zh_CN</code>  这样是不可以的。</p>\n</blockquote>\n",
            "tags": [
                "Hexo",
                "教程"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/shoka/config/",
            "url": "http://yunyat.cloud/hexo/shoka/config/",
            "title": "Step.2 基本配置",
            "date_published": "2020-08-13T12:56:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p><a href=\"/computer-science/note/theme-shoka-doc/\">🚀快速开始</a> - <a href=\"/computer-science/note/theme-shoka-doc/dependents/\">💌依赖插件</a> - <a href=\"/computer-science/note/theme-shoka-doc/config/\"><strong>📌基本配置</strong></a> - <a href=\"/computer-science/note/theme-shoka-doc/display/\">🌈界面显示</a> - <a href=\"/computer-science/note/theme-shoka-doc/special/\">🦄特殊功能</a></p>\n</div>\n<h1 id=\"站点别称\"><a class=\"markdownIt-Anchor\" href=\"#站点别称\">#</a> 站点别称</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume Shoka</pre></td></tr></table></figure><p>这里设置的名称代替 Logo，显示在页面顶部，以及页尾©️处</p>\n<h1 id=\"静态文件目录\"><a class=\"markdownIt-Anchor\" href=\"#静态文件目录\">#</a> 静态文件目录</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/amehime/shoka@latest/</span></pre></td></tr></table></figure><p>默认值是 <code>/</code> ，指使用本地静态文件<br>\n可以修改成 <code>//cdn.jsdelivr.net/gh/您的github用户名/您的项目名@latest/</code>  这种形式，以使用 jsDelivr 进行加速。<br>\nPS：jsDelivr 并不是实时更新，重新生成文件后需要耐心等待</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span> images</pre></td></tr></table></figure><p>静态文件所处目录的实际目录名，这些一般不改。</p>\n<h1 id=\"夜间模式\"><a class=\"markdownIt-Anchor\" href=\"#夜间模式\">#</a> 夜间模式</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">darkmode</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># true</span></pre></td></tr></table></figure><p>默认情况下，是否开启夜间模式取决于（优先级从高到低）：</p>\n<ol>\n<li>访客点击页面头部切换按钮的自行选择</li>\n<li>访客切换了浏览设备的主题色调</li>\n<li>您的 <code>darkmode</code>  配置项</li>\n</ol>\n<h1 id=\"自动定位\"><a class=\"markdownIt-Anchor\" href=\"#自动定位\">#</a> 自动定位</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">auto_scroll</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># false</span></pre></td></tr></table></figure><p>默认情况下，再次打开页面时，会自动滚动到上次浏览的位置。<br>\n这个选项设为 <code>false</code>  时将停用此功能。</p>\n<h1 id=\"加载动画\"><a class=\"markdownIt-Anchor\" href=\"#加载动画\">#</a> 加载动画</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 是否显示页面加载动画 loading-cat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">loader</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 当初次打开页面时，显示加载动画</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">switch</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># tab 切换到其他页面时，显示加载动画</span></pre></td></tr></table></figure><p>tab 切换后只是显示 loading 动画，实际并未重新加载页面</p>\n<h1 id=\"页面特效\"><a class=\"markdownIt-Anchor\" href=\"#页面特效\">#</a> 页面特效</h1>\n<p>单击页面的烟花效果配置如下</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">fireworks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否启用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 烟花颜色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(255,182,185,.9)\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(250,227,217,.9)\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(187,222,214,.9)\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(138,198,209,.9)\"</span></pre></td></tr></table></figure><h1 id=\"加载谷歌字体\"><a class=\"markdownIt-Anchor\" href=\"#加载谷歌字体\">#</a> 加载谷歌字体</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">font</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># Font options:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># `external: true` will load this font family from `host` above.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># `family: Times New Roman`. Without any quotes.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\"># Global font settings used for all elements inside &lt;body>.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Mulish</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\"># Font settings for alternate title.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">logo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Fredericka the Great</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\"># Font settings for site title.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif JP</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\"># Font settings for headlines (&lt;h1> to &lt;h6>).</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">headings</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif SC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\"># Font settings for posts.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\"># Font settings for &lt;code> and code blocks.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">codes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Inconsolata</pre></td></tr></table></figure><p>此功能基本参考 NexT。<br>\n加粗标题的字体总是使用 <code>Noto Serif</code> ，为了正确友好的显示日文中的汉字，会先后加载 <code>headings</code>  和 <code>title</code>  的字体设置。</p>\n<h1 id=\"iconfont图标\"><a class=\"markdownIt-Anchor\" href=\"#iconfont图标\">#</a>  <code>iconfont</code>  图标</h1>\n<p>主题没有直接使用 Font Awesome，是因为用不到那么多 icon 感觉非常浪费，因此在 Iconfont 上重新建立了一个项目。<br>\n <code>font-family</code>  设为 <code>ic</code> ，所有字体样式前缀为 <code>i-</code> ，具体参见 <code>&lt;root&gt;/themes/shoka/source/css/_iconfont.styl</code> 。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># project of https://www.iconfont.cn/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># //at.alicdn.com/t/font_1832207_c8i9n1ulxlt.css => 1832207_c8i9n1ulxlt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">iconfont</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1832207_c8i9n1ulxlt\"</span></pre></td></tr></table></figure><p>如果需要添加或修改，请留言告诉我您的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v\"> Iconfont</span> 用户名，我将把您添加到目前的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24vbWFuYWdlL2luZGV4P21hbmFnZV90eXBlPW15cHJvamVjdHMmYW1wO3Byb2plY3RJZD0xODMyMjA3\">项目</span>中。</p>\n<p>添加权限为 <code>只读</code> ，此后您可以任意全选，批量保存到购物车中，添加至您自己的项目里，并将主题配置文件中的 <code>iconfont</code>  值改为您的项目。</p>\n<p>注意，您的项目应设置 <code>FontClass/Symbol 前缀</code> 为 <code>i-</code> 。</p>\n<p>在 <code>&lt;root&gt;/source/_data/</code>  目录新建文件 <code>iconfont.styl</code> ，把新增或修改的图标样式复制到这个文件中。</p>\n<blockquote>\n<p>自定义 <code>iconfont.styl</code>  文件将覆盖主题默认样式，为了避免出错，请保证原有样式名均存在，在原有样式基础上进行增删改。</p>\n</blockquote>\n<h1 id=\"菜单与社交按钮\"><a class=\"markdownIt-Anchor\" href=\"#菜单与社交按钮\">#</a> 菜单与社交按钮</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> /about/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> user</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># friends: /friends/ || heart</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\"># links: /links/ || magic</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/user/home?id=yourid || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//about.me/yourname <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> address<span class=\"token punctuation\">-</span>card <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#3b5998\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr></table></figure><p>如上，使用 <code>||</code>  作为分隔符，依次为  <code>链接 || 图标 || 颜色</code> 。<br>\n注意，只需要写图标名称，如 <code>github</code> ，则会自动转换为 <code>ic i-github</code> 。<br>\n十六进制颜色码需要 <code>&quot;&quot;</code>  包绕。</p>\n<p><code>menu</code>  支持一级子目录，子目录设置中的第一项必须为 <code>default</code> ，用来定义父级按钮的样式。</p>\n<p>菜单显示文字可以在语言包中定义，<a href=\"../display/#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80%E5%8C%85\">具体请戳这里</a></p>\n<h1 id=\"边栏配置\"><a class=\"markdownIt-Anchor\" href=\"#边栏配置\">#</a> 边栏配置</h1>\n<p>边栏可以选择在左侧，或右侧<br>\n修改头像文件的地址，相对于静态文件目录 <code>images</code>  中配置的路径。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># Sidebar Position.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> left</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#position: right</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># Replace the default avatar image and set the url here.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> avatar.jpg</pre></td></tr></table></figure><p>可以将自己的图片放在 <code>&lt;root&gt;/source/_data/images/</code>  目录，甚至以同名覆盖主题内默认的头像图片，<a href=\"../display/#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%9B%BE%E7%89%87\">具体请戳这里</a></p>\n<h1 id=\"底部widgets\"><a class=\"markdownIt-Anchor\" href=\"#底部widgets\">#</a> 底部 widgets</h1>\n<p>目前页面底部可以显示两个小部件，即 <code>随机文章</code> 和 <code>最近评论</code> 。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">widgets</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">random_posts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 显示随机文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">recent_comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 显示最近评论</span></pre></td></tr></table></figure><h1 id=\"字数及阅读时间统计\"><a class=\"markdownIt-Anchor\" href=\"#字数及阅读时间统计\">#</a> 字数及阅读时间统计</h1>\n<p>安装好 <code>hexo-symbols-count-time</code>  插件后，不需要修改站点配置文件，直接使用插件默认配置就行。</p>\n<p>需要修改主题配置文件，找到两处 <code>cout</code> ，修改为 <code>true</code> ：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 页尾全站统计</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 文章界面统计</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h1 id=\"文章评论\"><a class=\"markdownIt-Anchor\" href=\"#文章评论\">#</a> 文章评论</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">如何获取 LeanCloud 的 appId 和 appKey</span>。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your_appkey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mp <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 文章访问量统计</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 不记录 IP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 默认打开评论框输入特效</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 新朋友</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 主人</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 小伙伴</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> 金主粑粑</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-orange)\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-aqua)\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-pink)\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\"># - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\"># - hash of friend@email.com</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\"># - hash of friend2@email.com</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\"># - hash of investor1@email.com</span></pre></td></tr></table></figure><p>tag 标签显示在评论者名字的后面，默认是 <code>tagMeta.visitor</code>  对应的值。<br>\n在 <code>tagMeta</code>  和 <code>tagColor</code>  中，除了 <code>visitor</code>  这个 key 不能修改外，其他 key 都可以换一换，但需要保证一致性。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>举个栗子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 游客</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">admin</span><span class=\"token punctuation\">:</span> 管理员</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">waifu</span><span class=\"token punctuation\">:</span> 我老婆</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#855194\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">admin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#a77c59\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">waifu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#ed6ea0\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">admin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\"># - hash of admin@email.com</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">waifu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\"># - hash of waifu@email.com</span></pre></td></tr></table></figure><p>在文章 Front Matter 中也可以配置上述参数，访问该文章页面时，将覆盖全局配置。<br>\n尤其可以用来配置一个特殊的 placeholder。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1. 提问前请先仔细阅读本文档⚡\\n2. 页面显示问题💥，请提供控制台截图📸或者您的测试网址\\n3. 其他任何报错💣，请提供详细描述和截图📸，祝食用愉快💪\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><p>评论通知与管理工具建议使用这个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Rlc2VydHNQL1ZhbGluZS1BZG1pbg==\"> Valine-Admin</span>。<br>\n注意 <code>SITE_URL</code>  需要以 <code>/</code>  结尾。</p>\n<p>如果某一篇文章需要关闭评论功能，则在文章 Front Matter 中配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 关闭评论</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">comment</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><h1 id=\"背景音乐\"><a class=\"markdownIt-Anchor\" href=\"#背景音乐\">#</a> 背景音乐</h1>\n<p>在主题配置文件中，设置全局播放列表。<br>\n在文章的 Front Matter 中，设置文章专有播放列表，访问该文章页面时，将覆盖全局配置。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>单列表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/song<span class=\"token punctuation\">?</span>id=1387098940</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2088001742</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//www.xiami.com/collect/250830668</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//y.qq.com/n/yqq/playsquare/3535982902.html</pre></td></tr></table></figure><p>如上，可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲，可以同时填写多个。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>多列表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2943811283</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2297706586</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr></table></figure><p>如果需要自定义媒体文件，可以按照以下格式填写：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>单列表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目1\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr></table></figure><figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>多列表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目2\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr></table></figure><p>如果要关闭当前页面的背景音乐播放器，则在文章 Front Matter 中配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 关闭背景音乐</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></pre></td></tr></table></figure><h1 id=\"随机图库\"><a class=\"markdownIt-Anchor\" href=\"#随机图库\">#</a> 随机图库</h1>\n<ul>\n<li>\n<p>默认的图片列表位于 <code>&lt;root&gt;/themes/shoka/_images.yml</code>  中。<br>\n使用了渣浪图库，使用一些上传工具，比如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">这里</span><br>\n上传后图片的链接是 <code>http://wx4.sinaimg.cn/large/6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code> 。<br>\n只需要新一行写上 <code>- 6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code> 。</p>\n<p>如果想要自定义，则在 <code>&lt;root&gt;/source/_data/</code>  目录新建一个 <code>images.yml</code>  文件，这个文件中的图片至少 6 枚，将完全覆盖默认的图片列表。</p>\n</li>\n<li>\n<p>也可以直接在图片列表 yml 文件中，写上任意外链图片地址</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/qAMYEFXxJcKRsiG.gif</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/rjdhcSgEN8COBPA.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/HKyzSd7NI3mlBpt.jpg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/Y1CBXqgeokEs457.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/Z5W6r2BSoiThHG1.jpg</pre></td></tr></table></figure><ul>\n<li>也可以在主题配置文件中，设置图床 API：</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>比如</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">image_server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://acg.xydwz.cn/api/api.php\"</span></pre></td></tr></table></figure><h1 id=\"加载第三方组件\"><a class=\"markdownIt-Anchor\" href=\"#加载第三方组件\">#</a> 加载第三方组件</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">vendors</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 略略略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 略略略</span></pre></td></tr></table></figure><p>包括</p>\n<p>–|--|–<br>\n <code>pace</code>  | 加载进度条 | 全局<br>\n <code>pjax</code>  | 页面无刷新加载 | 全局<br>\n <code>anime</code>  | js 动画效果 | 全局<br>\n <code>algolia</code>   <code>instantsearch</code> | 基于 algolia 的站内搜索 | 全局<br>\n <code>lazyload</code>  | 图片懒加载 | 全局<br>\n <code>quicklink</code>  | 链接资源预加载 | 全局<br>\n <code>fetch</code>  | 获取播放列表 | 全局<br>\n <code>katex</code>   <code>copy_tex</code>  | 数学公式显示及复制 | 按需<br>\n <code>fancybox</code>  | 图片放大显示及排列 | 按需<br>\n <code>valine</code>  | 基于 LeanCloud 的评论系统及文章阅读次数统计 | 按需<br>\n <code>chart</code>  | 图表显示 | 按需</p>\n<p>以上文件加载全部基于 jsDelivr，并对全局加载的组件进行了文件合并。<br>\n如果不明白啥意思，则不要轻易修改。</p>\n<div class=\"note danger\">\n<p>主题版本升级的时候，可能会修改这里。<br>\n如果修改过主题默认 <code>_config.yml</code> ，记得更新主题时，末尾的 <code>vendors</code>  也要及时修改。</p>\n</div>\n",
            "tags": [
                "Hexo",
                "教程"
            ]
        },
        {
            "id": "http://yunyat.cloud/hexo/shoka/dependents/",
            "url": "http://yunyat.cloud/hexo/shoka/dependents/",
            "title": "Step.1 依赖插件",
            "date_published": "2020-08-13T12:46:48.000Z",
            "content_html": "<div class=\"note primary\">\n<p><a href=\"/computer-science/note/theme-shoka-doc/\">🚀快速开始</a> - <a href=\"/computer-science/note/theme-shoka-doc/dependents/\"><strong>💌依赖插件</strong></a> - <a href=\"/computer-science/note/theme-shoka-doc/config/\">📌基本配置</a> - <a href=\"/computer-science/note/theme-shoka-doc/display/\">🌈界面显示</a> - <a href=\"/computer-science/note/theme-shoka-doc/special/\">🦄特殊功能</a></p>\n</div>\n<div class=\"note warning\">\n<p>请务必将 hexo-renderer-multi-markdown-it 升级到最新版，目前为 0.1.5</p>\n</div>\n<p>Theme Shoka 依赖以下 Hexo 插件</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>npm 地址</th>\n<th>功能</th>\n<th>依赖程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo-renderer-multi-markdown-it</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">链接</span></td>\n<td>md 文件渲染器，压缩 css/js/html</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-autoprefixer</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">链接</span></td>\n<td>给生成的 css 文件们添加浏览器前缀</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-algoliasearch</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hbGdvbGlhc2VhcmNo\">链接</span></td>\n<td>站内搜索功能</td>\n<td>搜索按钮失灵</td>\n</tr>\n<tr>\n<td>hexo-symbols-count-time</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">链接</span></td>\n<td>文章或站点字数及阅读时间统计</td>\n<td>统计没有</td>\n</tr>\n<tr>\n<td>hexo-feed</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1mZWVk\">链接</span></td>\n<td>生成 Feed 文件</td>\n<td>Feed 文件没有</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>没有正确安装以上插件的话，本主题会报错 or 无法正确显示 or 部分功能失效。<br>\n <code>hexo-renderer-multi-markdown-it</code>  请注意升级到最新版</p>\n</blockquote>\n<p>安装完以上插件后，修改站点配置文件，加入相关配置。</p>\n<h1 id=\"multi-markdown-it安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#multi-markdown-it安装与配置\">#</a> multi-markdown-it 安装与配置</h1>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<ol>\n<li>\n<p>安装前，记得务必卸载掉默认的 <code>hexo-renderer-marked</code> ，以及别的 markdown 文件渲染器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> un hexo-renderer-marked <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> remove hexo-renderer-marked</pre></td></tr></table></figure></li>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it</pre></td></tr></table></figure></li>\n<li>\n<p>如果安装缓慢，或者失败<br>\n如报错</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ERROR: Failed to download Chromium r515411<span class=\"token operator\">!</span> Set <span class=\"token string\">\"PUPPETEER_SKIP_CHROMIUM_DOWNLOAD\"</span> <span class=\"token function\">env</span> variable to skip download.</pre></td></tr></table></figure><p>因为有一步需要下载 puppeteer 里的 Chromium 内核，基于天朝内部网络现状，这一步能不能成功要靠科学和运气，所以为了避免安装失败，需要加上 <code>--ignore-scripts</code>  跳过 Chromium 内核的下载。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span> --ignore-scripts</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it --ignore-scripts</pre></td></tr></table></figure><p>puppeteer 主要是用来渲染 mermaid 流程图，只要文章中不使用 mermaid 就没有任何问题，如果要使用 mermaid 建议还是想办法完全安装。</p>\n</li>\n</ol>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<ol>\n<li>加入 <code>markdown</code>  配置，用来渲染 md 文件</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>加入 <code>minify</code>  配置，压缩 css/js/html</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>停用默认代码高亮功能，否则代码块的 mac 样式不能正常显示。<br>\n找到 <code>highlight</code>  和 <code>prismjs</code> ，把 <code>enable</code>  改成 <code>false</code> 。</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr></table></figure><h1 id=\"autoprefixer配置建议\"><a class=\"markdownIt-Anchor\" href=\"#autoprefixer配置建议\">#</a> autoprefixer 配置建议</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr></table></figure><p>缺少这个插件，首页卡片翻转效果在部分浏览器中无法正确显示。</p>\n<h1 id=\"algolia配置建议\"><a class=\"markdownIt-Anchor\" href=\"#algolia配置建议\">#</a> algolia 配置建议</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your appId</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your apiKey</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your adminApiKey</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#\"shoka\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">-</span> path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">-</span> gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">-</span> tags</pre></td></tr></table></figure><h1 id=\"feed配置建议\"><a class=\"markdownIt-Anchor\" href=\"#feed配置建议\">#</a> feed 配置建议</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#站点关键词，用 “,” 分隔</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr></table></figure>",
            "tags": [
                "Hexo",
                "教程"
            ]
        }
    ]
}