<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yunyat.cloud</id>
    <title>上善若水 • Posts by &#34;数据库&#34; category</title>
    <link href="http://yunyat.cloud" />
    <updated>2024-05-14T07:48:52.000Z</updated>
    <category term="Linux" />
    <category term="原创" />
    <category term="电脑技术" />
    <category term="SSH" />
    <category term="Docker" />
    <category term="harbor" />
    <category term="可道云" />
    <category term="markdown" />
    <category term="mermaid" />
    <category term="测试" />
    <category term="hexo" />
    <category term="2023" />
    <category term="年度总结" />
    <category term="记录" />
    <category term="暑假工" />
    <category term="python" />
    <category term="selenium" />
    <category term="java" />
    <category term="junit" />
    <category term="JavaScript" />
    <category term="JSON" />
    <category term="MySQL" />
    <category term="lambda表达式" />
    <category term="java线程" />
    <category term="javafx" />
    <category term="Java" />
    <category term="servlet" />
    <category term="集合" />
    <category term="shell" />
    <category term="Git" />
    <category term="maven" />
    <category term="游戏" />
    <category term="我的世界" />
    <category term="Hexo" />
    <category term="教程" />
    <category term="cAdvisor" />
    <category term="Prometheus" />
    <category term="Grafana" />
    <category term="破解" />
    <category term="Typora" />
    <category term="xmind" />
    <category term="思维导图" />
    <category term="Ubuntu" />
    <category term="分享" />
    <category term="frp" />
    <category term="计算机" />
    <category term="mybatis" />
    <category term="mybatisplus" />
    <category term="springboot" />
    <category term="spring" />
    <category term="ResponseEntity" />
    <category term="springmvc" />
    <category term="spring注解" />
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/database/MySQL-5/</id>
        <title>MySQL-5</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/database/MySQL-5/"/>
        <content type="html">&lt;h3 id=&#34;sql-注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-注入&#34;&gt;#&lt;/a&gt; &lt;em&gt;SQL&lt;/em&gt; 注入&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您通过网页获取用户输入的数据并将其插入一个 &lt;em&gt;MySQL&lt;/em&gt; 数据库，那么就有可能发生 &lt;em&gt;SQL&lt;/em&gt; 注入安全的问题。&lt;/p&gt;
&lt;p&gt;所谓 &lt;em&gt;SQL&lt;/em&gt; 注入，就是通过把 &lt;em&gt;SQL&lt;/em&gt; 命令插入到 &lt;em&gt;Web&lt;/em&gt; 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 &lt;em&gt;SQL&lt;/em&gt; 命令。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 注入是指攻击者通过恶意构造的输入，成功地执行恶意的 &lt;em&gt;SQL&lt;/em&gt; 查询，这通常发生在用户输入未经适当验证或转义的情况下，攻击者试图在输入中插入 &lt;em&gt;SQL&lt;/em&gt; 代码，以执行意外的查询或破坏数据库。&lt;/p&gt;
&lt;p&gt;我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;防范注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#防范注入&#34;&gt;#&lt;/a&gt; 防范注入&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用参数化查询或预编译语句&lt;/strong&gt;：使用参数化查询（&lt;em&gt;Prepared Statements&lt;/em&gt;）可以有效防止 &lt;em&gt;SQL&lt;/em&gt; 注入，因为它们在执行查询之前将输入数据与查询语句分离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入验证和转义&lt;/strong&gt;：对用户输入进行适当的验证，并使用合适的转义函数（如 &lt;code&gt;mysqli_real_escape_string&lt;/code&gt; ）来处理输入，以防止恶意注入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小权限原则&lt;/strong&gt;：给予数据库用户最小的权限，确保它们只能执行必要的操作，以降低潜在的损害。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;em&gt;ORM&lt;/em&gt; 框架&lt;/strong&gt;：使用对象关系映射（&lt;em&gt;ORM&lt;/em&gt;）框架（如&lt;em&gt; Hibernate&lt;/em&gt;、&lt;em&gt;Sequelize&lt;/em&gt;）可以帮助抽象 &lt;em&gt;SQL&lt;/em&gt; 查询，从而降低 &lt;em&gt;SQL&lt;/em&gt; 注入的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;禁用错误消息显示&lt;/strong&gt;：在生产环境中，禁用显示详细的错误消息，以防止攻击者获取有关数据库结构的敏感信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zcWwtaW5qZWN0aW9uLmh0bWw=&#34;&gt;MySQL 及 SQL 注入 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 的函数可以执行很多操作，具体请查看：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==&#34;&gt;MySQL 函数 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql-运算符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-运算符&#34;&gt;#&lt;/a&gt; MySQL 运算符&lt;/h3&gt;
&lt;p&gt;运算符大致分为以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;比较运算符&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcGVyYXRvci5odG1s&#34;&gt;MySQL 运算符 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="MySQL" />
        <updated>2024-05-14T07:48:52.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/database/MySQL-4/</id>
        <title>MySQL-4</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/database/MySQL-4/"/>
        <content type="html">&lt;h3 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 中，&lt;u&gt;事务&lt;/u&gt;(&lt;em&gt; &lt;code&gt;Transaction&lt;/code&gt; &lt;/em&gt;) 是一组 &lt;em&gt;SQL&lt;/em&gt; 语句的执行，它们被视为一个单独的工作单元。这组操作要么全部成功执行，要么全部不执行，是一个 “全有或全无” 的原则. &lt;u&gt;事务&lt;/u&gt;的主要目的是为了保证数据的完整性和一致性.&lt;/p&gt;
&lt;p&gt;基本特性 (&lt;em&gt;&lt;strong&gt;ACID&lt;/strong&gt;&lt;/em&gt; 属性)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;/strong&gt; (&lt;strong&gt;A&lt;/strong&gt;tomicity)
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;事务&lt;/u&gt;是一个原子操作单元，&lt;u&gt;事务&lt;/u&gt;中的所有操作要么全部执行成功，要么全部不执行，不会仅执行部分操作，&lt;u&gt;事务&lt;/u&gt;在执行过程中发生错误，会被回滚（ &lt;code&gt;Rollback&lt;/code&gt; ）到&lt;u&gt;事务&lt;/u&gt;开始前的状态.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性&lt;/strong&gt; (&lt;strong&gt;C&lt;/strong&gt;onsistency)
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;事务&lt;/u&gt;执行前后，数据库从一个一致状态转换到另一个一致状态。即使在&lt;u&gt;事务&lt;/u&gt;执行过程中出现错误，数据库也能够保持数据的完整性.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性&lt;/strong&gt; (&lt;strong&gt;I&lt;/strong&gt;solation)
&lt;ul&gt;
&lt;li&gt;多个&lt;u&gt;事务&lt;/u&gt;并发执行时，每个&lt;u&gt;事务&lt;/u&gt;好像是在独立地处理数据，即一个&lt;u&gt;事务&lt;/u&gt;内部的操作对其他&lt;u&gt;事务&lt;/u&gt;是隔离的，这可以防止并发&lt;u&gt;事务&lt;/u&gt;之间的相互干扰，&lt;u&gt;事务&lt;/u&gt;隔离分为不同级别，包括读未提交（ &lt;code&gt;Read uncommitted&lt;/code&gt; ）、读提交（ &lt;code&gt;read committed&lt;/code&gt; ）、可重复读（ &lt;code&gt;repeatable read&lt;/code&gt; ）和串行化（ &lt;code&gt;Serializable&lt;/code&gt; ）.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性&lt;/strong&gt; (&lt;strong&gt;D&lt;/strong&gt;urability)
&lt;ul&gt;
&lt;li&gt;一旦&lt;u&gt;事务&lt;/u&gt;提交（ &lt;code&gt;commit&lt;/code&gt; ），其结果就是永久性的，即使系统发生故障也不会丢失已提交&lt;u&gt;事务&lt;/u&gt;的结果.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;只有使用了 lnnodb 数据库引擎的数据库或表才支持事务.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;事务操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务操作&#34;&gt;#&lt;/a&gt; 事务操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BEGIN&lt;/code&gt;  或  &lt;code&gt;START TRANSACTION&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;显示开启一个事务.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;COMMIT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;提交事务，并对已对数据库进行的所有修改变为永久.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROLLBACK&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;回滚事务。结束用户的事务，并撤销正在进行的所有未提交的修改.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAVEPOINT &amp;lt;identifier&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;savepoint&lt;/code&gt;  允许在事务中创建一个标记点，一个事务中可以有多个标记点.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RELEASE SAVEPOINT &amp;lt;identifier&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;删除一个事务的标记点，当没有指定的标记点时，该语句会抛出一个异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROLLBACK TO &amp;lt;identifier&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;将事务回滚到标记点.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务处理流程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s21.ax1x.com/2024/05/10/pkZG5WQ.png&#34; alt=&#34;mysql_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 开启一个事务
begin;

# 更改 user 表的 birhdate 列的值为 &#39;2024-05-09&#39; 的值为 NULL
update user as u set birhdate=NULL where u.birhdate=&#39;2024-05-09&#39;;

# 提交事务
commit;
# or 回滚事务
rollback;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10cmFuc2FjdGlvbi5odG1s&#34;&gt;MySQL 事务 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;alter-命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#alter-命令&#34;&gt;#&lt;/a&gt; &lt;em&gt;ALTER&lt;/em&gt; 命令&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ALTER&lt;/em&gt; 命令是用于修改现有数据库表结构的重要语句，通过它，你可以执行多种表结构的更改操作，而不必删除并重新创建表.&lt;/p&gt;
&lt;p&gt;常用操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加列
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ADD column_name data_type;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user add birth_date date;&lt;/code&gt; ，向  &lt;code&gt;user&lt;/code&gt;  表添加  &lt;code&gt;birth_date&lt;/code&gt;  日期列.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除列
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name DROP COLUMN column_name;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user drop column birth_date;&lt;/code&gt; ，将  &lt;code&gt;user&lt;/code&gt;  表的  &lt;code&gt;birth_date&lt;/code&gt;  列删除.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改列的数据类型
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name MODIFY column_name new_data_type;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user modify id varchar(10);&lt;/code&gt;  ，将  &lt;code&gt;id&lt;/code&gt;  列的字段类型修改为变长字符串类型.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改变列名及数据类型：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name CHANGE column_name new_column_name new_data_type;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user change birhdate birth_date date;&lt;/code&gt; ，将  &lt;code&gt;birhdate&lt;/code&gt;  列名改为  &lt;code&gt;birth_date&lt;/code&gt;  并将列类型改为  &lt;code&gt;date&lt;/code&gt; ；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加主键
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ADD PRIMARY KEY(column_name);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user add primary key(id);&lt;/code&gt; ，将  &lt;code&gt;id&lt;/code&gt;  设置为  &lt;code&gt;test_table&lt;/code&gt;  表的主键.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加唯一键
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ADD UNIQUE(column_name);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user add unique(id);&lt;/code&gt; ，将  &lt;code&gt;id&lt;/code&gt;  列设置为唯一键.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加外键约束
&lt;ul&gt;
&lt;li&gt;&lt;code&gt; ALTER TABLE table_name ADD CONSTRAINT fk_constraint_name FOREIGN KEY(column_name) REFERENCES referenced_table_name(referenced_column_name);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table orders add constraint fk_user_id foreign key(id) references user(id);&lt;/code&gt; ，将 &lt;code&gt;orders&lt;/code&gt;  的  &lt;code&gt;id&lt;/code&gt;  设置为外键，引用  &lt;code&gt;user&lt;/code&gt;  的  &lt;code&gt;id&lt;/code&gt;  列.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置默认值
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ALTER column_name SET DEFAULT value;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table orders alter order_date set default &#39;1970-01-01&#39;;&lt;/code&gt; ，将  &lt;code&gt;order_date&lt;/code&gt;  的默认值设置为  &lt;code&gt;1970-01-01&lt;/code&gt;  .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除默认值
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ALTER order_date DROP DEFAULT;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table orders alter order_date drop default;&lt;/code&gt; ，将  &lt;code&gt;order_date&lt;/code&gt;  列的默认值删除.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改表名
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name RENAME TO new_table;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table test_table rename to user_age;&lt;/code&gt; ，将  &lt;code&gt;test_table&lt;/code&gt;  表名改为  &lt;code&gt;user_age&lt;/code&gt;  .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改存储引擎
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALTER TABLE table_name ENGINE=value;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;alter table user engine=myisam;&lt;/code&gt; ，将 user 表的存储引擎改为  &lt;code&gt;myisam&lt;/code&gt;  .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据备份与恢复&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据备份与恢复&#34;&gt;#&lt;/a&gt; 数据备份与恢复&lt;/h3&gt;
&lt;p&gt;​	使用  &lt;code&gt;MYSQLDUMP&lt;/code&gt;  命令可以备份和还原数据库。如果只想复制一张表，可以使用  &lt;code&gt;mysqldump&lt;/code&gt;  命令导出该表的结构和数据，然后导入到新的数据库或新的表中，也可以导出所有的表结构及数据，以达到复制数据库的目的 .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份表数据：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysqldump -h &amp;lt;ip&amp;gt; -u &amp;lt;user_name&amp;gt; -p [-d] &amp;lt;db_name&amp;gt; &amp;lt;table_name&amp;gt; &amp;gt; &amp;lt;table_name.sql&amp;gt;;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;mysqldump -h localhost -uroot -p test_mysql user &amp;gt; user.sql;&lt;/code&gt; ，将本地的  &lt;code&gt;test_mysql&lt;/code&gt;  数据库的  &lt;code&gt;user&lt;/code&gt;  表导出到当前目录下名为  &lt;code&gt;user.sql&lt;/code&gt;  的文件中 .&lt;/li&gt;
&lt;li&gt;- &lt;code&gt;d&lt;/code&gt;  参数为可选，加上此参数则只导出表结构而不包含数据 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还原表数据：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source &amp;lt;path&amp;gt;;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;source D:/user.sql;&lt;/code&gt; ，将 D 盘根目录下的  &lt;code&gt;user.sql&lt;/code&gt;  文件导入到当前选择的数据库中 .&lt;/li&gt;
&lt;li&gt;此命令需要在 &lt;em&gt;MySQL&lt;/em&gt; 中执行 .&lt;/li&gt;
&lt;li&gt;可以使用此方法还原所有表数据，即还原数据库 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;备份数据库：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mysqldump -h &amp;lt;ip&amp;gt; -u &amp;lt;user_name&amp;gt; -p [-d] &amp;lt;db_name&amp;gt; &amp;gt; &amp;lt;new_db_name.sql&amp;gt;;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;示例： &lt;code&gt;mysqldump -h localhost -uroot -p test_mysql &amp;gt; test_mysql.sql;&lt;/code&gt; ，将本地的  &lt;code&gt;test_mysql&lt;/code&gt;  数据库的所有表导出到当前目录下名为  &lt;code&gt;test_mysql.sql&lt;/code&gt;  的文件中 .&lt;/li&gt;
&lt;li&gt;- &lt;code&gt;d&lt;/code&gt;  参数为可选，加上此参数则只导出表结构而不包含数据 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5OTM0MC9hcnRpY2xlL2RldGFpbHMvMTIxMzgwMDU4&#34;&gt;mysql 导入导出命令详细总结，看这一篇就够了_mysql 导入导出命令 - CSDN 博客&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;元数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元数据&#34;&gt;#&lt;/a&gt; 元数据&lt;/h3&gt;
&lt;p&gt;元数据是用于描述数据的数据。元数据在 &lt;em&gt;MySQL&lt;/em&gt; 中是指关于数据库及其内容 (如表、列、索引等) 的信息。&lt;/p&gt;
&lt;p&gt;元数据存储在系统表中，这些表位于 &lt;em&gt;MySQL&lt;/em&gt; 数据库的  &lt;code&gt;information_schema&lt;/code&gt;  数据库中，通过查询这些系统表，可以获取关于数据库的结构、对象和其他相关信息的详细信息。&lt;/p&gt;
&lt;p&gt;常用的元数据查询：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看表的索引
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHOW INDEX FROM table_name;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看表的创建语句
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SHOW CREATE TABLE table_name;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看表的行数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT COUNT(*) FROM table_name;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kYXRhYmFzZS1pbmZvLmh0bWw=&#34;&gt;MySQL 元数据 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="MySQL" />
        <updated>2024-05-13T08:24:45.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/database/MySQL-3/</id>
        <title>MySQL-3</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/database/MySQL-3/"/>
        <content type="html">&lt;h3 id=&#34;like-子句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#like-子句&#34;&gt;#&lt;/a&gt; &lt;em&gt;LIKE&lt;/em&gt; 子句&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;like&lt;/em&gt; 子句用于指定 &lt;em&gt;update&lt;/em&gt; 以及 &lt;em&gt;delete&lt;/em&gt; 中的 &lt;em&gt;where&lt;/em&gt; 条件.&lt;/p&gt;
&lt;p&gt;可以使用 &lt;em&gt; &lt;code&gt;or&lt;/code&gt; &lt;/em&gt; 或者 &lt;em&gt; &lt;code&gt;and&lt;/code&gt; &lt;/em&gt; 指定一个或者多个条件.&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT * FROM &amp;lt;表名&amp;gt; WHERE &amp;lt;LIKE句所用的列名&amp;gt; LIKE &amp;lt;条件&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from user where id like 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;筛选 &lt;em&gt;user&lt;/em&gt; 表中的所有行，&lt;em&gt;id&lt;/em&gt; 列为 1 的所有列.&lt;/p&gt;
&lt;h4 id=&#34;like-通配符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#like-通配符&#34;&gt;#&lt;/a&gt; &lt;em&gt;LIKE&lt;/em&gt; 通配符&lt;/h4&gt;
&lt;p&gt;在 &lt;em&gt;like&lt;/em&gt; 子句中， &lt;code&gt;%&lt;/code&gt;  通配符与正则表达式的  &lt;code&gt;*&lt;/code&gt;  作用相同，表示零个或多个字符.&lt;/p&gt;
&lt;p&gt;而  &lt;code&gt;_&lt;/code&gt;  通配符表示一个字符.&lt;/p&gt;
&lt;p&gt;不区分大小写匹配：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from user where id like 1 collate utf8mb4_general_ci;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用  &lt;code&gt;collate utf8mb4_general_ci&lt;/code&gt;  定义 &lt;em&gt;utf8mb4&lt;/em&gt; 字符集和大小写不敏感规则.&lt;/p&gt;
&lt;h3 id=&#34;union-连接子句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#union-连接子句&#34;&gt;#&lt;/a&gt; &lt;em&gt;UNION&lt;/em&gt; 连接子句&lt;/h3&gt;
&lt;p&gt;此操作符用于连接两个以上的 &lt;em&gt;SELECT&lt;/em&gt; 语句的结果并去除重复行后组合到一个结果集中.&lt;/p&gt;
&lt;p&gt;每个 &lt;em&gt;UNION&lt;/em&gt; 操作符必须由两个或者多个 &lt;em&gt;SELECT&lt;/em&gt; 语句组成，每个 &lt;em&gt;SELECT&lt;/em&gt; 语句的列数和数据类型必须一致.&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SELECT column1, column2, ... FROM table1 WHERE condition1
UNION
SELECT column1, column2, ... FROM table2 WHERE condition2
[ORDER BY column1, column2, ...];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ORDER BY&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，用于指定合并后的结果集的排序顺序.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from user where id &amp;lt; 2 union select * from user where id &amp;gt; 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;筛选 &lt;em&gt;user&lt;/em&gt; 表中 &lt;em&gt;id&lt;/em&gt; 不等于 &lt;em&gt;2&lt;/em&gt; 的所有行.&lt;/p&gt;
&lt;h3 id=&#34;union-all&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#union-all&#34;&gt;#&lt;/a&gt; &lt;em&gt;UNION ALL&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;此子句与 &lt;em&gt;UNION&lt;/em&gt; 的不同在于展示出来的数据会包含重复数据。&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SELECT column1, column2, ... FROM table1 WHERE condition1
UNION ALL
SELECT column1, column2, ... FROM table2 WHERE condition2
[ORDER BY column1, column2, ...];
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;order-by-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#order-by-语句&#34;&gt;#&lt;/a&gt; &lt;em&gt;ORDER BY&lt;/em&gt; 语句&lt;/h3&gt;
&lt;p&gt;如果想要对读取的数据进行排序，可以使用此子句来设定你想按那个字段那种方式来进行排序，再返回搜索结果。此子句可以按照一个或多个值进行升序 (&lt;em&gt;ASC&lt;/em&gt;) 或降序 (&lt;em&gt;DESC&lt;/em&gt;) 排序.&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT column1,... FROM &amp;lt;表名&amp;gt; ORDER BY column1 [ASC | DESC], column2 [ASC | DESC],...;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ORDER BY&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;用于指定排序顺序子句，&lt;em&gt;ASC&lt;/em&gt; 表示升序（默认），&lt;em&gt;DESC&lt;/em&gt; 表示降序.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用拼音对汉字进行排序，如果使用 &lt;em&gt;gbk&lt;/em&gt; 字符集，可以直接排序，如果使用 &lt;em&gt;utf8&lt;/em&gt; 字符集，需要对字段进行转码.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from user order by convert(username using gbk);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcmRlci1ieS5odG1s&#34;&gt;MySQL ORDER BY (排序) 语句 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;join连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#join连接&#34;&gt;#&lt;/a&gt; &lt;em&gt;JOIN&lt;/em&gt; (连接)&lt;/h3&gt;
&lt;p&gt;可以在 &lt;em&gt;SELECT&lt;/em&gt; 、&lt;em&gt;UPDATE&lt;/em&gt;、&lt;em&gt;DELETE&lt;/em&gt; 语句中使用 JOIN 来联合多表查询.&lt;/p&gt;
&lt;p&gt;JOIN 按照功能大致分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;获取两个表中字段匹配的记录，如果右表中匹配的行有字段为 &lt;em&gt;NULL&lt;/em&gt;，则不显示此行.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT column1,... FROM &amp;lt;表名1&amp;gt; INNER JOIN &amp;lt;表名2&amp;gt; ON &amp;lt;表名1.字段名&amp;gt; = &amp;lt;表名2.字段名&amp;gt; ...;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 简单查询
select * from user inner join scores on user.id = scores.id;

# 使用 as 定义别名
select u.username,s.chinese,s.mathematics,s.english from user as u inner join scores as s on u.id = s.id;

# 多 inner join 查询
select * from user as u 
inner join scores as s on u.id = s.id 
inner join test_table as t on u.id = t.id;

# 使用 where 过滤记录
select * from user as u
inner join scores as s on u.id = s.id
inner join test_table as t on u.id = t.id
where u.birhdate &amp;gt; &#39;2005-01-01&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LEFT JOIN&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;返回左表中的所有行，并包括右表中匹配的行，如果右表中匹配的行中没有值，则返回 &lt;em&gt;NULL&lt;/em&gt; 值.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT column1,... FROM &amp;lt;表名1&amp;gt; left JOIN &amp;lt;表名2&amp;gt; ON &amp;lt;表名1.字段名&amp;gt; = &amp;lt;表名2.字段名&amp;gt; ...;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# left join 的使用方法同 inner join 一样
select u.id,u.username,s.mathematics,s.chinese,s.english,t.age from user as u
left join scores as s on u.id = s.id
left join test_table as t on s.id = t.id;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1qb2luLmh0bWw=&#34;&gt;MySQL 连接的使用 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;null-处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#null-处理&#34;&gt;#&lt;/a&gt; &lt;em&gt;NULL&lt;/em&gt; 处理&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 提供了三个运算符来处理 &lt;em&gt;NULL&lt;/em&gt; 值，在 &lt;em&gt;MySQL&lt;/em&gt; 中，&lt;em&gt;NULL&lt;/em&gt; 值通常表示缺失或未知数据，你不能使用  &lt;code&gt;=&lt;/code&gt;  或者  &lt;code&gt;!=&lt;/code&gt;  来查找 &lt;em&gt;NULL&lt;/em&gt; 值，因为 &lt;em&gt;NULL&lt;/em&gt; 值与其他任何值比较都为 &lt;em&gt;NULL&lt;/em&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IS NULL&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当列的值是 &lt;em&gt;NULL&lt;/em&gt;，此运算符返回 &lt;em&gt;true&lt;/em&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IS NOT NULL&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当列的值不为 &lt;em&gt;NULL&lt;/em&gt;，此运算符返回 &lt;em&gt;true&lt;/em&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当比较的两个值相等或者都为 &lt;em&gt;NULL&lt;/em&gt; 时返回 &lt;em&gt;true&lt;/em&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 判读 age 字段是否为 NULL
select * from test_table as t where t.age is null;

# 判断 age 字段是否不为 NULL
select * from test_table as t where t.age is not null;

# 判断 age 字段是否为 NULL，效果同 is 一样
select * from test_table as t where t.age &amp;lt;=&amp;gt; null;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;数据表清洗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据表清洗&#34;&gt;#&lt;/a&gt; 数据表清洗&lt;/h4&gt;
&lt;p&gt;将表中指定的列中所有的 NULL 值替换为  &lt;code&gt;0&lt;/code&gt; .&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * , ifnull(t.age,0) as age from test_table as t;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ifnull-coalesce&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ifnull-coalesce&#34;&gt;#&lt;/a&gt; IFNULL &amp;amp; COALESCE&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;IFNULL&lt;/code&gt;  基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IFNULL(expr1,expr2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ifnull&lt;/em&gt; 是常用的用于处理 &lt;em&gt;NULL&lt;/em&gt; 值的函数，其基本功能是如果参数 1 为 &lt;em&gt;NULL&lt;/em&gt;，则返回参数 2 的值.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COALESCE&lt;/code&gt;  基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COALESCE(value1,value2,...,valueEn)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;coalesce&lt;/em&gt; 可以看做是 &lt;em&gt;ifnull&lt;/em&gt; 的增强版，其功能同 &lt;em&gt;ifnull&lt;/em&gt; 相同，但是可以接受比 &lt;em&gt;ifnull&lt;/em&gt; 更多的参数，如果参数 1 为 &lt;em&gt;NULL&lt;/em&gt;，则返回其参数列表中第一个非 &lt;em&gt;NULL&lt;/em&gt; 的表达式，如果所有提供的表达式都为 &lt;em&gt;NULL&lt;/em&gt;，那么 &lt;em&gt;coalesce&lt;/em&gt; 函数将返回 &lt;em&gt;NULL&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1udWxsLmh0bWw=&#34;&gt;MySQL NULL 值处理 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则表达式&#34;&gt;#&lt;/a&gt; 正则表达式&lt;/h3&gt;
&lt;p&gt;MySQL 提供了正则表达式的匹配，用于提供比普通筛选更强大的功能.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;REGEXP&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;regexp 是用于进行正则匹配的运算符.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT column1,column2,... FROM &amp;lt;表名&amp;gt; WHERE column_name regexp &#39;pattern&#39;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 筛选出以 1 开头的 id
select * from user as u where u.id regexp &#39;^[1*]&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多使用示例请参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1yZWdleHAuaHRtbA==&#34;&gt;MySQL 正则表达式 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="MySQL" />
        <updated>2024-05-09T07:03:42.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/database/MySQL-2/</id>
        <title>MySQL-2</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/database/MySQL-2/"/>
        <content type="html">&lt;h2 id=&#34;mysql-基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-基本操作&#34;&gt;#&lt;/a&gt; MySQL 基本操作&lt;/h2&gt;
&lt;h3 id=&#34;对数据库操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对数据库操作&#34;&gt;#&lt;/a&gt; 对数据库操作&lt;/h3&gt;
&lt;h4 id=&#34;创建数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建数据库&#34;&gt;#&lt;/a&gt; 创建数据库&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;CREATE DATABASE &amp;lt;数据库名&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本语法 ( &lt;code&gt;[]&lt;/code&gt;  中为可选内容)：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE DATABASE [IF NOT EXISTS] &amp;lt;database_name&amp;gt; [DEFAULT CHARSET charset_name] [COLLATE collation_name];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IF NOT EXISTS&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个可选的子句，用来避免因为试图创建已存在的数据库而产生的错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DEFAULT CAHRSET&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这部分指定新创建的数据库的默认字符集为指定的字符集，这意味着在这个数据库中的所有表（除非明确指定其他字符集），其默认字符集都会是指定的字符集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COLLATE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这部分指定了新创建数据库的默认排序规则为  &lt;code&gt;utf8_general_ci&lt;/code&gt; 。排序规则（&lt;em&gt;Collation&lt;/em&gt;）影响了字符数据的比较、排序以及唯一性校验的方式。 &lt;code&gt;utf8_general_ci&lt;/code&gt;  是一个大小写不敏感的排序规则，适合那些对大小写不敏感的搜索场景，而且它对 &lt;em&gt;Unicode&lt;/em&gt; 字符的排序并不是基于精确的语言排序规则，而是采用了一种通用的简单排序策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;选择数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择数据库&#34;&gt;#&lt;/a&gt; 选择数据库&lt;/h4&gt;
&lt;p&gt;要对一个数据库进行操作，必须先选择该数据库。选择数据库有两种方式。&lt;/p&gt;
&lt;p&gt;一是登录时选择已经创建好的数据库：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;figcaption data-lang=&#34;PowerShell&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;D &amp;lt;数据库名&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;uroot &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;p&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;二是使用  &lt;code&gt;USE&lt;/code&gt;  语句选择：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;use &amp;lt;数据库名&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用这种方法语句执行成功后会显示  &lt;code&gt;Database changed&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;删除数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除数据库&#34;&gt;#&lt;/a&gt; 删除数据库&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DROP DATABASE &amp;lt;数据库名&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;DROP DATABASE [IF EXISTS] &amp;lt;database_name&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IF EXISTS&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，如果数据库存在才执行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对数据表操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对数据表操作&#34;&gt;#&lt;/a&gt; 对数据表操作&lt;/h3&gt;
&lt;p&gt;创建数据表需要 &lt;u&gt;表名&lt;/u&gt;、&lt;u&gt;表字段名&lt;/u&gt;、&lt;u&gt;每个表字段的数据类型&lt;/u&gt;。&lt;/p&gt;
&lt;h4 id=&#34;创建数据表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建数据表&#34;&gt;#&lt;/a&gt; 创建数据表&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE TABLE table_name(
	column1 datatype,
    column2 datatype,
    ...
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table_name&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;表名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;表的列名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datatype&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;每个列的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table if not exists users(\
    id int unsigned auto_increment,\
    username varchar(50) not null,\
    birthdate date,\
    is_active boolean default true,\
    primary key(id,username)\
)engine=innodb default charset=utf8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unsigned&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置字段属性的数据类型为无符号类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto_increment&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此关键字用于创建一个自增长的列，一般用于主键，每当有新的记录插入到表中时，此列数值会自动加 &lt;code&gt;1&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;primary key&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此关键字用于定义列为主键，主键用于唯一标识每行数据。可以使用多列来定义主键，列间以逗号 &lt;code&gt;,&lt;/code&gt;  分隔。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此关键字用于指定列的默认值约束。当向表中插入新的记录时，如果没有为某个具有  &lt;code&gt;default&lt;/code&gt;  约束的列提供具体值，那么 &lt;em&gt;MySQL&lt;/em&gt; 将自动赋予该列预先定义好的默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;not null&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不想字段值为空，可以设置字段属性为  &lt;code&gt;not null&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;engine=innodb&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定表的存储引擎为  &lt;code&gt;InnoDB&lt;/code&gt; 。 &lt;code&gt;InnoDB&lt;/code&gt;  引擎支持事务处理和行级锁定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default charset=utf8&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定默认的字符集为  &lt;code&gt;utf8&lt;/code&gt; 。 &lt;code&gt;charset=utf8&lt;/code&gt;  表示表中的所有字符串数据将以 &lt;em&gt;UTF-8&lt;/em&gt; 字符集编码进行存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除数据表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除数据表&#34;&gt;#&lt;/a&gt; 删除数据表&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DROP TABLE &amp;lt;数据表名&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;DROP TABLE [IF EXISTS] table_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table_name&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;是你要删除的数据表的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IF EXISTS&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选的子句，数据表存在才执行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看&#34;&gt;#&lt;/a&gt; 查看&lt;/h3&gt;
&lt;p&gt;可以使用  &lt;code&gt;show databases;&lt;/code&gt;  命令查看所有数据库。&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;show tables;&lt;/code&gt;  查看选定数据库的所有表。&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;desc &amp;lt;表名&amp;gt;;&lt;/code&gt;  查看表结构。&lt;/p&gt;
&lt;h2 id=&#34;增删查改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增删查改&#34;&gt;#&lt;/a&gt; 增删查改&lt;/h2&gt;
&lt;h3 id=&#34;增&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增&#34;&gt;#&lt;/a&gt; 增&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;INSERT INTO &amp;lt;表名&amp;gt;(column1, column2, ...)
VALUES
	(value1, value2, ...),
	(value1, value2, ...),
...;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;column1, column2, ...&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;表中的列名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value1, value2, ...&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;要插入的具体数值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果数据是字符型，必须使用引号包裹。&lt;/p&gt;
&lt;p&gt;如果需要插入所有的列的数据，可以省略列名：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;INSERT INTO &amp;lt;表名&amp;gt;
VALUES(NULL, 1, &#39;张三&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;是用于自增长列的占位符，表示系统会为该列生成一个唯一的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用  &lt;code&gt;INSERT INTO&lt;/code&gt;  插入数据时，如果设置了唯一键并且已经有此条数据，则  &lt;code&gt;SQL&lt;/code&gt;  语句将无法执行成功，并会抛出错误 .&lt;/p&gt;
&lt;p&gt;可以使用  &lt;code&gt;INSERT IGNORE INTO&lt;/code&gt;  来插入数据，与  &lt;code&gt;INSERT INTO&lt;/code&gt;  的区别在于会忽略数据库中已经存在的数据，如果数据库中没有此条数据，则插入新的数据，如果有数据存在就跳过这条数据，这样就可以保留数据库中已经存在的数据，达到在间隙中插入数据的目的。&lt;/p&gt;
&lt;h3 id=&#34;查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查&#34;&gt;#&lt;/a&gt; 查&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SELECT * FROM &amp;lt;表名&amp;gt;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SELECT column1, column2, ... 
FROM table_name 
[WHERE condition] 
[ORDER BY column_name [ASC | DESC]]
[LIMIT number];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;column1, column2, ...&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;你要选择的列的名称，可以使用  &lt;code&gt;*&lt;/code&gt;  号表示选择所有列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table_name&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;要查询的数据表名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE condition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，用于指定过滤条件，返回符合条件的行。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select * from user where id &amp;gt; 1;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORDER BY column_name [ASC | DESC]]&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，用于指定结果集的排序顺序，默认升序 (&lt;em&gt;ASC&lt;/em&gt;)。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select * from user order by id desc;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIMIT number&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，限定返回的行数。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select * from user limit 2;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你需要过滤重复的数据，可以使用  &lt;code&gt;DISTINCT&lt;/code&gt;  关键字来过滤重复的数据。&lt;/p&gt;
&lt;p&gt;基本语法： &lt;code&gt;SELECT DISTINCT &amp;lt;列名&amp;gt; FROM table_name;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多使用示例请参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zZWxlY3QtcXVlcnkuaHRtbA==&#34;&gt;MySQL 查询数据 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC13aGVyZS1jbGF1c2UuaHRtbA==&#34;&gt;MySQL WHERE 子句 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1oYW5kbGluZy1kdXBsaWNhdGVzLmh0bWw=&#34;&gt;MySQL 处理重复数据 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改&#34;&gt;#&lt;/a&gt; 改&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;UPDATE &amp;lt;表名&amp;gt; SET column1=value1, column2=value2, ...&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;UPDATE &amp;lt;table_name&amp;gt;
SET column1=value1, column2=value2, ...
WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WHERE condition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，用于更新指定的行。省略则更新所有的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多使用示例请参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC11cGRhdGUtcXVlcnkuaHRtbA==&#34;&gt;MySQL UPDATE 更新 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;删&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删&#34;&gt;#&lt;/a&gt; 删&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DELETE FROM &amp;lt;表名&amp;gt; WHERE condition;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;DELETE FROM table_name
WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WHERE condition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;可选子句，用于删除指定的行。省略则删除所有的行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多使用示例请参考：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kZWxldGUtcXVlcnkuaHRtbA==&#34;&gt;MySQL DELETE 语句 | 菜鸟教程 (runoob.com)&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="MySQL" />
        <updated>2024-05-06T07:12:40.000Z</updated>
    </entry>
    <entry>
        <id>http://yunyat.cloud/MyCodingBook/database/MySQL-1/</id>
        <title>MySQL-1</title>
        <link rel="alternate" href="http://yunyat.cloud/MyCodingBook/database/MySQL-1/"/>
        <content type="html">&lt;h3 id=&#34;mysql-简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-简介&#34;&gt;#&lt;/a&gt; MySQL 简介&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 是一款广泛使用的关系型数据库管理系统（&lt;em&gt;RDBMS&lt;/em&gt;），由瑞典 &lt;em&gt;MySQL AB&lt;/em&gt; 公司最初开发，目前隶属于 &lt;em&gt;Oracle&lt;/em&gt; 公司。&lt;em&gt;MySQL&lt;/em&gt; 以其开源、稳定、高效、可扩展性强等特点而著名，是互联网行业中最为流行的数据库解决方案之一。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MySQL&lt;/em&gt; 命令关键字本身是不区分大小写的，但是数据库名、表名、列名、别名等在不同的操作系统下区分大小写的情况有所不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;em&gt;Windows&lt;/em&gt; 系统下，&lt;em&gt;MySQL&lt;/em&gt; 的表名、数据库名等默认是不区分大小写的，这是由于 &lt;code&gt;lower_case_table_names&lt;/code&gt;  系统变量默认设置为 1，它会使得 &lt;em&gt;MySQL&lt;/em&gt; 在存储和查找表名时统一转换为小写。&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;Linux&lt;/em&gt; 系统和其他大多数 &lt;em&gt;Unix-like&lt;/em&gt; 系统中，默认情况下 &lt;em&gt;MySQL&lt;/em&gt; 是区分大小写的，也就是说，数据库名、表名等必须准确匹配其创建时的大小写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，尽管 &lt;em&gt;MySQL&lt;/em&gt; 的关键字不区分大小写，但在编写 &lt;em&gt;SQL&lt;/em&gt; 语句时，为了提高代码可读性和遵循行业标准，通常建议将 &lt;em&gt;SQL&lt;/em&gt; 关键字大写，而标识符（如表名、列名）则根据实际情况保持一致的大小写规则。对于列名和列别名，无论在何种操作系统下，&lt;em&gt;MySQL&lt;/em&gt; 内部都是忽略大小写的。不过要注意的是，如果启用了特定的排序规则（&lt;em&gt;collation&lt;/em&gt;），即使在不区分大小写的环境中，也可能存在区分大小写的情况，尤其是在涉及到字符串比较时。&lt;/p&gt;
&lt;h3 id=&#34;mysql-相关术语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-相关术语&#34;&gt;#&lt;/a&gt; MySQL 相关术语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库:&lt;/strong&gt; 数据库是一些关联表的集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据表:&lt;/strong&gt; 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列:&lt;/strong&gt; 一列 (数据元素) 包含了相同类型的数据，例如邮政编码的数据。&lt;/li&gt;
&lt;li&gt;** 行：** 一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冗余&lt;/strong&gt;：存储两倍数据，冗余降低了性能，但提高了数据的安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主键&lt;/strong&gt;：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。&lt;/li&gt;
&lt;li&gt;** 外键：** 外键用于关联两个表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合键&lt;/strong&gt;：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。&lt;/li&gt;
&lt;li&gt;** 索引：** 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照完整性:&lt;/strong&gt; 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系型数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关系型数据库&#34;&gt;#&lt;/a&gt; 关系型数据库&lt;/h3&gt;
&lt;p&gt;MySQL 为关系型数据库 (&lt;em&gt;Relational Database Management System&lt;/em&gt;), 这种所谓的 &amp;quot;&lt;u&gt;关系型&lt;/u&gt;&amp;quot;可以理解为&amp;quot;&lt;u&gt;表格&lt;/u&gt;&amp;quot; 的概念，一个关系型数据库由一个或数个表格组成，如图所示的一个表格:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.runoob.com/wp-content/uploads/2014/03/0921_1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表头 (header):&lt;/strong&gt; 每一列的名称；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列 (col):&lt;/strong&gt; 具有相同数据类型的数据的集合；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行 (row):&lt;/strong&gt; 每一行用来描述某条记录的具体信息；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;值 (value):&lt;/strong&gt; 行的具体信息，每个值必须与该列的数据类型相同；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;键 (key)&lt;/strong&gt;: 键的值在当前列中具有唯一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql-数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql-数据类型&#34;&gt;#&lt;/a&gt; MySQL 数据类型&lt;/h3&gt;
&lt;p&gt;MySQL 数据类型大致分为五类，&lt;u&gt;数值&lt;/u&gt;、&lt;u&gt;日期 \ 时间&lt;/u&gt;、&lt;u&gt;字符串 (字符)&lt;/u&gt;、&lt;u&gt;空间类型&lt;/u&gt; 和 &lt;em&gt;&lt;u&gt;JSON&lt;/u&gt;&lt;/em&gt; 类型，这五大类中又分为许多子类型：&lt;/p&gt;
&lt;h4 id=&#34;数值类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数值类型&#34;&gt;#&lt;/a&gt; 数值类型&lt;/h4&gt;
&lt;p&gt;这些类型包括严格数值数据类型 (  &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;SMALLINT&lt;/code&gt; 、 &lt;code&gt;DECIMAL&lt;/code&gt;  和  &lt;code&gt;NUMERIC&lt;/code&gt;  )，以及近似数值数据类型 (  &lt;code&gt;FLOAT&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt;  和  &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; )。&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;类型&lt;/th&gt;
            &lt;th&gt;大小&lt;/th&gt;
            &lt;th&gt;范围（有符号）&lt;/th&gt;
            &lt;th&gt;范围（无符号）&lt;/th&gt;
            &lt;th&gt;用途&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;TINYINT&lt;/td&gt;
            &lt;td&gt;1 Bytes&lt;/td&gt;
            &lt;td&gt;(-128, 127)&lt;/td&gt;
            &lt;td&gt;(0, 255)&lt;/td&gt;
            &lt;td&gt;小整数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;SMALLINT&lt;/td&gt;
            &lt;td&gt;2 Bytes&lt;/td&gt;
            &lt;td&gt;(-32 768, 32 767)&lt;/td&gt;
            &lt;td&gt;(0, 65 535)&lt;/td&gt;
            &lt;td&gt;大整数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;MEDIUMINT&lt;/td&gt;
            &lt;td&gt;3 Bytes&lt;/td&gt;
            &lt;td&gt;(-8 388 608, 8 388 607)&lt;/td&gt;
            &lt;td&gt;(0, 16 777 215)&lt;/td&gt;
            &lt;td&gt;大整数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;INT 或 INTEGER&lt;/td&gt;
            &lt;td&gt;4 Bytes&lt;/td&gt;
            &lt;td&gt;(-2 147 483 648, 2 147 483 647)&lt;/td&gt;
            &lt;td&gt;(0, 4 294 967 295)&lt;/td&gt;
            &lt;td&gt;大整数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BIGINT&lt;/td&gt;
            &lt;td&gt;8 Bytes&lt;/td&gt;
            &lt;td&gt;(-9 223 372 036 854 775 808, 9 223 372 036 854 775 807)&lt;/td&gt;
            &lt;td&gt;(0, 18 446 744 073 709 551 615)&lt;/td&gt;
            &lt;td&gt;极大整数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;FLOAT&lt;/td&gt;
            &lt;td&gt;4 Bytes&lt;/td&gt;
            &lt;td&gt;(-3.402 823 466 E+38, -1.175 494 351 E-38), (1.175 494 351 E-38, 3.402 823 466 E+38)&lt;/td&gt;
            &lt;td&gt;(0, (1.175 494 351 E-38, 3.402 823 466 E+38)&lt;/td&gt;
            &lt;td&gt;单精度浮点数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;DOUBLE&lt;/td&gt;
            &lt;td&gt;8 Bytes&lt;/td&gt;
            &lt;td&gt;(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)&lt;/td&gt;
            &lt;td&gt;(0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)&lt;/td&gt;
            &lt;td&gt;双精度浮点数值&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;DECIMAL&lt;/td&gt;
            &lt;td&gt;对DECIMAL(M,D)，如果M&gt;D，为M+2否则为D+2&lt;/td&gt;
            &lt;td&gt;依赖于M和D的值&lt;/td&gt;
            &lt;td&gt;依赖于M和D的值&lt;/td&gt;
            &lt;td&gt;小数值&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;日期和时间类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日期和时间类型&#34;&gt;#&lt;/a&gt; 日期和时间类型&lt;/h4&gt;
&lt;p&gt;表示时间值的日期和时间类型为  &lt;code&gt;DATETIME&lt;/code&gt; 、 &lt;code&gt;DATE&lt;/code&gt; 、 &lt;code&gt;TIMESTAMP&lt;/code&gt; 、 &lt;code&gt;TIME&lt;/code&gt;  和 &lt;code&gt;YEAR&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;每个时间类型有一个有效值范围和一个 &amp;quot;零&amp;quot; 值，当指定不合法的 &lt;em&gt;MySQL&lt;/em&gt; 不能表示的值时使用 &amp;quot;零&amp;quot; 值。&lt;/p&gt;
&lt;table&gt;     &lt;thead&gt;         &lt;tr&gt;             &lt;th&gt;类型&lt;/th&gt;             &lt;th&gt;大小&lt;/th&gt;             &lt;th&gt;范围&lt;/th&gt;             &lt;th&gt;格式&lt;/th&gt;             &lt;th&gt;用途&lt;/th&gt;         &lt;/tr&gt;     &lt;/thead&gt;     &lt;tbody&gt;         &lt;tr&gt;             &lt;td&gt;DATE&lt;/td&gt;             &lt;td&gt;3 bytes&lt;/td&gt;             &lt;td&gt;1000-01-01/9999-12-31&lt;/td&gt;             &lt;td&gt;YYYY-MM-DD&lt;/td&gt;             &lt;td&gt;日期值&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;TIME&lt;/td&gt;             &lt;td&gt;3 bytes&lt;/td&gt;             &lt;td&gt;&#39;-838:59:59&#39;/&#39;838:59:59&#39;&lt;/td&gt;             &lt;td&gt;HH:MM:SS&lt;/td&gt;             &lt;td&gt;时间值或持续时间&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;YEAR&lt;/td&gt;             &lt;td&gt;1 byte&lt;/td&gt;             &lt;td&gt;1901/2155&lt;/td&gt;             &lt;td&gt;YYYY&lt;/td&gt;             &lt;td&gt;年份值&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;DATETIME&lt;/td&gt;             &lt;td&gt;8 bytes&lt;/td&gt;             &lt;td&gt;&#39;1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59&#39;&lt;/td&gt;             &lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;             &lt;td&gt;混合日期和时间值&lt;/td&gt;         &lt;/tr&gt;         &lt;tr&gt;             &lt;td&gt;TIMESTAMP&lt;/td&gt;             &lt;td&gt;4 bytes&lt;/td&gt;             &lt;td&gt;&#39;1970-01-01 00:00:01&#39; UTC 到 &#39;2038-01-19 03:14:07&#39;UTC &lt;br/&gt;结束时间是第 &lt;b&gt;2147483647&lt;/b&gt; 秒，北京时间 &lt;b&gt;2038-1-19 11:14:07&lt;/b&gt;，格林尼治时间 2038年1月19日 凌晨 03:14:07&lt;/td&gt;             &lt;td&gt;YYYY-MM-DD hh:mm:ss&lt;/td&gt;             &lt;td&gt;混合日期和时间值，时间戳&lt;/td&gt;         &lt;/tr&gt;     &lt;/tbody&gt; &lt;/table&gt;
&lt;h4 id=&#34;字符串类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串类型&#34;&gt;#&lt;/a&gt; 字符串类型&lt;/h4&gt;
&lt;p&gt;字符串类型指  &lt;code&gt;CHAR&lt;/code&gt; 、 &lt;code&gt;VARCHAR&lt;/code&gt; 、 &lt;code&gt;BINARY&lt;/code&gt; 、 &lt;code&gt;VARBINARY&lt;/code&gt; 、 &lt;code&gt;BLOB&lt;/code&gt; 、 &lt;code&gt;TEXT&lt;/code&gt; 、 &lt;code&gt;ENUM&lt;/code&gt;  和 &lt;code&gt;SET&lt;/code&gt; 。该节描述了这些类型如何工作以及如何在查询中使用这些类型。&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;类型&lt;/th&gt;
            &lt;th&gt;大小&lt;/th&gt;
            &lt;th&gt;用途&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;CHAR&lt;/td&gt;
            &lt;td&gt;0-255 bytes&lt;/td&gt;
            &lt;td&gt;定长字符串&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;VARCHAR&lt;/td&gt;
            &lt;td&gt;0-65535 bytes&lt;/td&gt;
            &lt;td&gt;变长字符串&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TINYBLOB&lt;/td&gt;
            &lt;td&gt;0-255 bytes&lt;/td&gt;
            &lt;td&gt;不超过 255 个字符的二进制字符串&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TINYTEXT&lt;/td&gt;
            &lt;td&gt;0-255 bytes&lt;/td&gt;
            &lt;td&gt;短文本字符串&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;BLOB&lt;/td&gt;
            &lt;td&gt;0-65 535 bytes&lt;/td&gt;
            &lt;td&gt;二进制形式的长文本数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TEXT&lt;/td&gt;
            &lt;td&gt;0-65 535 bytes&lt;/td&gt;
            &lt;td&gt;长文本数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;MEDIUMBLOB&lt;/td&gt;
            &lt;td&gt;0-16 777 215 bytes&lt;/td&gt;
            &lt;td&gt;二进制形式的中等长度文本数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;MEDIUMTEXT&lt;/td&gt;
            &lt;td&gt;0-16 777 215 bytes&lt;/td&gt;
            &lt;td&gt;中等长度文本数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LONGBLOB&lt;/td&gt;
            &lt;td&gt;0-4 294 967 295 bytes&lt;/td&gt;
            &lt;td&gt;二进制形式的极大文本数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LONGTEXT&lt;/td&gt;
            &lt;td&gt;0-4 294 967 295 bytes&lt;/td&gt;
            &lt;td&gt;极大文本数据&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
- `char(n)` 和 `varchar(n)` 中括号中 `n` 代表字符的个数，并不代表字节个数，比如 `CHAR(30)` 就可以存储 30 个字符。
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CHAR&lt;/code&gt;  和  &lt;code&gt;VARCHAR&lt;/code&gt;  类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BINARY&lt;/code&gt;   和  &lt;code&gt;VARBINARY&lt;/code&gt;  类似于  &lt;code&gt;CHAR&lt;/code&gt;  和  &lt;code&gt;VARCHAR&lt;/code&gt; ，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BLOB&lt;/code&gt;  是一个二进制大对象，可以容纳可变数量的数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TINYBLOB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLOB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIUMBLOB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LONGBLOB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TEXT&lt;/code&gt;  是文本对象，同  &lt;code&gt;BLOB&lt;/code&gt;  一样，也有四种类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TINYTEXT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TEXT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIUMTEXT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LONGTEXT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;枚举与集合类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#枚举与集合类型&#34;&gt;#&lt;/a&gt; 枚举与集合类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ENUM&lt;/code&gt; ：枚举类型，用于存取单一的值，可以选择一个预定义的集合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SET&lt;/code&gt; ：集合类型，用于存储多个值，可以选择多个预定义的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;空间数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#空间数据类型&#34;&gt;#&lt;/a&gt; 空间数据类型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;GEOMETRY&lt;/code&gt; ,  &lt;code&gt;POINT&lt;/code&gt; ,  &lt;code&gt;LINESTRING&lt;/code&gt; ,  &lt;code&gt;POLYGON&lt;/code&gt; ,  &lt;code&gt;MULTIPOINT&lt;/code&gt; ,  &lt;code&gt;MULTILINESTRING&lt;/code&gt; ,  &lt;code&gt;MULTIPOLYGON&lt;/code&gt; ,  &lt;code&gt;GEOMETRYCOLLECTION&lt;/code&gt; : 用于存储空间数据（地理信息、几何图形等）。&lt;/p&gt;
&lt;h4 id=&#34;json-数据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#json-数据类型&#34;&gt;#&lt;/a&gt; JSON 数据类型&lt;/h4&gt;
&lt;p&gt;​	&lt;em&gt;MySQL&lt;/em&gt; 从 &lt;code&gt;5.7.8&lt;/code&gt;  版本开始就支持存储原生的 &lt;em&gt;JSON&lt;/em&gt; 类型的数据，我们可以 &lt;em&gt;MySQL&lt;/em&gt; 中存储 &lt;em&gt;JSON&lt;/em&gt; 对象或 &lt;em&gt;JSON&lt;/em&gt; 数组。&lt;em&gt;JSON&lt;/em&gt; 数据并不是以字符串的形式存储，而是使用一种允许快速读取文本元素的内部二进制格式进行存储的，在 &lt;em&gt;JSON&lt;/em&gt; 数据列中插入或者更新的时候将会自动验证 &lt;em&gt;JSON&lt;/em&gt; 文本数据是否正确，未通过验证的文本将产生一个错误信息。&lt;/p&gt;
&lt;p&gt;​	&lt;em&gt;JSON&lt;/em&gt; 与 &lt;em&gt;BLOB&lt;/em&gt; 和 &lt;em&gt;TEXT&lt;/em&gt; 类型一样，设置 &lt;em&gt;JSON&lt;/em&gt; 类型的字段时不能设置默认值，其默认值只能为 &lt;em&gt;NULL&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;​	&lt;em&gt;JSON&lt;/em&gt; 类型的存储长度与  &lt;code&gt;LONGBLOB&lt;/code&gt;  、 &lt;code&gt;LONGTEXT&lt;/code&gt;  类型长度相同，但是最大长度不能超过 &lt;em&gt;max_allowed_packet&lt;/em&gt; 系统变量设置的值。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;数据类型的选择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据类型的选择&#34;&gt;#&lt;/a&gt; 数据类型的选择&lt;/h3&gt;
&lt;p&gt;​	在  &lt;code&gt;MySQL 5.0&lt;/code&gt;  及以上的版本里，一个汉字占用的长度跟编码有关，在 &lt;em&gt;UTF-8&lt;/em&gt; 编码下，一个汉字占用 3 个字节，&lt;em&gt;GBK&lt;/em&gt; 编码下一个汉字占用 2 个字节。&lt;/p&gt;
&lt;p&gt;​	选择数据类型通常选择更小的，以及更简单的类型，同时应该避免使用 &lt;em&gt;NULL&lt;/em&gt; 。 对于经常变化的字段应该使用  &lt;code&gt;varchar&lt;/code&gt; ，知道固定长度的用  &lt;code&gt;char&lt;/code&gt; ，尽量使用  &lt;code&gt;varchar&lt;/code&gt; ，能用  &lt;code&gt;varchar&lt;/code&gt;  的地方不用  &lt;code&gt;text&lt;/code&gt; ，对于超过 255 字符的只能使用  &lt;code&gt;varchar&lt;/code&gt;  或  &lt;code&gt;text&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;外键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#外键&#34;&gt;#&lt;/a&gt; 外键&lt;/h3&gt;
&lt;p&gt;​	外键约束是用来在两个表之间建立关系的一种约束，它定义了一个表中的列与另一个表中的列之间的关系。外键约束可以保证数据的完整性和一致性。&lt;/p&gt;
&lt;h4 id=&#34;级联操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#级联操作&#34;&gt;#&lt;/a&gt; 级联操作&lt;/h4&gt;
&lt;p&gt;在添加了外键之后，再删除主表的数据时产生的约束行为，就称之为&lt;u&gt;删除 / 更新&lt;/u&gt;行为。具体的行为有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;no action&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  &lt;code&gt;RESTRICT&lt;/code&gt;  一致).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restrict&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  &lt;code&gt;NO ACTION&lt;/code&gt;  一致).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cascade&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则也删除 / 更新外键所在子表中的记录.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set null&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则设置子表中该外键值为  &lt;code&gt;null&lt;/code&gt;  (需要允许外键值取  &lt;code&gt;null&lt;/code&gt;  ).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set default&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;主表有变更时，子表将外键列设置为一个默认的值. ( &lt;code&gt;Innodb&lt;/code&gt;  不支持)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建外键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建外键&#34;&gt;#&lt;/a&gt; 创建外键&lt;/h4&gt;
&lt;p&gt;创建外键有两种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建表时添加外键
CREATE TABLE 表名(
    字段名 数据类型,
    ...
    FOREIGN key(外键字段名) REFERENCES 主表(主表列名) [外键产生的行为]
);

# 单独添加外键
ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除外键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除外键&#34;&gt;#&lt;/a&gt; 删除外键&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 删除外键
ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt; # 创建从表时添加外键
 create table order_items(
 item_id int auto_increment,
 order_id int unsigned,
 product_name varchar(255),
 quantity int,
 primary key(item_id),
 foreign key(order_id) references orders(order_id) 
 on delete cascade on update cascade);
    
 # 单独添加外键
 alter table scores add constraint fk_id foreign key(id) references user(id);
 
 # 删除外键
 alter table scores drop foreign key fk_id;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;唯一键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#唯一键&#34;&gt;#&lt;/a&gt; 唯一键&lt;/h3&gt;
&lt;p&gt;​	唯一约束是一种完整性约束，用来确保表中某一列或多列的数据具有唯一性，即不允许出现重复的值。唯一约束有以下几条关键特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;唯一性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顾名思义，唯一约束强制指定列中的数据必须是唯一的。如果尝试插入重复的值，&lt;em&gt;MySQL&lt;/em&gt; 将阻止该操作并返回错误.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;允许空值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;唯一约束可以包含空值 ( &lt;em&gt;NULL&lt;/em&gt; )，但是，一个具有唯一约束的列至多只能有一个空值.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;在数据库中，唯一约束允许列中的空值（ &lt;em&gt;NULL&lt;/em&gt; ）出现一次的原因是基于空值的特殊性质。在 SQL 中，空值表示 “未知” 或 “不存在” 的数据。由于空值代表的是未知信息，它们在比较时不等于任何值，包括它们自己。这意味着，从逻辑上讲，你不能说一个空值等于另一个空值，因为它们都代表着未知。&lt;/p&gt;
&lt;p&gt;因此，当我们对一个列施加唯一约束时，我们是在说这个列中的每个非空值都必须是唯一的。但是，由于空值之间不能进行比较，我们就不能说它们是 “不唯一” 的。这就是为什么 SQL 标准允许一个具有唯一约束的列可以有一个空值的原因。然而，为了维护数据的完整性和逻辑一致性，大多数数据库系统会限制这样的列至多只能有一个空值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多个唯一约束&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个表中，可以定义多个唯一约束，这使得你可以对不同的列或列组合施加唯一性要求.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引关联&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建唯一约束时，&lt;em&gt;MySQL&lt;/em&gt; 会自动为受约束的列创建一个唯一索引，用于提高查询效率，尤其在执行这些列的查询时.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;命名约定&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在定义唯一约束时，可以为其指定一个明确的名称，这有助于管理和识别约束。如果不指定名称，&lt;em&gt;MySQL&lt;/em&gt; 会自动为其生成一个名称，通常默认为该列的名称.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组合唯一约束&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以为表的多个列一起定义唯一约束，这意味着这一组列的值组合必须唯一，即使单个列的值可能重复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非主键&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽管唯一约束与主键约束在确保唯一性方面有相似之处，但它不是表的主标识符，一个表可以有多个唯一约束，但主键只有一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加唯一键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加唯一键&#34;&gt;#&lt;/a&gt; 添加唯一键&lt;/h4&gt;
&lt;p&gt;​	添加唯一键有两种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 创建表的时候使用 UNIQUE 关键字添加
CREATE TABLE 表名(
    字段名 数据类型 [UNIQUE],
    ...
);

# 使用 ALTER TABLE 命令添加
ALTER TABLE 表名 ADD CONSTRAINT 约束名称 UNIQUE(列名);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;删除唯一键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除唯一键&#34;&gt;#&lt;/a&gt; 删除唯一键&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 删除唯一键
ALTER TABLE 表名 DROP CONSTRAINT 唯一键名;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;END&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="原创" />
        <category term="MySQL" />
        <updated>2024-05-06T07:09:43.000Z</updated>
    </entry>
</feed>
