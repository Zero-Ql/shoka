{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"数据库\" category",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "title": "MySQL-5",
            "date_published": "2024-05-14T07:48:52.000Z",
            "content_html": "<h3 id=\"sql-注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入\">#</a> <em>SQL</em> 注入</h3>\n<blockquote>\n<p>如果您通过网页获取用户输入的数据并将其插入一个 <em>MySQL</em> 数据库，那么就有可能发生 <em>SQL</em> 注入安全的问题。</p>\n<p>所谓 <em>SQL</em> 注入，就是通过把 <em>SQL</em> 命令插入到 <em>Web</em> 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 <em>SQL</em> 命令。</p>\n<p><em>MySQL</em> 注入是指攻击者通过恶意构造的输入，成功地执行恶意的 <em>SQL</em> 查询，这通常发生在用户输入未经适当验证或转义的情况下，攻击者试图在输入中插入 <em>SQL</em> 代码，以执行意外的查询或破坏数据库。</p>\n<p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p>\n</blockquote>\n<h3 id=\"防范注入\"><a class=\"markdownIt-Anchor\" href=\"#防范注入\">#</a> 防范注入</h3>\n<ol>\n<li><strong>使用参数化查询或预编译语句</strong>：使用参数化查询（<em>Prepared Statements</em>）可以有效防止 <em>SQL</em> 注入，因为它们在执行查询之前将输入数据与查询语句分离。</li>\n<li><strong>输入验证和转义</strong>：对用户输入进行适当的验证，并使用合适的转义函数（如 <code>mysqli_real_escape_string</code> ）来处理输入，以防止恶意注入。</li>\n<li><strong>最小权限原则</strong>：给予数据库用户最小的权限，确保它们只能执行必要的操作，以降低潜在的损害。</li>\n<li><strong>使用 <em>ORM</em> 框架</strong>：使用对象关系映射（<em>ORM</em>）框架（如<em> Hibernate</em>、<em>Sequelize</em>）可以帮助抽象 <em>SQL</em> 查询，从而降低 <em>SQL</em> 注入的风险。</li>\n<li><strong>禁用错误消息显示</strong>：在生产环境中，禁用显示详细的错误消息，以防止攻击者获取有关数据库结构的敏感信息。</li>\n</ol>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zcWwtaW5qZWN0aW9uLmh0bWw=\">MySQL 及 SQL 注入 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p><em>MySQL</em> 的函数可以执行很多操作，具体请查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==\">MySQL 函数 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"mysql-运算符\"><a class=\"markdownIt-Anchor\" href=\"#mysql-运算符\">#</a> MySQL 运算符</h3>\n<p>运算符大致分为以下几种：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcGVyYXRvci5odG1s\">MySQL 运算符 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "title": "MySQL-4",
            "date_published": "2024-05-13T08:24:45.000Z",
            "content_html": "<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p><em>MySQL</em> 中，<u>事务</u>(<em> <code>Transaction</code> </em>) 是一组 <em>SQL</em> 语句的执行，它们被视为一个单独的工作单元。这组操作要么全部成功执行，要么全部不执行，是一个 “全有或全无” 的原则. <u>事务</u>的主要目的是为了保证数据的完整性和一致性.</p>\n<p>基本特性 (<em><strong>ACID</strong></em> 属性)：</p>\n<ul>\n<li><strong>原子性</strong> (<strong>A</strong>tomicity)\n<ul>\n<li><u>事务</u>是一个原子操作单元，<u>事务</u>中的所有操作要么全部执行成功，要么全部不执行，不会仅执行部分操作，<u>事务</u>在执行过程中发生错误，会被回滚（ <code>Rollback</code> ）到<u>事务</u>开始前的状态.</li>\n</ul>\n</li>\n<li><strong>一致性</strong> (<strong>C</strong>onsistency)\n<ul>\n<li><u>事务</u>执行前后，数据库从一个一致状态转换到另一个一致状态。即使在<u>事务</u>执行过程中出现错误，数据库也能够保持数据的完整性.</li>\n</ul>\n</li>\n<li><strong>隔离性</strong> (<strong>I</strong>solation)\n<ul>\n<li>多个<u>事务</u>并发执行时，每个<u>事务</u>好像是在独立地处理数据，即一个<u>事务</u>内部的操作对其他<u>事务</u>是隔离的，这可以防止并发<u>事务</u>之间的相互干扰，<u>事务</u>隔离分为不同级别，包括读未提交（ <code>Read uncommitted</code> ）、读提交（ <code>read committed</code> ）、可重复读（ <code>repeatable read</code> ）和串行化（ <code>Serializable</code> ）.</li>\n</ul>\n</li>\n<li><strong>持久性</strong> (<strong>D</strong>urability)\n<ul>\n<li>一旦<u>事务</u>提交（ <code>commit</code> ），其结果就是永久性的，即使系统发生故障也不会丢失已提交<u>事务</u>的结果.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><em>只有使用了 lnnodb 数据库引擎的数据库或表才支持事务.</em></p>\n<p><em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交.</em></p>\n</blockquote>\n<h3 id=\"事务操作\"><a class=\"markdownIt-Anchor\" href=\"#事务操作\">#</a> 事务操作</h3>\n<ul>\n<li><code>BEGIN</code>  或  <code>START TRANSACTION</code>\n<ul>\n<li>显示开启一个事务.</li>\n</ul>\n</li>\n<li><code>COMMIT</code>\n<ul>\n<li>提交事务，并对已对数据库进行的所有修改变为永久.</li>\n</ul>\n</li>\n<li><code>ROLLBACK</code>\n<ul>\n<li>回滚事务。结束用户的事务，并撤销正在进行的所有未提交的修改.</li>\n</ul>\n</li>\n<li><code>SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li><code>savepoint</code>  允许在事务中创建一个标记点，一个事务中可以有多个标记点.</li>\n</ul>\n</li>\n<li><code>RELEASE SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li>删除一个事务的标记点，当没有指定的标记点时，该语句会抛出一个异常.</li>\n</ul>\n</li>\n<li><code>ROLLBACK TO &lt;identifier&gt;</code>\n<ul>\n<li>将事务回滚到标记点.</li>\n</ul>\n</li>\n</ul>\n<p>事务处理流程：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/05/10/pkZG5WQ.png\" alt=\"mysql_1\"></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 开启一个事务\nbegin;\n\n# 更改 user 表的 birhdate 列的值为 '2024-05-09' 的值为 NULL\nupdate user as u set birhdate=NULL where u.birhdate='2024-05-09';\n\n# 提交事务\ncommit;\n# or 回滚事务\nrollback;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10cmFuc2FjdGlvbi5odG1s\">MySQL 事务 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"alter-命令\"><a class=\"markdownIt-Anchor\" href=\"#alter-命令\">#</a> <em>ALTER</em> 命令</h3>\n<p><em>ALTER</em> 命令是用于修改现有数据库表结构的重要语句，通过它，你可以执行多种表结构的更改操作，而不必删除并重新创建表.</p>\n<p>常用操作：</p>\n<ul>\n<li>添加列\n<ul>\n<li><code>ALTER TABLE table_name ADD column_name data_type;</code>\n<ul>\n<li>示例： <code>alter table user add birth_date date;</code> ，向  <code>user</code>  表添加  <code>birth_date</code>  日期列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除列\n<ul>\n<li><code>ALTER TABLE table_name DROP COLUMN column_name;</code>\n<ul>\n<li>示例： <code>alter table user drop column birth_date;</code> ，将  <code>user</code>  表的  <code>birth_date</code>  列删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改列的数据类型\n<ul>\n<li><code>ALTER TABLE table_name MODIFY column_name new_data_type;</code>\n<ul>\n<li>示例： <code>alter table user modify id varchar(10);</code>  ，将  <code>id</code>  列的字段类型修改为变长字符串类型.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>改变列名及数据类型：\n<ul>\n<li><code>ALTER TABLE table_name CHANGE column_name new_column_name new_data_type;</code></li>\n<li>示例： <code>alter table user change birhdate birth_date date;</code> ，将  <code>birhdate</code>  列名改为  <code>birth_date</code>  并将列类型改为  <code>date</code> ；</li>\n</ul>\n</li>\n<li>添加主键\n<ul>\n<li><code>ALTER TABLE table_name ADD PRIMARY KEY(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add primary key(id);</code> ，将  <code>id</code>  设置为  <code>test_table</code>  表的主键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加唯一键\n<ul>\n<li><code>ALTER TABLE table_name ADD UNIQUE(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add unique(id);</code> ，将  <code>id</code>  列设置为唯一键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加外键约束\n<ul>\n<li><code> ALTER TABLE table_name ADD CONSTRAINT fk_constraint_name FOREIGN KEY(column_name) REFERENCES referenced_table_name(referenced_column_name);</code>\n<ul>\n<li>示例： <code>alter table orders add constraint fk_user_id foreign key(id) references user(id);</code> ，将 <code>orders</code>  的  <code>id</code>  设置为外键，引用  <code>user</code>  的  <code>id</code>  列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设置默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER column_name SET DEFAULT value;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date set default '1970-01-01';</code> ，将  <code>order_date</code>  的默认值设置为  <code>1970-01-01</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER order_date DROP DEFAULT;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date drop default;</code> ，将  <code>order_date</code>  列的默认值删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改表名\n<ul>\n<li><code>ALTER TABLE table_name RENAME TO new_table;</code>\n<ul>\n<li>示例： <code>alter table test_table rename to user_age;</code> ，将  <code>test_table</code>  表名改为  <code>user_age</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改存储引擎\n<ul>\n<li><code>ALTER TABLE table_name ENGINE=value;</code>\n<ul>\n<li>示例： <code>alter table user engine=myisam;</code> ，将 user 表的存储引擎改为  <code>myisam</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据备份与恢复\"><a class=\"markdownIt-Anchor\" href=\"#数据备份与恢复\">#</a> 数据备份与恢复</h3>\n<p>​\t使用  <code>MYSQLDUMP</code>  命令可以备份和还原数据库。如果只想复制一张表，可以使用  <code>mysqldump</code>  命令导出该表的结构和数据，然后导入到新的数据库或新的表中，也可以导出所有的表结构及数据，以达到复制数据库的目的 .</p>\n<ul>\n<li>备份表数据：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &lt;table_name&gt; &gt; &lt;table_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql user &gt; user.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的  <code>user</code>  表导出到当前目录下名为  <code>user.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>还原表数据：\n<ul>\n<li><code>source &lt;path&gt;;</code>\n<ul>\n<li>示例： <code>source D:/user.sql;</code> ，将 D 盘根目录下的  <code>user.sql</code>  文件导入到当前选择的数据库中 .</li>\n<li>此命令需要在 <em>MySQL</em> 中执行 .</li>\n<li>可以使用此方法还原所有表数据，即还原数据库 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>备份数据库：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &gt; &lt;new_db_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql &gt; test_mysql.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的所有表导出到当前目录下名为  <code>test_mysql.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5OTM0MC9hcnRpY2xlL2RldGFpbHMvMTIxMzgwMDU4\">mysql 导入导出命令详细总结，看这一篇就够了_mysql 导入导出命令 - CSDN 博客</span></p>\n<h3 id=\"元数据\"><a class=\"markdownIt-Anchor\" href=\"#元数据\">#</a> 元数据</h3>\n<p>元数据是用于描述数据的数据。元数据在 <em>MySQL</em> 中是指关于数据库及其内容 (如表、列、索引等) 的信息。</p>\n<p>元数据存储在系统表中，这些表位于 <em>MySQL</em> 数据库的  <code>information_schema</code>  数据库中，通过查询这些系统表，可以获取关于数据库的结构、对象和其他相关信息的详细信息。</p>\n<p>常用的元数据查询：</p>\n<ul>\n<li>查看表的索引\n<ul>\n<li><code>SHOW INDEX FROM table_name;</code></li>\n</ul>\n</li>\n<li>查看表的创建语句\n<ul>\n<li><code>SHOW CREATE TABLE table_name;</code></li>\n</ul>\n</li>\n<li>查看表的行数\n<ul>\n<li><code>SELECT COUNT(*) FROM table_name;</code></li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kYXRhYmFzZS1pbmZvLmh0bWw=\">MySQL 元数据 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "title": "MySQL-3",
            "date_published": "2024-05-09T07:03:42.000Z",
            "content_html": "<h3 id=\"like-子句\"><a class=\"markdownIt-Anchor\" href=\"#like-子句\">#</a> <em>LIKE</em> 子句</h3>\n<p><em>like</em> 子句用于指定 <em>update</em> 以及 <em>delete</em> 中的 <em>where</em> 条件.</p>\n<p>可以使用 <em> <code>or</code> </em> 或者 <em> <code>and</code> </em> 指定一个或者多个条件.</p>\n<p>基本语法：</p>\n<p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;LIKE句所用的列名&gt; LIKE &lt;条件&gt;;</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1;\n</code></pre>\n<p>筛选 <em>user</em> 表中的所有行，<em>id</em> 列为 1 的所有列.</p>\n<h4 id=\"like-通配符\"><a class=\"markdownIt-Anchor\" href=\"#like-通配符\">#</a> <em>LIKE</em> 通配符</h4>\n<p>在 <em>like</em> 子句中， <code>%</code>  通配符与正则表达式的  <code>*</code>  作用相同，表示零个或多个字符.</p>\n<p>而  <code>_</code>  通配符表示一个字符.</p>\n<p>不区分大小写匹配：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1 collate utf8mb4_general_ci;\n</code></pre>\n<p>使用  <code>collate utf8mb4_general_ci</code>  定义 <em>utf8mb4</em> 字符集和大小写不敏感规则.</p>\n<h3 id=\"union-连接子句\"><a class=\"markdownIt-Anchor\" href=\"#union-连接子句\">#</a> <em>UNION</em> 连接子句</h3>\n<p>此操作符用于连接两个以上的 <em>SELECT</em> 语句的结果并去除重复行后组合到一个结果集中.</p>\n<p>每个 <em>UNION</em> 操作符必须由两个或者多个 <em>SELECT</em> 语句组成，每个 <em>SELECT</em> 语句的列数和数据类型必须一致.</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>可选子句，用于指定合并后的结果集的排序顺序.</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id &lt; 2 union select * from user where id &gt; 2;\n</code></pre>\n<p>筛选 <em>user</em> 表中 <em>id</em> 不等于 <em>2</em> 的所有行.</p>\n<h3 id=\"union-all\"><a class=\"markdownIt-Anchor\" href=\"#union-all\">#</a> <em>UNION ALL</em></h3>\n<p>此子句与 <em>UNION</em> 的不同在于展示出来的数据会包含重复数据。</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION ALL\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<h3 id=\"order-by-语句\"><a class=\"markdownIt-Anchor\" href=\"#order-by-语句\">#</a> <em>ORDER BY</em> 语句</h3>\n<p>如果想要对读取的数据进行排序，可以使用此子句来设定你想按那个字段那种方式来进行排序，再返回搜索结果。此子句可以按照一个或多个值进行升序 (<em>ASC</em>) 或降序 (<em>DESC</em>) 排序.</p>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名&gt; ORDER BY column1 [ASC | DESC], column2 [ASC | DESC],...;</code></p>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>用于指定排序顺序子句，<em>ASC</em> 表示升序（默认），<em>DESC</em> 表示降序.</li>\n</ul>\n</li>\n</ul>\n<p>使用拼音对汉字进行排序，如果使用 <em>gbk</em> 字符集，可以直接排序，如果使用 <em>utf8</em> 字符集，需要对字段进行转码.</p>\n<pre><code class=\"language-mysql\">select * from user order by convert(username using gbk);\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcmRlci1ieS5odG1s\">MySQL ORDER BY (排序) 语句 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"join连接\"><a class=\"markdownIt-Anchor\" href=\"#join连接\">#</a> <em>JOIN</em> (连接)</h3>\n<p>可以在 <em>SELECT</em> 、<em>UPDATE</em>、<em>DELETE</em> 语句中使用 JOIN 来联合多表查询.</p>\n<p>JOIN 按照功能大致分为三类：</p>\n<ul>\n<li><code>INNER JOIN</code>\n<ul>\n<li>获取两个表中字段匹配的记录，如果右表中匹配的行有字段为 <em>NULL</em>，则不显示此行.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 简单查询\nselect * from user inner join scores on user.id = scores.id;\n\n# 使用 as 定义别名\nselect u.username,s.chinese,s.mathematics,s.english from user as u inner join scores as s on u.id = s.id;\n\n# 多 inner join 查询\nselect * from user as u \ninner join scores as s on u.id = s.id \ninner join test_table as t on u.id = t.id;\n\n# 使用 where 过滤记录\nselect * from user as u\ninner join scores as s on u.id = s.id\ninner join test_table as t on u.id = t.id\nwhere u.birhdate &gt; '2005-01-01';\n</code></pre>\n<ul>\n<li><code>LEFT JOIN</code>\n<ul>\n<li>返回左表中的所有行，并包括右表中匹配的行，如果右表中匹配的行中没有值，则返回 <em>NULL</em> 值.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; left JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># left join 的使用方法同 inner join 一样\nselect u.id,u.username,s.mathematics,s.chinese,s.english,t.age from user as u\nleft join scores as s on u.id = s.id\nleft join test_table as t on s.id = t.id;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1qb2luLmh0bWw=\">MySQL 连接的使用 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"null-处理\"><a class=\"markdownIt-Anchor\" href=\"#null-处理\">#</a> <em>NULL</em> 处理</h3>\n<p><em>MySQL</em> 提供了三个运算符来处理 <em>NULL</em> 值，在 <em>MySQL</em> 中，<em>NULL</em> 值通常表示缺失或未知数据，你不能使用  <code>=</code>  或者  <code>!=</code>  来查找 <em>NULL</em> 值，因为 <em>NULL</em> 值与其他任何值比较都为 <em>NULL</em> .</p>\n<ul>\n<li><code>IS NULL</code>\n<ul>\n<li>当列的值是 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>IS NOT NULL</code>\n<ul>\n<li>当列的值不为 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>&lt;=&gt;</code>\n<ul>\n<li>当比较的两个值相等或者都为 <em>NULL</em> 时返回 <em>true</em> .</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 判读 age 字段是否为 NULL\nselect * from test_table as t where t.age is null;\n\n# 判断 age 字段是否不为 NULL\nselect * from test_table as t where t.age is not null;\n\n# 判断 age 字段是否为 NULL，效果同 is 一样\nselect * from test_table as t where t.age &lt;=&gt; null;\n</code></pre>\n<h4 id=\"数据表清洗\"><a class=\"markdownIt-Anchor\" href=\"#数据表清洗\">#</a> 数据表清洗</h4>\n<p>将表中指定的列中所有的 NULL 值替换为  <code>0</code> .</p>\n<pre><code class=\"language-mysql\">select * , ifnull(t.age,0) as age from test_table as t;\n</code></pre>\n<h4 id=\"ifnull-coalesce\"><a class=\"markdownIt-Anchor\" href=\"#ifnull-coalesce\">#</a> IFNULL &amp; COALESCE</h4>\n<p><code>IFNULL</code>  基本语法：</p>\n<p><code>IFNULL(expr1,expr2)</code></p>\n<p><em>ifnull</em> 是常用的用于处理 <em>NULL</em> 值的函数，其基本功能是如果参数 1 为 <em>NULL</em>，则返回参数 2 的值.</p>\n<p><code>COALESCE</code>  基本语法：</p>\n<p><code>COALESCE(value1,value2,...,valueEn)</code></p>\n<p><em>coalesce</em> 可以看做是 <em>ifnull</em> 的增强版，其功能同 <em>ifnull</em> 相同，但是可以接受比 <em>ifnull</em> 更多的参数，如果参数 1 为 <em>NULL</em>，则返回其参数列表中第一个非 <em>NULL</em> 的表达式，如果所有提供的表达式都为 <em>NULL</em>，那么 <em>coalesce</em> 函数将返回 <em>NULL</em>.</p>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1udWxsLmh0bWw=\">MySQL NULL 值处理 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p>MySQL 提供了正则表达式的匹配，用于提供比普通筛选更强大的功能.</p>\n<ul>\n<li><code>REGEXP</code>\n<ul>\n<li>regexp 是用于进行正则匹配的运算符.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,column2,... FROM &lt;表名&gt; WHERE column_name regexp 'pattern'</code></p>\n<pre><code class=\"language-mysql\"># 筛选出以 1 开头的 id\nselect * from user as u where u.id regexp '^[1*]';\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1yZWdleHAuaHRtbA==\">MySQL 正则表达式 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "title": "MySQL-2",
            "date_published": "2024-05-06T07:12:40.000Z",
            "content_html": "<h2 id=\"mysql-基本操作\"><a class=\"markdownIt-Anchor\" href=\"#mysql-基本操作\">#</a> MySQL 基本操作</h2>\n<h3 id=\"对数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据库操作\">#</a> 对数据库操作</h3>\n<h4 id=\"创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建数据库\">#</a> 创建数据库</h4>\n<p><code>CREATE DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法 ( <code>[]</code>  中为可选内容)：</p>\n<pre><code class=\"language-mysql\">CREATE DATABASE [IF NOT EXISTS] &lt;database_name&gt; [DEFAULT CHARSET charset_name] [COLLATE collation_name];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>IF NOT EXISTS</code></p>\n<ul>\n<li>这是一个可选的子句，用来避免因为试图创建已存在的数据库而产生的错误。</li>\n</ul>\n</li>\n<li>\n<p><code>DEFAULT CAHRSET</code></p>\n<ul>\n<li>这部分指定新创建的数据库的默认字符集为指定的字符集，这意味着在这个数据库中的所有表（除非明确指定其他字符集），其默认字符集都会是指定的字符集。</li>\n</ul>\n</li>\n<li>\n<p><code>COLLATE</code></p>\n<ul>\n<li>这部分指定了新创建数据库的默认排序规则为  <code>utf8_general_ci</code> 。排序规则（<em>Collation</em>）影响了字符数据的比较、排序以及唯一性校验的方式。 <code>utf8_general_ci</code>  是一个大小写不敏感的排序规则，适合那些对大小写不敏感的搜索场景，而且它对 <em>Unicode</em> 字符的排序并不是基于精确的语言排序规则，而是采用了一种通用的简单排序策略。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"选择数据库\"><a class=\"markdownIt-Anchor\" href=\"#选择数据库\">#</a> 选择数据库</h4>\n<p>要对一个数据库进行操作，必须先选择该数据库。选择数据库有两种方式。</p>\n<p>一是登录时选择已经创建好的数据库：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token operator\">-</span>D &lt;数据库名> <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p</pre></td></tr></table></figure><p>二是使用  <code>USE</code>  语句选择：</p>\n<pre><code class=\"language-mysql\">use &lt;数据库名&gt;;\n</code></pre>\n<p>使用这种方法语句执行成功后会显示  <code>Database changed</code> 。</p>\n<h4 id=\"删除数据库\"><a class=\"markdownIt-Anchor\" href=\"#删除数据库\">#</a> 删除数据库</h4>\n<p><code>DROP DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选子句，如果数据库存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对数据表操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据表操作\">#</a> 对数据表操作</h3>\n<p>创建数据表需要 <u>表名</u>、<u>表字段名</u>、<u>每个表字段的数据类型</u>。</p>\n<h4 id=\"创建数据表\"><a class=\"markdownIt-Anchor\" href=\"#创建数据表\">#</a> 创建数据表</h4>\n<pre><code class=\"language-mysql\">CREATE TABLE table_name(\n\tcolumn1 datatype,\n    column2 datatype,\n    ...\n);\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>表名</li>\n</ul>\n</li>\n<li><code>column1</code>\n<ul>\n<li>表的列名</li>\n</ul>\n</li>\n<li><code>datatype</code>\n<ul>\n<li>每个列的数据类型</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\">create table if not exists users(\\\n    id int unsigned auto_increment,\\\n    username varchar(50) not null,\\\n    birthdate date,\\\n    is_active boolean default true,\\\n    primary key(id,username)\\\n)engine=innodb default charset=utf8;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>unsigned</code></p>\n<ul>\n<li>设置字段属性的数据类型为无符号类型。</li>\n</ul>\n</li>\n<li>\n<p><code>auto_increment</code></p>\n<ul>\n<li>此关键字用于创建一个自增长的列，一般用于主键，每当有新的记录插入到表中时，此列数值会自动加 <code>1</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>primary key</code></p>\n<ul>\n<li>此关键字用于定义列为主键，主键用于唯一标识每行数据。可以使用多列来定义主键，列间以逗号 <code>,</code>  分隔。</li>\n</ul>\n</li>\n<li>\n<p><code>default</code></p>\n<ul>\n<li>此关键字用于指定列的默认值约束。当向表中插入新的记录时，如果没有为某个具有  <code>default</code>  约束的列提供具体值，那么 <em>MySQL</em> 将自动赋予该列预先定义好的默认值。</li>\n</ul>\n</li>\n<li>\n<p><code>not null</code></p>\n<ul>\n<li>如果不想字段值为空，可以设置字段属性为  <code>not null</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>engine=innodb</code></p>\n<ul>\n<li>指定表的存储引擎为  <code>InnoDB</code> 。 <code>InnoDB</code>  引擎支持事务处理和行级锁定。</li>\n</ul>\n</li>\n<li>\n<p><code>default charset=utf8</code></p>\n<ul>\n<li>指定默认的字符集为  <code>utf8</code> 。 <code>charset=utf8</code>  表示表中的所有字符串数据将以 <em>UTF-8</em> 字符集编码进行存储。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除数据表\"><a class=\"markdownIt-Anchor\" href=\"#删除数据表\">#</a> 删除数据表</h4>\n<p><code>DROP TABLE &lt;数据表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP TABLE [IF EXISTS] table_name;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>是你要删除的数据表的名字</li>\n</ul>\n</li>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选的子句，数据表存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看\"><a class=\"markdownIt-Anchor\" href=\"#查看\">#</a> 查看</h3>\n<p>可以使用  <code>show databases;</code>  命令查看所有数据库。</p>\n<p>使用  <code>show tables;</code>  查看选定数据库的所有表。</p>\n<p>使用  <code>desc &lt;表名&gt;;</code>  查看表结构。</p>\n<h2 id=\"增删查改\"><a class=\"markdownIt-Anchor\" href=\"#增删查改\">#</a> 增删查改</h2>\n<h3 id=\"增\"><a class=\"markdownIt-Anchor\" href=\"#增\">#</a> 增</h3>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;(column1, column2, ...)\nVALUES\n\t(value1, value2, ...),\n\t(value1, value2, ...),\n...;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>表中的列名。</li>\n</ul>\n</li>\n<li><code>value1, value2, ...</code>\n<ul>\n<li>要插入的具体数值。</li>\n</ul>\n</li>\n</ul>\n<p>如果数据是字符型，必须使用引号包裹。</p>\n<p>如果需要插入所有的列的数据，可以省略列名：</p>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;\nVALUES(NULL, 1, '张三');\n</code></pre>\n<ul>\n<li><code>NULL</code>\n<ul>\n<li>是用于自增长列的占位符，表示系统会为该列生成一个唯一的值。</li>\n</ul>\n</li>\n</ul>\n<p>在使用  <code>INSERT INTO</code>  插入数据时，如果设置了唯一键并且已经有此条数据，则  <code>SQL</code>  语句将无法执行成功，并会抛出错误 .</p>\n<p>可以使用  <code>INSERT IGNORE INTO</code>  来插入数据，与  <code>INSERT INTO</code>  的区别在于会忽略数据库中已经存在的数据，如果数据库中没有此条数据，则插入新的数据，如果有数据存在就跳过这条数据，这样就可以保留数据库中已经存在的数据，达到在间隙中插入数据的目的。</p>\n<h3 id=\"查\"><a class=\"markdownIt-Anchor\" href=\"#查\">#</a> 查</h3>\n<p><code>SELECT * FROM &lt;表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... \nFROM table_name \n[WHERE condition] \n[ORDER BY column_name [ASC | DESC]]\n[LIMIT number];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>你要选择的列的名称，可以使用  <code>*</code>  号表示选择所有列。</li>\n</ul>\n</li>\n<li><code>table_name</code>\n<ul>\n<li>要查询的数据表名称。</li>\n</ul>\n</li>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于指定过滤条件，返回符合条件的行。\n<ul>\n<li><code>select * from user where id &gt; 1;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>ORDER BY column_name [ASC | DESC]]</code>\n<ul>\n<li>可选子句，用于指定结果集的排序顺序，默认升序 (<em>ASC</em>)。\n<ul>\n<li><code>select * from user order by id desc;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>LIMIT number</code>\n<ul>\n<li>可选子句，限定返回的行数。\n<ul>\n<li><code>select * from user limit 2;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>如果你需要过滤重复的数据，可以使用  <code>DISTINCT</code>  关键字来过滤重复的数据。</p>\n<p>基本语法： <code>SELECT DISTINCT &lt;列名&gt; FROM table_name;</code></p>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zZWxlY3QtcXVlcnkuaHRtbA==\">MySQL 查询数据 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC13aGVyZS1jbGF1c2UuaHRtbA==\">MySQL WHERE 子句 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1oYW5kbGluZy1kdXBsaWNhdGVzLmh0bWw=\">MySQL 处理重复数据 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"改\"><a class=\"markdownIt-Anchor\" href=\"#改\">#</a> 改</h3>\n<p><code>UPDATE &lt;表名&gt; SET column1=value1, column2=value2, ...</code> ;</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">UPDATE &lt;table_name&gt;\nSET column1=value1, column2=value2, ...\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于更新指定的行。省略则更新所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC11cGRhdGUtcXVlcnkuaHRtbA==\">MySQL UPDATE 更新 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"删\"><a class=\"markdownIt-Anchor\" href=\"#删\">#</a> 删</h3>\n<p><code>DELETE FROM &lt;表名&gt; WHERE condition;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DELETE FROM table_name\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于删除指定的行。省略则删除所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kZWxldGUtcXVlcnkuaHRtbA==\">MySQL DELETE 语句 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "title": "MySQL-1",
            "date_published": "2024-05-06T07:09:43.000Z",
            "content_html": "<h3 id=\"mysql-简介\"><a class=\"markdownIt-Anchor\" href=\"#mysql-简介\">#</a> MySQL 简介</h3>\n<p><em>MySQL</em> 是一款广泛使用的关系型数据库管理系统（<em>RDBMS</em>），由瑞典 <em>MySQL AB</em> 公司最初开发，目前隶属于 <em>Oracle</em> 公司。<em>MySQL</em> 以其开源、稳定、高效、可扩展性强等特点而著名，是互联网行业中最为流行的数据库解决方案之一。</p>\n<p><em>MySQL</em> 命令关键字本身是不区分大小写的，但是数据库名、表名、列名、别名等在不同的操作系统下区分大小写的情况有所不同：</p>\n<ul>\n<li>在 <em>Windows</em> 系统下，<em>MySQL</em> 的表名、数据库名等默认是不区分大小写的，这是由于 <code>lower_case_table_names</code>  系统变量默认设置为 1，它会使得 <em>MySQL</em> 在存储和查找表名时统一转换为小写。</li>\n<li>在 <em>Linux</em> 系统和其他大多数 <em>Unix-like</em> 系统中，默认情况下 <em>MySQL</em> 是区分大小写的，也就是说，数据库名、表名等必须准确匹配其创建时的大小写。</li>\n</ul>\n<p>另外，尽管 <em>MySQL</em> 的关键字不区分大小写，但在编写 <em>SQL</em> 语句时，为了提高代码可读性和遵循行业标准，通常建议将 <em>SQL</em> 关键字大写，而标识符（如表名、列名）则根据实际情况保持一致的大小写规则。对于列名和列别名，无论在何种操作系统下，<em>MySQL</em> 内部都是忽略大小写的。不过要注意的是，如果启用了特定的排序规则（<em>collation</em>），即使在不区分大小写的环境中，也可能存在区分大小写的情况，尤其是在涉及到字符串比较时。</p>\n<h3 id=\"mysql-相关术语\"><a class=\"markdownIt-Anchor\" href=\"#mysql-相关术语\">#</a> MySQL 相关术语</h3>\n<ul>\n<li><strong>数据库:</strong> 数据库是一些关联表的集合。</li>\n<li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li>\n<li><strong>列:</strong> 一列 (数据元素) 包含了相同类型的数据，例如邮政编码的数据。</li>\n<li>** 行：** 一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li>\n<li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li>\n<li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li>\n<li>** 外键：** 外键用于关联两个表。</li>\n<li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li>\n<li>** 索引：** 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li>\n<li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li>\n</ul>\n<h3 id=\"关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库\">#</a> 关系型数据库</h3>\n<p>MySQL 为关系型数据库 (<em>Relational Database Management System</em>), 这种所谓的 &quot;<u>关系型</u>&quot;可以理解为&quot;<u>表格</u>&quot; 的概念，一个关系型数据库由一个或数个表格组成，如图所示的一个表格:</p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/03/0921_1.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>表头 (header):</strong> 每一列的名称；</li>\n<li><strong>列 (col):</strong> 具有相同数据类型的数据的集合；</li>\n<li><strong>行 (row):</strong> 每一行用来描述某条记录的具体信息；</li>\n<li><strong>值 (value):</strong> 行的具体信息，每个值必须与该列的数据类型相同；</li>\n<li><strong>键 (key)</strong>: 键的值在当前列中具有唯一性。</li>\n</ul>\n<h3 id=\"mysql-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据类型\">#</a> MySQL 数据类型</h3>\n<p>MySQL 数据类型大致分为五类，<u>数值</u>、<u>日期 \\ 时间</u>、<u>字符串 (字符)</u>、<u>空间类型</u> 和 <em><u>JSON</u></em> 类型，这五大类中又分为许多子类型：</p>\n<h4 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\">#</a> 数值类型</h4>\n<p>这些类型包括严格数值数据类型 (  <code>INTEGER</code> 、 <code>SMALLINT</code> 、 <code>DECIMAL</code>  和  <code>NUMERIC</code>  )，以及近似数值数据类型 (  <code>FLOAT</code> 、 <code>REAL</code>  和  <code>DOUBLE PRECISION</code> )。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>范围（有符号）</th>\n            <th>范围（无符号）</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>TINYINT</td>\n            <td>1 Bytes</td>\n            <td>(-128, 127)</td>\n            <td>(0, 255)</td>\n            <td>小整数值</td>\n        </tr>\n        <tr>\n            <td>SMALLINT</td>\n            <td>2 Bytes</td>\n            <td>(-32 768, 32 767)</td>\n            <td>(0, 65 535)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>MEDIUMINT</td>\n            <td>3 Bytes</td>\n            <td>(-8 388 608, 8 388 607)</td>\n            <td>(0, 16 777 215)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>INT 或 INTEGER</td>\n            <td>4 Bytes</td>\n            <td>(-2 147 483 648, 2 147 483 647)</td>\n            <td>(0, 4 294 967 295)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>BIGINT</td>\n            <td>8 Bytes</td>\n            <td>(-9 223 372 036 854 775 808, 9 223 372 036 854 775 807)</td>\n            <td>(0, 18 446 744 073 709 551 615)</td>\n            <td>极大整数值</td>\n        </tr>\n        <tr>\n            <td>FLOAT</td>\n            <td>4 Bytes</td>\n            <td>(-3.402 823 466 E+38, -1.175 494 351 E-38), (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>(0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>单精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DOUBLE</td>\n            <td>8 Bytes</td>\n            <td>(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>(0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>双精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DECIMAL</td>\n            <td>对DECIMAL(M,D)，如果M>D，为M+2否则为D+2</td>\n            <td>依赖于M和D的值</td>\n            <td>依赖于M和D的值</td>\n            <td>小数值</td>\n        </tr>\n    </tbody>\n</table>\n<h4 id=\"日期和时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型\">#</a> 日期和时间类型</h4>\n<p>表示时间值的日期和时间类型为  <code>DATETIME</code> 、 <code>DATE</code> 、 <code>TIMESTAMP</code> 、 <code>TIME</code>  和 <code>YEAR</code> 。</p>\n<p>每个时间类型有一个有效值范围和一个 &quot;零&quot; 值，当指定不合法的 <em>MySQL</em> 不能表示的值时使用 &quot;零&quot; 值。</p>\n<table>     <thead>         <tr>             <th>类型</th>             <th>大小</th>             <th>范围</th>             <th>格式</th>             <th>用途</th>         </tr>     </thead>     <tbody>         <tr>             <td>DATE</td>             <td>3 bytes</td>             <td>1000-01-01/9999-12-31</td>             <td>YYYY-MM-DD</td>             <td>日期值</td>         </tr>         <tr>             <td>TIME</td>             <td>3 bytes</td>             <td>'-838:59:59'/'838:59:59'</td>             <td>HH:MM:SS</td>             <td>时间值或持续时间</td>         </tr>         <tr>             <td>YEAR</td>             <td>1 byte</td>             <td>1901/2155</td>             <td>YYYY</td>             <td>年份值</td>         </tr>         <tr>             <td>DATETIME</td>             <td>8 bytes</td>             <td>'1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值</td>         </tr>         <tr>             <td>TIMESTAMP</td>             <td>4 bytes</td>             <td>'1970-01-01 00:00:01' UTC 到 '2038-01-19 03:14:07'UTC <br/>结束时间是第 <b>2147483647</b> 秒，北京时间 <b>2038-1-19 11:14:07</b>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值，时间戳</td>         </tr>     </tbody> </table>\n<h4 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h4>\n<p>字符串类型指  <code>CHAR</code> 、 <code>VARCHAR</code> 、 <code>BINARY</code> 、 <code>VARBINARY</code> 、 <code>BLOB</code> 、 <code>TEXT</code> 、 <code>ENUM</code>  和 <code>SET</code> 。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>CHAR</td>\n            <td>0-255 bytes</td>\n            <td>定长字符串</td>\n        </tr>\n        <tr>\n            <td>VARCHAR</td>\n            <td>0-65535 bytes</td>\n            <td>变长字符串</td>\n        </tr>\n        <tr>\n            <td>TINYBLOB</td>\n            <td>0-255 bytes</td>\n            <td>不超过 255 个字符的二进制字符串</td>\n        </tr>\n        <tr>\n            <td>TINYTEXT</td>\n            <td>0-255 bytes</td>\n            <td>短文本字符串</td>\n        </tr>\n        <tr>\n            <td>BLOB</td>\n            <td>0-65 535 bytes</td>\n            <td>二进制形式的长文本数据</td>\n        </tr>\n        <tr>\n            <td>TEXT</td>\n            <td>0-65 535 bytes</td>\n            <td>长文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMBLOB</td>\n            <td>0-16 777 215 bytes</td>\n            <td>二进制形式的中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMTEXT</td>\n            <td>0-16 777 215 bytes</td>\n            <td>中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGBLOB</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>二进制形式的极大文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGTEXT</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>极大文本数据</td>\n        </tr>\n    </tbody>\n</table>\n- `char(n)` 和 `varchar(n)` 中括号中 `n` 代表字符的个数，并不代表字节个数，比如 `CHAR(30)` 就可以存储 30 个字符。\n<ul>\n<li>\n<p><code>CHAR</code>  和  <code>VARCHAR</code>  类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n</li>\n<li>\n<p><code>BINARY</code>   和  <code>VARBINARY</code>  类似于  <code>CHAR</code>  和  <code>VARCHAR</code> ，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n</li>\n<li>\n<p><code>BLOB</code>  是一个二进制大对象，可以容纳可变数量的数据。</p>\n<ul>\n<li><code>TINYBLOB</code></li>\n<li><code>BLOB</code></li>\n<li><code>MEDIUMBLOB</code></li>\n<li><code>LONGBLOB</code></li>\n</ul>\n</li>\n<li>\n<p><code>TEXT</code>  是文本对象，同  <code>BLOB</code>  一样，也有四种类型。</p>\n<ul>\n<li><code>TINYTEXT</code></li>\n<li><code>TEXT</code></li>\n<li><code>MEDIUMTEXT</code></li>\n<li><code>LONGTEXT</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"枚举与集合类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举与集合类型\">#</a> 枚举与集合类型</h4>\n<ul>\n<li><code>ENUM</code> ：枚举类型，用于存取单一的值，可以选择一个预定义的集合。</li>\n<li><code>SET</code> ：集合类型，用于存储多个值，可以选择多个预定义的集合。</li>\n</ul>\n<h4 id=\"空间数据类型\"><a class=\"markdownIt-Anchor\" href=\"#空间数据类型\">#</a> 空间数据类型</h4>\n<p><code>GEOMETRY</code> ,  <code>POINT</code> ,  <code>LINESTRING</code> ,  <code>POLYGON</code> ,  <code>MULTIPOINT</code> ,  <code>MULTILINESTRING</code> ,  <code>MULTIPOLYGON</code> ,  <code>GEOMETRYCOLLECTION</code> : 用于存储空间数据（地理信息、几何图形等）。</p>\n<h4 id=\"json-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#json-数据类型\">#</a> JSON 数据类型</h4>\n<p>​\t<em>MySQL</em> 从 <code>5.7.8</code>  版本开始就支持存储原生的 <em>JSON</em> 类型的数据，我们可以 <em>MySQL</em> 中存储 <em>JSON</em> 对象或 <em>JSON</em> 数组。<em>JSON</em> 数据并不是以字符串的形式存储，而是使用一种允许快速读取文本元素的内部二进制格式进行存储的，在 <em>JSON</em> 数据列中插入或者更新的时候将会自动验证 <em>JSON</em> 文本数据是否正确，未通过验证的文本将产生一个错误信息。</p>\n<p>​\t<em>JSON</em> 与 <em>BLOB</em> 和 <em>TEXT</em> 类型一样，设置 <em>JSON</em> 类型的字段时不能设置默认值，其默认值只能为 <em>NULL</em> 。</p>\n<p>​\t<em>JSON</em> 类型的存储长度与  <code>LONGBLOB</code>  、 <code>LONGTEXT</code>  类型长度相同，但是最大长度不能超过 <em>max_allowed_packet</em> 系统变量设置的值。</p>\n<p>​</p>\n<h3 id=\"数据类型的选择\"><a class=\"markdownIt-Anchor\" href=\"#数据类型的选择\">#</a> 数据类型的选择</h3>\n<p>​\t在  <code>MySQL 5.0</code>  及以上的版本里，一个汉字占用的长度跟编码有关，在 <em>UTF-8</em> 编码下，一个汉字占用 3 个字节，<em>GBK</em> 编码下一个汉字占用 2 个字节。</p>\n<p>​\t选择数据类型通常选择更小的，以及更简单的类型，同时应该避免使用 <em>NULL</em> 。 对于经常变化的字段应该使用  <code>varchar</code> ，知道固定长度的用  <code>char</code> ，尽量使用  <code>varchar</code> ，能用  <code>varchar</code>  的地方不用  <code>text</code> ，对于超过 255 字符的只能使用  <code>varchar</code>  或  <code>text</code> 。</p>\n<h3 id=\"外键\"><a class=\"markdownIt-Anchor\" href=\"#外键\">#</a> 外键</h3>\n<p>​\t外键约束是用来在两个表之间建立关系的一种约束，它定义了一个表中的列与另一个表中的列之间的关系。外键约束可以保证数据的完整性和一致性。</p>\n<h4 id=\"级联操作\"><a class=\"markdownIt-Anchor\" href=\"#级联操作\">#</a> 级联操作</h4>\n<p>在添加了外键之后，再删除主表的数据时产生的约束行为，就称之为<u>删除 / 更新</u>行为。具体的行为有以下几种：</p>\n<ul>\n<li><code>no action</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>RESTRICT</code>  一致).</li>\n</ul>\n</li>\n<li><code>restrict</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>NO ACTION</code>  一致).</li>\n</ul>\n</li>\n<li><code>cascade</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则也删除 / 更新外键所在子表中的记录.</li>\n</ul>\n</li>\n<li><code>set null</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则设置子表中该外键值为  <code>null</code>  (需要允许外键值取  <code>null</code>  ).</li>\n</ul>\n</li>\n<li><code>set default</code>\n<ul>\n<li>主表有变更时，子表将外键列设置为一个默认的值. ( <code>Innodb</code>  不支持)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建外键\"><a class=\"markdownIt-Anchor\" href=\"#创建外键\">#</a> 创建外键</h4>\n<p>创建外键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表时添加外键\nCREATE TABLE 表名(\n    字段名 数据类型,\n    ...\n    FOREIGN key(外键字段名) REFERENCES 主表(主表列名) [外键产生的行为]\n);\n\n# 单独添加外键\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);\n</code></pre>\n<h4 id=\"删除外键\"><a class=\"markdownIt-Anchor\" href=\"#删除外键\">#</a> 删除外键</h4>\n<pre><code class=\"language-mysql\"># 删除外键\nALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"language-mysql\"> # 创建从表时添加外键\n create table order_items(\n item_id int auto_increment,\n order_id int unsigned,\n product_name varchar(255),\n quantity int,\n primary key(item_id),\n foreign key(order_id) references orders(order_id) \n on delete cascade on update cascade);\n    \n # 单独添加外键\n alter table scores add constraint fk_id foreign key(id) references user(id);\n \n # 删除外键\n alter table scores drop foreign key fk_id;\n</code></pre>\n<h3 id=\"唯一键\"><a class=\"markdownIt-Anchor\" href=\"#唯一键\">#</a> 唯一键</h3>\n<p>​\t唯一约束是一种完整性约束，用来确保表中某一列或多列的数据具有唯一性，即不允许出现重复的值。唯一约束有以下几条关键特点：</p>\n<ul>\n<li>\n<p><strong>唯一性</strong></p>\n<ul>\n<li>顾名思义，唯一约束强制指定列中的数据必须是唯一的。如果尝试插入重复的值，<em>MySQL</em> 将阻止该操作并返回错误.</li>\n</ul>\n</li>\n<li>\n<p><strong>允许空值</strong></p>\n<ul>\n<li>\n<p>唯一约束可以包含空值 ( <em>NULL</em> )，但是，一个具有唯一约束的列至多只能有一个空值.</p>\n</li>\n<li>\n<blockquote>\n<p>在数据库中，唯一约束允许列中的空值（ <em>NULL</em> ）出现一次的原因是基于空值的特殊性质。在 SQL 中，空值表示 “未知” 或 “不存在” 的数据。由于空值代表的是未知信息，它们在比较时不等于任何值，包括它们自己。这意味着，从逻辑上讲，你不能说一个空值等于另一个空值，因为它们都代表着未知。</p>\n<p>因此，当我们对一个列施加唯一约束时，我们是在说这个列中的每个非空值都必须是唯一的。但是，由于空值之间不能进行比较，我们就不能说它们是 “不唯一” 的。这就是为什么 SQL 标准允许一个具有唯一约束的列可以有一个空值的原因。然而，为了维护数据的完整性和逻辑一致性，大多数数据库系统会限制这样的列至多只能有一个空值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>多个唯一约束</strong></p>\n<ul>\n<li>在一个表中，可以定义多个唯一约束，这使得你可以对不同的列或列组合施加唯一性要求.</li>\n</ul>\n</li>\n<li>\n<p><strong>索引关联</strong></p>\n<ul>\n<li>创建唯一约束时，<em>MySQL</em> 会自动为受约束的列创建一个唯一索引，用于提高查询效率，尤其在执行这些列的查询时.</li>\n</ul>\n</li>\n<li>\n<p><strong>命名约定</strong></p>\n<ul>\n<li>在定义唯一约束时，可以为其指定一个明确的名称，这有助于管理和识别约束。如果不指定名称，<em>MySQL</em> 会自动为其生成一个名称，通常默认为该列的名称.</li>\n</ul>\n</li>\n<li>\n<p><strong>组合唯一约束</strong></p>\n<ul>\n<li>可以为表的多个列一起定义唯一约束，这意味着这一组列的值组合必须唯一，即使单个列的值可能重复。</li>\n</ul>\n</li>\n<li>\n<p><strong>非主键</strong></p>\n<ul>\n<li>尽管唯一约束与主键约束在确保唯一性方面有相似之处，但它不是表的主标识符，一个表可以有多个唯一约束，但主键只有一个。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"添加唯一键\"><a class=\"markdownIt-Anchor\" href=\"#添加唯一键\">#</a> 添加唯一键</h4>\n<p>​\t添加唯一键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表的时候使用 UNIQUE 关键字添加\nCREATE TABLE 表名(\n    字段名 数据类型 [UNIQUE],\n    ...\n);\n\n# 使用 ALTER TABLE 命令添加\nALTER TABLE 表名 ADD CONSTRAINT 约束名称 UNIQUE(列名);\n</code></pre>\n<h4 id=\"删除唯一键\"><a class=\"markdownIt-Anchor\" href=\"#删除唯一键\">#</a> 删除唯一键</h4>\n<pre><code class=\"language-mysql\"># 删除唯一键\nALTER TABLE 表名 DROP CONSTRAINT 唯一键名;\n</code></pre>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        }
    ]
}