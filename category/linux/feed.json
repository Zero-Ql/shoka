{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"linux\" category",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/linux/SSH-Agent/",
            "url": "http://yunyat.cloud/linux/SSH-Agent/",
            "title": "SSH Agent",
            "date_published": "2024-11-03T06:36:15.000Z",
            "content_html": "<h3 id=\"ssh-agent-简介\"><a class=\"markdownIt-Anchor\" href=\"#ssh-agent-简介\">#</a> <em>SSH Agent</em> 简介</h3>\n<blockquote>\n<p>*SSH Agent（Secure Shell Agent）* 是一个帮助管理 <em>SSH</em> 认证过程的守护进程。它的主要功能是存储用户的私钥，并代表用户在进行 <em>SSH</em> 认证时向 <em>SSH</em> 服务器提供这些私钥，从而避免频繁输入密码或私钥文件的路径。<em>SSH Agent</em> 的设计目的是为了提高安全性、方便性和效率。</p>\n</blockquote>\n<p>总结：使用 <em>ssh agent</em> 可以使你用不同的私钥免密登录不同的账号</p>\n<h3 id=\"主要功能\"><a class=\"markdownIt-Anchor\" href=\"#主要功能\">#</a> 主要功能</h3>\n<ol>\n<li><strong>存储私钥</strong>：\n<ul>\n<li><em>SSH Agent</em> 可以存储用户的私钥，并在需要时提供给 <em>SSH</em> 客户端。</li>\n<li>这样用户不需要每次都输入私钥的密码或指定私钥文件的路径。</li>\n</ul>\n</li>\n<li><strong>简化认证过程</strong>：\n<ul>\n<li><em>SSH Agent</em> 可以简化 <em>SSH</em> 认证过程，使得用户只需要一次加载私钥，之后就可以在多个会话中使用。</li>\n<li>这样可以避免每次使用 SSH 连接时都需要重新输入密码或使用  <code>-i</code>  参数指定私钥文件。</li>\n</ul>\n</li>\n<li><strong>提高安全性</strong>：\n<ul>\n<li>私钥存储在内存中，并受到 <em>SSH Agent</em> 的保护，减少了私钥被未经授权的访问的风险。</li>\n<li><em>SSH Agent</em> 可以配置为在一定时间内自动删除私钥，从而增加安全性。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h3>\n<ol>\n<li>\n<p>启动</p>\n<ul>\n<li>在 <em>Windows</em> 下使用  <code>ssh-agent -s</code>  来启动守护进程</li>\n</ul>\n</li>\n<li>\n<p>将输出的环境变量添加到当前会话</p>\n<ul>\n<li>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>命令</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Set-Content env:<span class=\"token environment constant\">SSH_AUTH_SOCK</span> <span class=\"token variable\">$env</span><span class=\"token builtin class-name\">:</span><span class=\"token environment constant\">SSH_AUTH_SOCK</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>Set-Content env:SSH_AGENT_PID <span class=\"token variable\">$env</span>:SSH_AGENT_PID</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>添加私钥到 <em>SSH Agent</em></p>\n<ul>\n<li>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>命令</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre>ssh-add ~/.ssh/<span class=\"token punctuation\">[</span>你的私钥名称<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 例如：ssh-add ~/.ssh/id_rsa_github</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<div class=\"note info\">\n<p>添加成功应该显示为类似的输出 “Identity added: .\\id_rsa_github (github)”</p>\n</div>\n<h3 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<ol>\n<li><code>ssh-add -l </code>  查看当前 <em>SSH Agent</em> 中已加载的私钥</li>\n<li><code>ssh-add -D</code>  删除 <em>SSH Agent</em> 中所有私钥</li>\n</ol>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "电脑技术",
                "SSH"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Git的使用",
            "date_published": "2023-10-26T11:30:24.000Z",
            "content_html": "<h4 id=\"git概念\"><a class=\"markdownIt-Anchor\" href=\"#git概念\">#</a> Git 概念</h4>\n<p>git 分为工作区、暂存区和版本库</p>\n<p>工作区：就是你能直接看见的文件</p>\n<p>暂存区：暂存区位于 .git/index 文件中，暂存区中存储的都是索引</p>\n<p>版本库：整个 .git 文件夹即为版本库</p>\n<p>在版本库中还存有 master 分支所代表的目录树</p>\n<p>一般用 HEAD 来代指当前分支，HEAD 是一个指向 master 分支的指针</p>\n<h5 id=\"推送流程\"><a class=\"markdownIt-Anchor\" href=\"#推送流程\">#</a> 推送流程</h5>\n<p>git add . # 将当前目录下的所有内容添加到暂存区，此时并不会 commit 到版本库</p>\n<p>git commit -m “update” # 将暂存区的文件提交到版本库，后面的字符串为提交说明</p>\n<p>git push git 仓库位置 # 此时会将版本库中的文件提交到远程 git 仓库</p>\n<blockquote>\n<p>git add  》 git commit  》git push</p>\n</blockquote>\n<p>图解：</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t工作区<span class=\"token arrow operator\">->></span>暂存区<span class=\"token operator\">:</span> add # 添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t暂存区<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> commit # 提交</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>远程仓库<span class=\"token operator\">:</span> push # 推送</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>版本库<span class=\"token operator\">:</span> clone # 克隆</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t远程仓库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> pull # 拉取</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t版本库<span class=\"token arrow operator\">->></span>工作区<span class=\"token operator\">:</span> checkout # 分支切换</pre></td></tr></table></figure><blockquote>\n<p>参数解析：</p>\n<p>add ：添加文件到暂存区</p>\n<p>commit ：提交文件到版本库 / 本地仓库</p>\n<p>push：推送文件到远程仓库</p>\n<p>clone：将一个项目克隆到本地仓库</p>\n<p>pull：拉取一个仓库到本地</p>\n<p>checkout：切换分支</p>\n</blockquote>\n<h4 id=\"git-的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#git-的基本操作\">#</a> Git 的基本操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">git init</td>\n<td style=\"text-align:center\"><code>[file]</code></td>\n<td style=\"text-align:center\">初始化仓库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git status</code></td>\n<td style=\"text-align:center\"><code>[-s]</code></td>\n<td style=\"text-align:center\">查看仓库当前的状态，显示有变更的文件，加 -s 参数使其简短输出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git diff</td>\n<td style=\"text-align:center\"><code>[--cached]</code>   <code>[HEAD]</code></td>\n<td style=\"text-align:center\">比较文件的不同，即暂存区和工作区的差异，可以使用 --cachaed 显示已缓存的改动，使用 HEAD 显示所有已缓存和未缓存的改动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git reset</code></td>\n<td style=\"text-align:center\"><code>[HEAD~1]</code>   <code>[file]</code></td>\n<td style=\"text-align:center\">回退版本，回退到添加或提交之前，或使用 --soft HEAD~3 参数指定回退到上上上个版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git rm</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">将文件从暂存区和工作区删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>git mv</code></td>\n<td style=\"text-align:center\"><code>[-f] [file] [newfile]</code></td>\n<td style=\"text-align:center\">移动或重命名工作区文件，添加 -f 参数来重命名文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git switch</td>\n<td style=\"text-align:center\"><code>&lt;branch-name&gt;</code>   <code>[-c] &lt;new-branch-name&gt;</code>   <code>tags/&lt;tag-name&gt;</code></td>\n<td style=\"text-align:center\">更清晰的切换分支，切换到指定分支。使用 -c 创建分支并切换到新创建的分支。使用 tags/ 切换到标签所指向的提交状态</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git restore</td>\n<td style=\"text-align:center\"><code>&lt;file&gt;</code>   <code>--staged &lt;file&gt;</code>   <code>--source=&lt;commit&gt; &lt;file&gt;</code></td>\n<td style=\"text-align:center\">恢复或撤销文件的更改。指定文件名将其恢复至最新的提交状态，丢弃所有未提交的更改。使用 --staged 将文件还原到添加到暂存区之前。使用 --source 将文件还原到指定的历史版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">git branch</td>\n<td style=\"text-align:center\"><code>[new-branch-name]</code></td>\n<td style=\"text-align:center\">查看可用分支和标签。加参数新建分支</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"git-分支管理\"><a class=\"markdownIt-Anchor\" href=\"#git-分支管理\">#</a> Git 分支管理</h4>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tB<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tD<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>F<span class=\"token text string\">(master)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tB<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>B1<span class=\"token text string\">(b1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tB1<span class=\"token text string\">(b1)</span><span class=\"token arrow operator\">--></span>B2<span class=\"token text string\">(b2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tE<span class=\"token text string\">(master)</span><span class=\"token arrow operator\">--></span>E1<span class=\"token text string\">(e1)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tE1<span class=\"token text string\">(e1)</span><span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(e2)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tHEAD<span class=\"token arrow operator\">--></span>E2<span class=\"token text string\">(head)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t图解</pre></td></tr></table></figure><h5 id=\"合并分支-删除分支\"><a class=\"markdownIt-Anchor\" href=\"#合并分支-删除分支\">#</a> 合并分支 &amp; 删除分支</h5>\n<p>如上图所示，创建一个分支之后就是从那个提交历史节点 clone 一个新的节点，在此节点上所做的任何更改都不会影响到主分支。主分支所做的改动同样也不会影响到别的分支节点，但是要注意，可以使用以下命令来将指定的分支合并到主分支</p>\n<blockquote>\n<p><code>git merge &lt;branch-name&gt;</code></p>\n</blockquote>\n<p>在分支被合并之后就可以删除此分支</p>\n<blockquote>\n<p><code>git branch -d &lt;branch-name&gt;</code></p>\n</blockquote>\n<h5 id=\"合并冲突\"><a class=\"markdownIt-Anchor\" href=\"#合并冲突\">#</a> 合并冲突</h5>\n<p>当你在主分支更改了一个文件并且将更改提交到了版本库，又在另一个分支上同样更改了这个文件并且也提交到了版本库时，这个时候假设你想要将这个分支合并到主分支上，此时会出现合并冲突问题，这需要我们去手动解决</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nhello world\n=======\n你好世界\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre>\n<p>在上面的文件 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中，我们在主分支中添加了 hello world 内容。在 master 分支中添加了 你好世界 内容。</p>\n</blockquote>\n<p>解决冲突只需要将 <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span> 中的标记删除然后重新添加和提交即可</p>\n<blockquote>\n<pre><code>## Decimal-conversion\n进制转换\n- 按照提示输入即可\n\nhello world\n你好世界\n</code></pre>\n<p>修改之后用 git add 添加和 git commit 提交</p>\n</blockquote>\n<h4 id=\"查看-git-的提交历史\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的提交历史\">#</a> 查看 Git 的提交历史</h4>\n<h5 id=\"git-log\"><a class=\"markdownIt-Anchor\" href=\"#git-log\">#</a> Git log</h5>\n<blockquote>\n<p><code>git log</code></p>\n<p>使用此命令会显示从最新到最旧的所有提交信息，包括提交的哈希值、作者、提交日期、提交说明</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git log [选项] [分支名/提交哈希]</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-p</code></td>\n<td style=\"text-align:center\">显示提交的具体更改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--oneline</code></td>\n<td style=\"text-align:center\">以简洁的一行格式显示提交信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--graph</code></td>\n<td style=\"text-align:center\">以图形化的方式显示分支和合并历史</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--decorate</code></td>\n<td style=\"text-align:center\">显示分支和标签指向的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--author=&lt;作者&gt;</code></td>\n<td style=\"text-align:center\">只显示指定的作者的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--since=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之后的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--until=&lt;时间&gt;</code></td>\n<td style=\"text-align:center\">只显示特定时间之前的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--grep=&lt;模式&gt;</code></td>\n<td style=\"text-align:center\">只显示包含特定模式的提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--no-merges</code></td>\n<td style=\"text-align:center\">不显示合并提交</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--stat</code></td>\n<td style=\"text-align:center\">显示简略统计信息，包括修改的文件和行数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--abbrev-commit</code></td>\n<td style=\"text-align:center\">使用短提交哈希值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--pretty=&lt;格式&gt;</code></td>\n<td style=\"text-align:center\">使用自定义的提交信息的显示格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--reverse</code></td>\n<td style=\"text-align:center\">逆向显示所有日志</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用  <code>git log</code>  命令会输出以下内容</p>\n<pre><code>$ git log\ncommit 0c98d56e9822f23406758d2339833ffec7af0c1a (HEAD -&gt; main)\nMerge: 434acee e6e3e72\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 11:11:19 2023 +0800\n\n\ttest3\n\ncommit e6e3e72d10cf8b1218e0118beac857af06ff57cd (master)\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:59:53 2023 +0800\n\n\ttest2\n\ncommit 434aceeb3a6fbac0ec94fdbedb15d74455528f2f\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Thu Oct 26 10:58:50 2023 +0800\n\n\t test\n\ncommit 33e6c64449e0e094e19d7aea162bfddc23a10832\nAuthor: 清天 &lt;2704984649@qq.com&gt;\nDate:   Wed Oct 25 10:29:18 2023 +0800\n\n\tREADME.md\n</code></pre>\n<p>使用  <code>git log --oneline --graph</code>  以图形化的方式显示简洁的一行提交信息</p>\n<pre><code>$ git log --oneline --graph\n*   0c98d56 (HEAD -&gt; main) test3\n|\\\n| * e6e3e72 (master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>此时可以清晰的看见何时工作分叉，又何时合并分支</p>\n</blockquote>\n<p>可以使用  <code>git log --help</code>  查看帮助信息</p>\n<h5 id=\"git-blame\"><a class=\"markdownIt-Anchor\" href=\"#git-blame\">#</a> Git blame</h5>\n<blockquote>\n<p><code>git blame</code></p>\n<p>使用此命令可以查看指定文件的每一行代码是由谁在什么时候引入或修改的</p>\n</blockquote>\n<p>命令语法：</p>\n<p>​\t <code>git blame [选项] &lt;文件路径&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-L &lt;起始行号&gt;,&lt;结束行号&gt;</code></td>\n<td style=\"text-align:center\">只显示指定行号范围内的代码注释</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C</code></td>\n<td style=\"text-align:center\">对于重命名或拷贝的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-M</code></td>\n<td style=\"text-align:center\">对于移动的代码行，也进行代码行溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-C -C</code>  or  <code>-M -M</code></td>\n<td style=\"text-align:center\">对于较多改动的代码行，进行更进一步的溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>--show-stats</code></td>\n<td style=\"text-align:center\">显示包含每个作者的行数统计信息</td>\n</tr>\n</tbody>\n</table>\n<p>更多用法可以使用  <code>git blame --help</code>  查看帮助文档</p>\n<h4 id=\"git-标签\"><a class=\"markdownIt-Anchor\" href=\"#git-标签\">#</a> Git 标签</h4>\n<p><code>git tag -a &lt;标签名&gt;</code></p>\n<p>在发布版本的时候，可以使用 tag 来给本次提交打上标签。使用 -a 参数来创建一个带注解的标签，加上这个参数它会记录此标签是何时打的，谁打的，以及让你添加一个标签的注解</p>\n<p><code>git tag -a &lt;标签名&gt; &lt;提交哈希&gt;</code></p>\n<p>你可以使用上面的命令给以前的提交追加 tag 标签。我给  <code>e6e3e72</code>  这个提交追加了  <code>v0.9</code>  的标签</p>\n<pre><code>$ git tag -a v0.9 e6e3e72\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2 \t# 此处显示了追加的标签\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p><code>git log --decorate</code></p>\n<p>使用此命令来查看我们打的标签</p>\n<pre><code>$ git log --oneline --decorate --graph\n*   0c98d56 (HEAD -&gt; main, tag: v1.0) test3\n|\\\n| * e6e3e72 (tag: v0.9, master) test2\n* | 434acee test\n|/\n* 33e6c64 README.md\n* 4fa856d README.md\n* aaba7d0 (origin/main, origin/HEAD) Create README.md\n* 76836c5 Delete .gitignore\n* 4e6c20b Add files via upload\n* cb5ab48 Initial commit\n</code></pre>\n<p>也可以使用  <code>git tag</code>  来查看所有的标签</p>\n<p>指定标签信息的命令：</p>\n<p><code>git tag -a &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p>PGP 签名标签命令：<br>\n <code>git tag -s &lt;标签名&gt; -m &lt;标签信息&gt;</code></p>\n<p><code>gti tag -d v0.9</code> <br>\n 使用上面的命令删除指定的标签</p>\n<h4 id=\"git-远程仓库操作\"><a class=\"markdownIt-Anchor\" href=\"#git-远程仓库操作\">#</a> Git 远程仓库操作</h4>\n<h5 id=\"添加远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#添加远程仓库\">#</a> 添加远程仓库</h5>\n<p><code>git remote add &lt;仓库别名&gt; &lt;仓库的 ssh url 地址&gt;</code></p>\n<ul>\n<li>使用以上命令可以添加一个远程仓库并设置别名，别名在推送时会用的上</li>\n</ul>\n<h5 id=\"推送\"><a class=\"markdownIt-Anchor\" href=\"#推送\">#</a> 推送</h5>\n<p>推送代码到仓库里有两种方法：</p>\n<ol>\n<li>\n<p>然后使用  <code>git push -u &lt;仓库别名&gt; master</code>  来将本地的 master 分支推送到 origin 的 master 分支上</p>\n</li>\n<li>\n<p>也可以使用  <code>git push &lt;仓库地址&gt;</code>  来推送你的当前分支</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>这两种方法的区别是第一种方法来推送是将本地的 master 分支推送到 origin 主机的 master 分支，并且指定 你所设置的仓库别名所代表的主机为默认主机，这样在以后推送时就可以不加任何参数的使用  <code>git push</code></p>\n</li>\n<li>\n<p>第二种方法只是单纯的将本地的当前分支上传到指定的远程仓库地址，并不会指定默认主机，也不会创建或更改远程分支，只是简单的上传代码。</p>\n</li>\n<li>\n<p>查看当前配置有哪些仓库，可以加上 -v 参数来显示所有的仓库别名的实际连接地址</p>\n<p><code>git remote [-v]</code></p>\n</li>\n</ul>\n<h5 id=\"提取远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#提取远程仓库\">#</a> 提取远程仓库</h5>\n<ol>\n<li>先使用  <code>git fetch [仓库名] [分支名]</code>  将远程仓库的分支下载到本地主机，因为时拉取，所以需要指定远程仓库名和分支名</li>\n</ol>\n<pre><code>$ git fetch origin main\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 996 bytes | 90.00 KiB/s, done.\nFrom gitee.com:Zero_Li_Fun/Decimal-conversion\n * branch            main       -&gt; FETCH_HEAD\n   dfb4d6e..9d5cf43  main       -&gt; origin/main\n</code></pre>\n<ol start=\"2\">\n<li>然后使用  <code>git merge [origin/master]</code>  来合并远程分支到本地的当前分支，合并分支要指定被合并的分支名</li>\n</ol>\n<pre><code>$ git merge origin/main\nUpdating dfb4d6e..9d5cf43\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre>\n<h5 id=\"删除远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#删除远程仓库\">#</a> 删除远程仓库</h5>\n<p><code>git remote rm &lt;仓库别名&gt;</code></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "url": "http://yunyat.cloud/linux/Versioning/Git%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E4%BB%93%E5%BA%93/",
            "title": "Git同时部署多个仓库",
            "date_published": "2023-10-26T03:20:32.000Z",
            "content_html": "<h4 id=\"私有仓库的配置\"><a class=\"markdownIt-Anchor\" href=\"#私有仓库的配置\">#</a> 私有仓库的配置</h4>\n<p>刚需：先在服务器端创建 git 用户，并且配置用户密码</p>\n<p>可以使用下面的命令创建和修改</p>\n<blockquote>\n<p>useradd git</p>\n<p>passwd git</p>\n<p>#注：密码要输入两次确认</p>\n</blockquote>\n<h5 id=\"服务器端配置\"><a class=\"markdownIt-Anchor\" href=\"#服务器端配置\">#</a> 服务器端配置：</h5>\n<blockquote>\n<p>su git \t# 切换到 git 用户</p>\n<p>cd \t# 进入用户家目录</p>\n<p>mkdir .ssh ; cd .ssh  \t# 创建 .ssh 配置目录并进入</p>\n<p>touch authorized_keys \t# 创建 authorized_keys 来存放公钥</p>\n<p>chmod 700 /home/git/.ssh/ ; chmod 600 /home/git/.ssh/authorized_keys \t# 修改 .ssh 及 authorized_keys 的权限</p>\n<p>vim /etc/ssh/sshd_config</p>\n<p>#在此文件中查找以下字段是否存在或取消注释</p>\n<p>#1. RSAAuthentication yes</p>\n<p>#2. PubkeyAuthentication yes</p>\n<p>#3. AuthorizedkeysFile .ssh/authorized_keys</p>\n</blockquote>\n<h5 id=\"客户端生成公钥\"><a class=\"markdownIt-Anchor\" href=\"#客户端生成公钥\">#</a> 客户端生成公钥：</h5>\n<blockquote>\n<p>ssh-keygen -t rsa -C “git” -f “id_rsa_git” \t<br>\n# 使用 -f 来指定生成的密钥文件名<br>\n #使用 -C 来指定生成密钥的注释信息，以便使用 -v 调试时区分密钥</p>\n</blockquote>\n<h4 id=\"配置-github-和-gitee-仓库\"><a class=\"markdownIt-Anchor\" href=\"#配置-github-和-gitee-仓库\">#</a> 配置 Github 和 Gitee 仓库</h4>\n<blockquote>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span>” -f “id_rsa_gitee”</p>\n<p>ssh-keygen -t rsa -C “<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span>” -f “id_rsa_github”</p>\n</blockquote>\n<div class=\"note primary\">\n<p>生成公钥请在 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的终端里进行，文件名为 .pub 后缀的文件为公钥文件</p>\n<p>然后将不同仓库的公钥里的值分别添加到不同的仓库里即可</p>\n<p>私有仓库则将值添加到 git 用户的 .ssh/authorized_keys 里</p>\n</div>\n<div class=\"note info\">\n<p>注：可以使用 echo “值” &gt;&gt; authorized_keys 将值追加到文件里，这样可以防止覆盖以前配置的 ssh 公钥，防止其他用户无法使用免密登录</p>\n</div>\n<p>然后配置本地主机的 C:\\Users\\ 用户名 \\ .ssh\\ 这个目录下的  <code>config</code>  文件来解决  <code>ssh</code>  冲突问题 ，没有就创建一个，然后填入以下内容</p>\n<div class=\"note info\">\n<p>创建的 config 文件没有后缀名</p>\n</div>\n<blockquote>\n<p>#hexo 用户</p>\n<p>Host hexohost \t# 别名<br>\n HostName 8.222.153.91 \t# 主机地址<br>\n Post 5213 \t# 端口<br>\n User hexo \t# 用户名<br>\n IdentityFile ~/.ssh/id_rsa_hexo \t# 私钥位置，一般位于 C:\\\\Users\\username\\.ssh\\ 下</p>\n<p>#root 用户</p>\n<p>Host roothost<br>\nHostName 8.222.153.91<br>\nPost 5213<br>\nUser root<br>\nIdentityFile ~/.ssh/id_rsa</p>\n<p>#git 登录 github</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_github</p>\n<p>#git 登录 gitee</p>\n<p>Host <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nHostName <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGVlLmNvbQ==\">gitee.com</span><br>\nUser git<br>\nIdentityFile ~/.ssh/id_rsa_gitee</p>\n</blockquote>\n<p>也可以在使用 ssh 的时候在后面使用 -p 参数指定端口</p>\n<blockquote>\n<p>ssh <span class=\"exturl\" data-url=\"bWFpbHRvOmhleG9AOC4yMjIuMTUzLjkx\">hexo@8.222.153.91</span> -p 5213</p>\n</blockquote>\n<p>然后可以使用下面的命令测试登录：</p>\n<blockquote>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span></p>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span></p>\n</blockquote>\n<h4 id=\"查看-git-的-push-模式\"><a class=\"markdownIt-Anchor\" href=\"#查看-git-的-push-模式\">#</a> 查看 git 的 push 模式</h4>\n<blockquote>\n<p>git remote -v</p>\n<p>git remote set-url origin 你的仓库地址 \t# 修改不同的模式用不同的仓库地址</p>\n</blockquote>\n<h4 id=\"坑\"><a class=\"markdownIt-Anchor\" href=\"#坑\">#</a> 坑</h4>\n<ol>\n<li>如果使用 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span> 或者 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span> 来测试登录显示如下报错：</li>\n</ol>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRlZS5jb20=\">git@gitee.com</span>: Permission denied (publickey).</p>\n</blockquote>\n<h5 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h5>\n<p>如果检查公钥配置没有问题，使用下面的命令将本机的 git 仓库与相对应的 SSH Key 关联上即可</p>\n<blockquote>\n<p>ssh-agent bash \t# 打开身份代理验证连接</p>\n<p>ssh-add ~/.ssh/id_rsa_gitee \t# 你的 gitee 私钥文件位置</p>\n<p>ssh-add ~/.ssh/id_rsa_github \t# 你的 github 私钥文件位置</p>\n</blockquote>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "url": "http://yunyat.cloud/linux/docker/%E4%BD%BF%E7%94%A8cAdvisor-Prometheus-Grafana%E7%9B%91%E6%8E%A7Docker%E5%AE%B9%E5%99%A8/",
            "title": "使用cAdvisor+Prometheus+Grafana监控Docker容器",
            "date_published": "2023-09-26T15:22:58.000Z",
            "content_html": "<h4 id=\"10-下载镜像\"><a class=\"markdownIt-Anchor\" href=\"#10-下载镜像\">#</a> 1.0 下载镜像</h4>\n<ol>\n<li>先使用下面的命令下载必要的镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull google/cadvisor <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull prom/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHGeun.png\" alt=\"pPHGeun.png\"></p>\n<h4 id=\"20-cadvisor-的部署\"><a class=\"markdownIt-Anchor\" href=\"#20-cadvisor-的部署\">#</a> 2.0 cAdvisor 的部署</h4>\n<ol>\n<li>使用下面的命令将本地的 根目录、/sys、/var/lib/docker、/dev/disk 等目录以只读形式挂载到容器里，然后使用 -p 将本地端口映射到容器，使用 --privileged 给予容器特权模式，使用 --device=/dev/kmsg 将主机的 /dev/kmsg 设备文件添加到容器中</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> /:/rootfs:ro <span class=\"token parameter variable\">-v</span> /var/run:/var/run:ro <span class=\"token parameter variable\">-v</span> /sys:/sys:ro <span class=\"token parameter variable\">-v</span> /var/lib/docker/:/var/lib/docker:ro <span class=\"token parameter variable\">-v</span> /dev/disk/:/dev/disk:ro <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25571</span>:8080 <span class=\"token parameter variable\">--detach</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>cadvisor <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--device</span><span class=\"token operator\">=</span>/dev/kmsg google/cadvisor</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwpYq.png\" alt=\"pPHwpYq.png\"></p>\n<ol start=\"2\">\n<li>在浏览器输入  <code>你的ip:25571/containers/docker</code>  即可访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwilT.png\" alt=\"pPHwilT.png\"></p>\n<h4 id=\"30-prometheus-的部署\"><a class=\"markdownIt-Anchor\" href=\"#30-prometheus-的部署\">#</a> 3.0 Prometheus 的部署</h4>\n<ol>\n<li>先创建配置文件存放的目录，然后使用 vim 创建并编辑  <code>prometheus.yml</code>  配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/prometheus <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> /etc/prometheus/prometheus.yml</pre></td></tr></table></figure><ol start=\"2\">\n<li>然后在 prometheus.yml 文件中写入以下内容</li>\n</ol>\n<p>将 ip 地址跟端口号改为自己的就行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   scrape_interval: 15s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   evaluation_interval: 15s</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> alerting:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  alertmanagers:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  - static_configs:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    - targets:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> rule_files:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> scrape_configs:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   - job_name: <span class=\"token string\">'prometheus'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25572'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   - job_name: <span class=\"token string\">'cadvisor'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     static_configs:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">'192.168.234.128:25571'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>注意：缩进一定要跟我的一样，错一个字符都不行，因为我容器已经运行起来了才截的图，所以你们现在应该是没有这个容器的</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHw9f0.png\" alt=\"pPHw9f0.png\"></p>\n<ol start=\"3\">\n<li>使用 run 将容器运行起来</li>\n</ol>\n<blockquote>\n<p>建议先使用 docker ps -a 查看容器有没有真正运行起来，有时候会出现成功创建但是没有运行起来的情况，这种情况一般都是配置文件有问题导致的</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>prometheus <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25572</span>:9090 <span class=\"token parameter variable\">-v</span> /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus <span class=\"token parameter variable\">--config.file</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus.yml --web.enable-lifecycle</pre></td></tr></table></figure><ol start=\"4\">\n<li>在浏览器输入你的 ip:25572/targets 来访问</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/26/pPHwPpV.png\" alt=\"pPHwPpV.png\"></p>\n<h4 id=\"40-grafana-的部署\"><a class=\"markdownIt-Anchor\" href=\"#40-grafana-的部署\">#</a> 4.0 Grafana 的部署</h4>\n<ol>\n<li>因为之前已经把所有的镜像都已经下载了，所以直接用 run 来运行就行了，之后在浏览器中使用 你的 IP:25573/login 来访问即可</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>grafana <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25573</span>:3000 grafana/grafana</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyPpR.png\" alt=\"pPHyPpR.png\"></p>\n<ol start=\"2\">\n<li>默认账号及密码都为 admin ，登录之后网站会强制你更新密码</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyZ7D.png\" alt=\"pPHyZ7D.png\"></p>\n<ol start=\"3\">\n<li>进入管理界面之后点击 DATA SOURCES 来创建数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyV0O.png\" alt=\"pPHyV0O.png\"></p>\n<ol start=\"4\">\n<li>选择第一个数据源</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHyuhd.png\" alt=\"pPHyuhd.png\"></p>\n<ol start=\"5\">\n<li>在 HTTP 的 URL 栏填入你的 Prometheus 访问地址，然后选 Save &amp; test 保存并退出</li>\n</ol>\n<p>如：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//192.168.234.128:25572/targets</span></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy8nf.png\" alt=\"pPHy8nf.png\"></p>\n<ol start=\"6\">\n<li>点击左边工具栏的 ‘+’ 号，然后点击 Import ，输入 193 ，点击后面的 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHytAg.png\" alt=\"pPHytAg.png\"></p>\n<ol start=\"7\">\n<li>在 Prometheus 列选择数据源，之后点击 Import</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHy0cq.png\" alt=\"pPHy0cq.png\"></p>\n<ol start=\"8\">\n<li>之后就可以看到仪表盘显示的数据了</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/27/pPHycEF.png\" alt=\"pPHycEF.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "Docker",
                "cAdvisor",
                "Prometheus",
                "Grafana"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Linux2023-9-18%E4%BD%9C%E4%B8%9A/",
            "url": "http://yunyat.cloud/linux/Linux2023-9-18%E4%BD%9C%E4%B8%9A/",
            "title": "Linux2023-9-18作业",
            "date_published": "2023-09-18T06:40:30.000Z",
            "content_html": "<blockquote>\n<p>题目要求：</p>\n<p>1、破解 centos7 操作系统密码为 flectrag</p>\n<p>2、查找系统中文件，要求将文件大小大于 5M 小于 10M 的文件查找出来放置 /findfile 目录下</p>\n<p>3、查找文件 /usr/share/xml/iso-codes/iso_639_3.xml 中包含字符串 ng 的所有行。<br>\n将所有这些行的副本按原始顺序放在文件 /root/list 中。/root/list 不得包含空行，<br>\n且所有行必须是 /usr/share/xml/iso-codes/iso_639_3.xml 中原始行的确切副本</p>\n<p>4、新建用户 student，设置密码为 flectrag</p>\n<p>5、修改 student 用户策略，允许 student 组成员 sudo 时不需要密码</p>\n</blockquote>\n<hr>\n<h4 id=\"10-破解-centos7-操作系统的-root-用户密码\"><a class=\"markdownIt-Anchor\" href=\"#10-破解-centos7-操作系统的-root-用户密码\">#</a> 1.0 破解 centos7 操作系统的 root 用户密码</h4>\n<ol>\n<li>先重启虚拟机，在如下图的界面按 e 键进入 edit</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4i8FH.jpg\" alt=\"pP4i8FH.jpg\"></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iJfA.jpg\" alt=\"pP4iJfA.jpg\"></p>\n<ol start=\"2\">\n<li>找到 linux16 字段，把里面的  <code>ro rhgb quiet</code>  改为  <code>rw init=/bin/sh</code> ，之后按 ctrl+x 进入单用户模式</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iNlt.jpg\" alt=\"pP4iNlt.jpg\"></p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4itSI.jpg\" alt=\"pP4itSI.jpg\"></p>\n<ol start=\"3\">\n<li>在该模式下输入  <code>passwd root</code>  来更改 root 密码，之后输入 touch /.autorelabel 创建文件，然后输入 exec /sbin/init 正常启动 init 进程即可</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4iGYd.jpg\" alt=\"pP4iGYd.jpg\"></p>\n<h4 id=\"20-查找文件1\"><a class=\"markdownIt-Anchor\" href=\"#20-查找文件1\">#</a> 2.0 查找文件 1</h4>\n<ol>\n<li>首先要在根目录创建一个  <code>findfile</code>  文件夹，然后使用下面的命令来查找并复制</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /findfile</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +5M <span class=\"token parameter variable\">-size</span> <span class=\"token parameter variable\">-10M</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">cp</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> /findfile <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4kyMq.png\" alt=\"pP4kyMq.png\"></p>\n<ol start=\"2\">\n<li>可以使用  <code>ll</code>  命令验证大小</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4ApQI.png\" alt=\"pP4ApQI.png\"></p>\n<h4 id=\"30-查找文件2\"><a class=\"markdownIt-Anchor\" href=\"#30-查找文件2\">#</a> 3.0 查找文件 2</h4>\n<ol>\n<li>先在用户的家目录下用  <code>touch</code>  命令创建  <code>list</code>  文件，然后使用下面的命令完成要求，最后使用  <code>cat list</code>  来验证</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> list</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token string\">\"ng\"</span> /usr/share/xml/iso-codes/iso_639_3.xml <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'\\r'</span> <span class=\"token operator\">></span> /root/list</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> list</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4AGY4.png\" alt=\"pP4AGY4.png\"></p>\n<h4 id=\"40-创建用户\"><a class=\"markdownIt-Anchor\" href=\"#40-创建用户\">#</a> 4.0 创建用户</h4>\n<ol>\n<li>使用下面的命令创建 student 用户并指定其密码，使用普通用户 sir 登录测试</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>openssl <span class=\"token function\">passwd</span> <span class=\"token parameter variable\">-1</span> flectrag<span class=\"token variable\">)</span></span> student</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4e3uR.png\" alt=\"pP4e3uR.png\"></p>\n<h4 id=\"50-修改用户策略\"><a class=\"markdownIt-Anchor\" href=\"#50-修改用户策略\">#</a> 5.0 修改用户策略</h4>\n<ol>\n<li>先使用下面的命令将 student 用户添加到 /etc/sudoers 文件中</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"%student ALL=(ALL) NOPASSWD: ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers</pre></td></tr></table></figure><p>然后切换到 student 用户，之后使用 sudo passwd root 来试着更改 root 用户的密码，可以看到，可以直接更改，不需要输入密码，然后切到 sir 普通用户，同样试着更改 root 用户的密码，可以看到，无法更改</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/18/pP4e8D1.png\" alt=\"pP4e8D1.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Linux"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Linux2023-9-15%E4%BD%9C%E4%B8%9A/",
            "url": "http://yunyat.cloud/linux/Linux2023-9-15%E4%BD%9C%E4%B8%9A/",
            "title": "Linux2023.9.15作业",
            "date_published": "2023-09-15T06:18:57.000Z",
            "content_html": "<blockquote>\n<p>题目要求：</p>\n<p>1、创建用户和用户组</p>\n<p>请按照以下要求创建用户、用户组：</p>\n<p>新建一个名为 adminuser 的组，组 id 为 40000</p>\n<p>新建一个名为 natasha 的用户，并将 adminuser 作为其附属组</p>\n<p>新建一个名为 harry 的用户，并将 adminuser 作为其附属组</p>\n<p>新建一个名为 sarah 的用户，其不属于 adminuser 组，并将其 shell 设置为不可登陆 shell</p>\n<p>natasha、harry 和 sarah 三个用户的密码均设置为 glegunge</p>\n<p>2、复制文件 /etc/fstab 到 /var/tmp 目录下，并按照以下要求配置 /var/tmp/fstab 文件的权限:</p>\n<p>该文件的所属人为 root</p>\n<p>该文件的所属组为 root</p>\n<p>该文件对任何人均没有执行权限</p>\n<p>用户 natasha 对该文件有读和写的权限</p>\n<p>用户 harry 对该文件既不能读也不能写</p>\n<p>所有其他用户（包括当前已有用户及未来创建的用户）对该文件都有读的权限</p>\n<p>3、打包文件</p>\n<p>请对 /etc/sysconfig 目录进行打包并用 bzip2 压缩，生成的文件保存为 /root/sysconfig.tar.bz2</p>\n<p>4、创建一个大小为 500M 的分区，永久挂载到 /test 目录下</p>\n</blockquote>\n<hr>\n<h5 id=\"创建用户和用户组\"><a class=\"markdownIt-Anchor\" href=\"#创建用户和用户组\">#</a> 创建用户和用户组</h5>\n<ol>\n<li>新建一个名为 adminuser 的组，组 id 为 40000</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groupadd</span> <span class=\"token parameter variable\">-g</span> <span class=\"token number\">40000</span> adminuser</pre></td></tr></table></figure><ol start=\"2\">\n<li>新建一个名为 natasha 的用户，并将 adminuser 作为其附属组</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-G</span> adminuser natasha</pre></td></tr></table></figure><ol start=\"3\">\n<li>新建一个名为 harry 的用户，并将 adminuser 作为其附属组</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-G</span> adminuser harry</pre></td></tr></table></figure><ol start=\"4\">\n<li>新建一个名为 sarah 的用户，其不属于 adminuser 组，并将其 shell 设置为不可登陆 shell</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-s</span> /usr/sbin/nologin sarah</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsWAf.png\" alt=\"pPWsWAf.png\"></p>\n<ol start=\"5\">\n<li>natasha、harry 和 sarah 三个用户的密码均设置为 glegunge</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> <span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsfN8.png\" alt=\"pPWsfN8.png\"></p>\n<p>测试：</p>\n<p>查看组 id 及附属组</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWs2HP.png\" alt=\"pPWs2HP.png\"></p>\n<p>测试 sarah 的 shell 登录</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWsqH0.png\" alt=\"pPWsqH0.png\"></p>\n<h5 id=\"复制文件etcfstab到vartmp目录下并按照以下要求配置vartmpfstab文件的权限\"><a class=\"markdownIt-Anchor\" href=\"#复制文件etcfstab到vartmp目录下并按照以下要求配置vartmpfstab文件的权限\">#</a> 复制文件 /etc/fstab 到 /var/tmp 目录下，并按照以下要求配置 /var/tmp/fstab 文件的权限:</h5>\n<p>先复制</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /etc/fstab /var/tmp</pre></td></tr></table></figure><ol>\n<li>该文件的所属人为 root，该文件的所属组为 root</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW6pi8.png\" alt=\"pPW6pi8.png\"></p>\n<ol start=\"2\">\n<li>该文件对任何人均没有执行权限，用户 natasha 对该文件有读和写的权限，用户 harry 对该文件既不能读也不能写</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW69JS.png\" alt=\"pPW69JS.png\"></p>\n<ol start=\"3\">\n<li>所有其他用户（包括当前已有用户及未来创建的用户）对该文件都有读的权限</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWyxdP.png\" alt=\"pPWyxdP.png\"></p>\n<h5 id=\"打包文件\"><a class=\"markdownIt-Anchor\" href=\"#打包文件\">#</a> 打包文件</h5>\n<ol>\n<li>请对 /etc/sysconfig 目录进行打包并用 bzip2 压缩，生成的文件保存为 /root/sysconfig.tar.bz2</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPWyzIf.png\" alt=\"pPWyzIf.png\"></p>\n<h5 id=\"创建分区\"><a class=\"markdownIt-Anchor\" href=\"#创建分区\">#</a> 创建分区</h5>\n<ol>\n<li>创建一个大小为 500M 的分区</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW26T1.png\" alt=\"pPW26T1.png\"></p>\n<ol start=\"2\">\n<li>使用 mkfs 将 sda4 格式化为 ext4 文件系统</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2wSU.png\" alt=\"pPW2wSU.png\"></p>\n<ol start=\"3\">\n<li>将分区挂载到 /test 目录，如果没有请自行创建</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2aWT.png\" alt=\"pPW2aWT.png\"></p>\n<ol start=\"4\">\n<li>使用开机自启实现永久挂载目录</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/15/pPW2UYV.png\" alt=\"pPW2UYV.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Linux"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E4%B9%8Bnginx%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Docker之nginx的负载均衡",
            "date_published": "2023-09-12T10:49:35.000Z",
            "content_html": "<h4 id=\"使用docker部署nginx的负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#使用docker部署nginx的负载均衡\">#</a> 使用 docker 部署 nginx 的负载均衡</h4>\n<ol>\n<li>下载 nginx 和 tomcat 镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull nginx <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> pull tomcat</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Vg10.png\" alt=\"pP2Vg10.png\"></p>\n<ol start=\"2\">\n<li>新建 tomcat 网页</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www1/ROOT <span class=\"token punctuation\">;</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/www2/ROOT</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VhBF.png\" alt=\"pP2VhBF.png\"></p>\n<ol start=\"3\">\n<li>进入刚创建的 www1/ROOT 目录里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root/www1/ROOT</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 创建 index.jsp 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> index.jsp</pre></td></tr></table></figure><p>输入以下内容：</p>\n<pre><code class=\"language-jsp\">&lt;html&gt;\n    &lt;head&gt;\n           &lt;title&gt;Tomcat1&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\t\n           &lt;%\n                  out.println(&quot;this is Tomcat1&quot;);\n           %&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2VoN9.png\" alt=\"pP2VoN9.png\"></p>\n<p>在 /root/www2/ROOT/ 下同样创建 index.jsp 文件，输入内容同上，将 Tomcat1 改为 Tomcat2 即可</p>\n<ol start=\"5\">\n<li>运行 tomcat1 和 tomcat2 ，并且将 docker 的 /root/www1 和 /root/www2 与容器的 /usr/local/webapps 目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32769</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www1:/usr/local/tomcat/webapps tomcat:latest <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> tomcat2 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">32770</span>:8080 <span class=\"token parameter variable\">-v</span> /root/www2:/usr/local/tomcat/webapps tomcat:latest</pre></td></tr></table></figure><p>注：上面是一条命令</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2Z3uT.png\" alt=\"pP2Z3uT.png\"></p>\n<ol start=\"6\">\n<li>在浏览器分别输入以下语句：</li>\n</ol>\n<blockquote>\n<p>你的 ip:32769</p>\n<p>你的 ip:32770</p>\n<p>示例：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc2OQ==\">tomcat1</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MA==\">tomcat2</span></p>\n</blockquote>\n<ol start=\"7\">\n<li>运行 nginx</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">--name</span> nginx <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25567</span>:80 nginx:latest</pre></td></tr></table></figure><ol start=\"8\">\n<li>在 /root 目录下使用 vim 创建 nginx.conf 文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /root <span class=\"token punctuation\">;</span> <span class=\"token function\">vim</span> nginx.conf</pre></td></tr></table></figure><p>填入以下内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user  nginx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>error_log  /var/log/nginx/error.log warn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pid        /var/run/nginx.pid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>http <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    include       /etc/nginx/mime.types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    default_type  application/octet-stream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    log_format  main  <span class=\"token string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      <span class=\"token string\">'$status $body_bytes_sent \"$http_referer\" '</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                      <span class=\"token string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    access_log  /var/log/nginx/access.log  main<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    sendfile        on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">#tcp_nopush     on;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#gzip  on;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    include /etc/nginx/conf.d/*.conf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    upstream tomcat <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32772<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        server <span class=\"token number\">192.168</span>.100.100:32773<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        server_name <span class=\"token number\">192.168</span>.100.100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                proxy_pass http://tomcat<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 server 后面的 ip 改为你的 ip 加端口号，server_name 同理</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2eKde.png\" alt=\"pP2eKde.png\"></p>\n<ol start=\"9\">\n<li>将 nginx.conf 文件 cp 到你的容器里</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> nginx.conf e11dd26a3930:/etc/nginx/nginx.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 记住，容器 id 改为自己的 nginx 容器的 id</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MeET.png\" alt=\"pP2MeET.png\"></p>\n<ol start=\"10\">\n<li>重启 nginx 容器</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> restart 你的nginx容器id</pre></td></tr></table></figure><ol start=\"11\">\n<li>浏览器访问你服务器的 ip，因为我的 80 端口被占用，所以使用 25567 代替</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pP2MmUU.png\" alt=\"pP2MmUU.png\"></p>\n<p>刷新会在 tomcat1 和 tomcat2 切换</p>\n<p>示例：<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2Nw==\">tomcat1 or tomcat2</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "url": "http://yunyat.cloud/linux/harbor%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/",
            "title": "harbor本地仓库搭建",
            "date_published": "2023-09-12T03:34:02.000Z",
            "content_html": "<h4 id=\"创建-harbor-仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建-harbor-仓库\">#</a> 创建 Harbor 仓库</h4>\n<ol>\n<li>访问官方网站下载官方镜像源</li>\n</ol>\n<blockquote>\n<p>官方网站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2hhcmJvci5pby8=\">Harbor (goharbor.io)</span></p>\n</blockquote>\n<ol start=\"2\">\n<li>使用 scp 将下载的官方镜像上传到服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scp <span class=\"token operator\">-</span>P 2000 <span class=\"token punctuation\">.</span>\\harbor-offline-installer-v2<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">.</span>3<span class=\"token punctuation\">.</span>tgz root@你服务器的ip:<span class=\"token operator\">/</span>root/</pre></td></tr></table></figure><p>注：使用 -P 参数可以指定 scp 的端口号</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPg4W1U.png\" alt=\"pPg4W1U.png\"></p>\n<ol start=\"3\">\n<li>使用下面的命令解压文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> harbor-offline-installer-v2.7.3.tgz</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 vim 更改 harbor.yml.tmep 的内容</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> harbor.yml.tmep</pre></td></tr></table></figure><p>将 hostname 修改为自己的 ip 地址，然后将 https 全部注释掉，同时也可以更改密码</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgHXgP.png\" alt=\"pPgHXgP.png\"></p>\n<ol start=\"5\">\n<li>使用 yum 下载 epel-release 及 docker-compose</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release <span class=\"token punctuation\">;</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span></pre></td></tr></table></figure><p>注：由于不可抗力的原因（我服务器带不动 [倒] ），下面的所有演示都是在我室友的虚拟机上完成的</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgORaD.png\" alt=\"pPgORaD.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgO2VO.png\" alt=\"pPgO2VO.png\"></p>\n<ol start=\"6\">\n<li>安装 harbor</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> ./harbor.yml.tmep ./harbor.yml <span class=\"token punctuation\">;</span> ./install.sh</pre></td></tr></table></figure><p>注：安装之前请先将 harbor.yml.tmep 文件改为 harbor.yml ，要不然会找不到文件</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgXj0K.png\" alt=\"pPgXj0K.png\"></p>\n<ol start=\"7\">\n<li>在浏览器中访问</li>\n</ol>\n<p>在浏览器中输入：</p>\n<blockquote>\n<p>你的 IP/harbor</p>\n<p>由于我用的是室友的电脑中的虚拟机来做的，在我电脑上是直接访问不到虚拟机里的，所以做了个 net 端口转发使我电脑能够访问，你们在自己的浏览器中就不需要输入端口号了，默认 80</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjrB6.png\" alt=\"pPgjrB6.png\"></p>\n<ol start=\"8\">\n<li>输入账号密码</li>\n</ol>\n<blockquote>\n<p>账号默认为 admin，密码默认为 Harbor12345，如果你更改了默认密码那就填你改的密码</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgjXgs.png\" alt=\"pPgjXgs.png\"></p>\n<ol start=\"9\">\n<li>点击新建项目来新建一个仓库</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/12/pPgvLdK.png\" alt=\"pPgvLdK.png\"></p>\n<ol start=\"10\">\n<li>修改 Docker 配置</li>\n</ol>\n<p>因为我使用的使 http 协议，而 docker 默认为 https，所以需要将本地私有仓库添加到信任仓库中</p>\n<p>使用下面的命令修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/docker/daemon.json</pre></td></tr></table></figure><p>注意：你在配置 daemon 文件的时候，除了最后一个键值对后面不用英文逗号，其他都要</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRpcxe.png\" alt=\"pPRpcxe.png\"></p>\n<ol start=\"11\">\n<li>刷新刚刚编辑的 daemon.json 文件并重启 docker</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon.json <span class=\"token punctuation\">;</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><ol start=\"12\">\n<li>给要推送的镜像添加 tag 标签</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> tag centos:centos7 <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 注：ip 后面的为你在仓库命名空间创建的仓库名</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAdS0.png\" alt=\"pPRAdS0.png\"></p>\n<ol start=\"13\">\n<li>在终端登录至搭建的 harbor 私有仓库</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> login http://192.168.100.10 <span class=\"token parameter variable\">-u</span> admin <span class=\"token parameter variable\">-p</span> <span class=\"token number\">123456</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAUWq.png\" alt=\"pPRAUWq.png\"></p>\n<ol start=\"14\">\n<li>使用 push 命令上传镜像</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> push <span class=\"token number\">192.168</span>.100.10/zero/centos:centos7</pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRANYn.png\" alt=\"pPRANYn.png\"></p>\n<ol start=\"15\">\n<li>从浏览器进入 harbor 仓库管理界面</li>\n</ol>\n<p><img data-src=\"https://z1.ax1x.com/2023/09/13/pPRAwlV.png\" alt=\"pPRAwlV.png\"></p>\n<p>可以看到，已经上传到 zero 仓库了</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker",
                "harbor"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0/",
            "title": "Docker构建镜像及使用的笔记",
            "date_published": "2023-09-11T13:52:29.000Z",
            "content_html": "<h4 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>本文并不记录详细过程，只是为了记录一下大概构建及使用的经过（还有踩坑记录，重点！！！）</p>\n<hr>\n<h4 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h4>\n<p>由于一些特殊原因，我需要一个包含 nodejs 的基础镜像来构建一个新的镜像，但是由于各种原因，没能下成，并且我也不知道哪些镜像中含有 nodejs，所以没办法，只能自己构建一个含有 nodejs 的镜像，为了使镜像最小化，我选择了 alpine 发行的 Linux 镜像</p>\n<p>直接 docker pull alpine ，没毛病，下好之后准备 run 的，结果发现根本没有 bash 这个命令，查过资料才发现，它还是用的 sh 。。。。</p>\n<p>好了，重新 run ， <code>docker run -it alpine /bin/sh</code>  .</p>\n<p>这下没毛病了，进了终端，然后竟然发现无从下手！！！（毕竟 alpine 跟 centos 不一样），一开始用的 yum ，结果直接 not found ，，查了资料发现，这玩意儿连 yum 都没有。。只能用 apk ，不愧是最小的 Linux .</p>\n<p>在用 apk 将 nodejs 下好后，直接构建，然后尼玛又少了 npm ，淦！</p>\n<p>同样的方法，用 apk 下好之后，构建！！！不出意外的话又出意外了，构建的时候有一步比较吃 cpu 资源 ，我用服务器构建了两次，</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Win%E8%87%B3Linux%E7%9A%84%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/",
            "url": "http://yunyat.cloud/linux/Win%E8%87%B3Linux%E7%9A%84%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/",
            "title": "Win至Linux的免密登录",
            "date_published": "2023-09-09T15:30:41.000Z",
            "content_html": "<h4 id=\"配置-windows-端\"><a class=\"markdownIt-Anchor\" href=\"#配置-windows-端\">#</a> 配置 Windows 端</h4>\n<ol>\n<li>先在 Windows 下生成公钥文件</li>\n</ol>\n<p>使用 win+R 打开运行对话框，输入 cmd 打开命令提示符（或者随便打开一个文件夹 --&gt; 右键 --&gt; 在终端中打开）</p>\n<p>输入以下命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token operator\">-</span>t rsa</pre></td></tr></table></figure><p>之后无脑回车确定</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcuprT.png\" alt=\"powershell1\"></p>\n<ol start=\"2\">\n<li>找到你默认存放公钥的位置</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcuPZF.png\" alt=\"powershell2\"></p>\n<ol start=\"3\">\n<li>将你生成的公钥文件传到 Linux 服务器上</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scp 你公钥存放的位置<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh/id_rsa<span class=\"token punctuation\">.</span>pub  你要登录的用户名@你服务器的ip:~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh</pre></td></tr></table></figure><p>上传完毕之后 Windows 端的配置就完成了</p>\n<h4 id=\"配置-linux-端\"><a class=\"markdownIt-Anchor\" href=\"#配置-linux-端\">#</a> 配置 Linux 端</h4>\n<ol>\n<li>先登录到 Linux 服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh root@你服务器的ip</pre></td></tr></table></figure><p>在输入密码后就能登录上去</p>\n<ol start=\"2\">\n<li>在当前用户家目录下找到  <code>.ssh</code>  文件夹</li>\n</ol>\n<p>使用以下命令查看：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><p>然后使用以下命令将  <code>id_rsa.pub</code>  文件的内容追加到  <code>authorized_keys</code>  中</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> id_rsa.pub <span class=\"token operator\">>></span> authorized_keys</pre></td></tr></table></figure><ol start=\"3\">\n<li>然后用  <code>chmod</code>  修改文件的权限</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> .ssh/authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> .ssh</pre></td></tr></table></figure><h5 id=\"修改ssh的配置文件\"><a class=\"markdownIt-Anchor\" href=\"#修改ssh的配置文件\">#</a> 修改 SSH 的配置文件</h5>\n<ol>\n<li>使用以下命令进入  <code>ssh</code>  的配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/ssh/sshd_config</pre></td></tr></table></figure><ol start=\"2\">\n<li>找到下面的三句不被注释掉，没有直接添加</li>\n</ol>\n<p>温馨提示：可以使用  <code>斜杠“/”</code>  来快速查找</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RSAAuthentication <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PubkeyAuthentication <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AuthorizedKeysFile .ssh/authorized_keys</pre></td></tr></table></figure><p>然后  <code>:wq</code>  保存并退出</p>\n<ol start=\"3\">\n<li>使用以下命令重启 SSH 服务</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> sshd restart</pre></td></tr></table></figure><h4 id=\"测试免密登录\"><a class=\"markdownIt-Anchor\" href=\"#测试免密登录\">#</a> 测试免密登录</h4>\n<p>在 Windows 的 power shell 上输入以下命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh root@你服务器的ip</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/09/pPcQcQI.png\" alt=\"powershell3\"></p>\n<p>可以看到，直接连上了服务器，到这你的免密登录就成功了</p>\n<h4 id=\"使用指定端口登录\"><a class=\"markdownIt-Anchor\" href=\"#使用指定端口登录\">#</a> 使用指定端口登录</h4>\n<p>一般来说，为了服务器的安全起见，我们都会更改 SSH 的默认登录端口</p>\n<p>可以在服务器 ip 后加 -p 参数来指定要使用的端口</p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "电脑技术",
                "SSH"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/%E5%8F%AF%E9%81%93%E4%BA%91%E6%A1%8C%E9%9D%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/linux/%E5%8F%AF%E9%81%93%E4%BA%91%E6%A1%8C%E9%9D%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/",
            "title": "可道云桌面搭建笔记",
            "date_published": "2023-09-08T09:10:26.000Z",
            "content_html": "<h4 id=\"可道云桌面搭建\"><a class=\"markdownIt-Anchor\" href=\"#可道云桌面搭建\">#</a> 可道云桌面搭建</h4>\n<ol>\n<li>先创建 dockerfile-two 及 kod-two 文件夹（因为我之前搭过一遍，但是忘记截图了，所以重搭一遍，防止文件名重复所以用 -two ）</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> dockerfile-two/kod-two</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6lYIe.png\" alt=\"pP6lYIe.png\"></p>\n<ol start=\"2\">\n<li>使用 scp 将所必要的文件传到服务器上（请务必不要照抄我的命令）</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> .<span class=\"token punctuation\">\\</span>source<span class=\"token punctuation\">\\</span>* root@8.222.153.91:/root/dockerfile-two/kod-two/</pre></td></tr></table></figure><ul>\n<li>实在不会上传那就用下面的这条命令吧（复制粘贴总会吧？）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-f</span> source/* ./ <span class=\"token punctuation\">;</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> sour*</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP61SeK.png\" alt=\"pP61SeK.png\"></p>\n<ol start=\"3\">\n<li>使用 vim 创建 dockerfile 文件并填入以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> dockerfile</pre></td></tr></table></figure><pre><code>FROM centos:centos7    # 改为你的基础镜像\n\nADD Centos-7.repo /etc/yum.repos.d/\n\nADD epel-7.repo /etc/yum.repos.d/\n\nRUN yum -y install nginx php-fpm php-gd php-mbstring unzip\n\nRUN sed -i '/^user/c user=nginx' /etc/php-fpm.d/www.conf\n\nRUN sed -i '/^group/c group=nginx' /etc/php-fpm.d/www.conf\n\nCOPY nginx.conf /etc/nginx/nginx.conf\n\nRUN mkdir /code\n\nWORKDIR /code/\n\nCOPY kodexplorer4.40.zip .\n\nRUN unzip kodexplorer4.40.zip\n\nRUN chown -R nginx.nginx .\n\nADD init.sh /init.sh\n\nEXPOSE 80\n\nENTRYPOINT [&quot;/bin/bash&quot;,&quot;/init.sh&quot;]\n</code></pre>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68PxA.png\" alt=\"pP68PxA.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68krt.png\" alt=\"pP68krt.png\"></p>\n<ol start=\"4\">\n<li>然后用 vim 创建一个名为 <span class=\"exturl\" data-url=\"aHR0cDovL2luaXQuc2g=\">init.sh</span> 的 shell 脚本并写入以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> init.sh</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>php-fpm <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token operator\">>></span> /etc/nginx/nginx.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nginx <span class=\"token parameter variable\">-g</span> <span class=\"token string\">'daemon off;'</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68UG4.png\" alt=\"pP68UG4.png\"></p>\n<ol start=\"5\">\n<li>之后执行以下命令</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> kod:v1 <span class=\"token builtin class-name\">.</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-itd</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25567</span>:80 kod:v1 <span class=\"token string\">'#testtest'</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68sZ6.png\" alt=\"pP68sZ6.png\"></p>\n<ol start=\"6\">\n<li>\n<p>在浏览器访问</p>\n<pre><code>你的IP:25567/kodexplorer4.40/index.php\n</code></pre>\n</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP68ydK.png\" alt=\"pP68ydK.png\"></p>\n<hr>\n<p>示例：<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2OS9rb2RleHBsb3JlcjQuNDAvaW5kZXgucGhwP3VzZXIvbG9naW4=\">可道云桌面</span></p>\n<p>END</p>\n",
            "tags": [
                "原创",
                "可道云"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%8F%81/",
            "title": "Docker的使用-叁",
            "date_published": "2023-09-08T07:00:14.000Z",
            "content_html": "<h4 id=\"dockerfile的使用\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的使用\">#</a> Dockerfile 的使用</h4>\n<p>使用 Dockerfile 部署扫雷 web 程序</p>\n<ol>\n<li>\n<p>先将必要的文件上传至服务器，然后在当前目录创建 init.sh 和 dockerfile 文件</p>\n<p>友情提示：可以使用 scp 上传</p>\n<ul>\n<li>scp 不会用那就用下面的这条命令，我把资源都打包到我服务器上了，可以直接下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> source.tar <span class=\"token punctuation\">;</span> <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-f</span> source/* ./ <span class=\"token punctuation\">;</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> sour*</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6Celd.png\" alt=\"pP6Celd.png\"></p>\n</li>\n<li>\n<p>通过 vim 向 dockerfile  <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbml0LTk5MGcuc2g=\">及 init.sh</span> 写入以下内容：</p>\n</li>\n</ol>\n<blockquote>\n<p>请不要照抄我的配置，每句后面都有注释，稍微动一下脑子就行了，要不然寄</p>\n</blockquote>\n<p>使用 dockerfile 之前，你首先要确保你的当前目录下有以下几个文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><blockquote>\n<p>Centos-7.repo</p>\n<p>epel-7.repo</p>\n<p>saolei.zip</p>\n<p>dockerfile</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2luaXQuc2g=\">init.sh</span></p>\n</blockquote>\n<p>你还要确保你的本地有 centos:centos7 这个镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/10/pPcdAF1.png\" alt=\"pPcdAF1.png\"></p>\n<p>没有怎么办？凉拌！！！</p>\n<p>用下面这条命令下载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull centos:centos7</pre></td></tr></table></figure><p>要是还报错，那你就自己百度去吧，问题奇奇怪怪的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FROM centos:centos7    <span class=\"token comment\"># 这是你要使用的基础镜像，记住改为自己的基础镜像 (如果你使用了上面的 pull 下载了镜像，就不需要改)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ADD Centos-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 这条命令的意思是添加 Centos7.repo 文件到容器的 /etc/yum.repos.d 下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ADD epel-7.repo /etc/yum.repos.d/    <span class=\"token comment\"># 同上</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>RUN yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> tomcat <span class=\"token function\">unzip</span> <span class=\"token function\">curl</span>    <span class=\"token comment\"># 运行 yum 命令安装 tomcat 、 unzip 、 curl ，其中 -y 表示安装过程中的选择全部为 yes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>WORKDIR /var/lib/tomcat/webapps/    <span class=\"token comment\"># 指定工作目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>RUN <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://zero-li.fun/资源/saolei.zip    <span class=\"token comment\"># 从指定站点下载 saolei.zip 资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>RUN <span class=\"token function\">unzip</span> saolei.zip    <span class=\"token comment\"># 解压 saolei.zip 文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>RUN <span class=\"token function\">mv</span> saolei ROOT     <span class=\"token comment\"># 将 saolei 移动至 ROOT 文件或目录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ADD init.sh /init.sh    <span class=\"token comment\"># 添加 init.sh 至 /init.sh</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>EXPOSE <span class=\"token number\">8080</span>    <span class=\"token comment\"># 声明 8080 端口 ，此时并没有开放此端口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>CMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/bash\"</span>,<span class=\"token string\">\"/init.sh\"</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 在容器启动时运行 /init.sh 脚本</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/libexec/tomcat/server start    <span class=\"token comment\"># 在指定目录启动 tomcat server 服务器</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>直接构建镜像</li>\n</ol>\n<blockquote>\n<p>docker build -t saolei:v1 .</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PyUf.png\" alt=\"pP6PyUf.png\"></p>\n<ol start=\"4\">\n<li>运行容器</li>\n</ol>\n<blockquote>\n<p>docker run -itd -P saolei:v1</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PWvj.png\" alt=\"pP6PWvj.png\"></p>\n<ol start=\"5\">\n<li>在浏览器通过 ” 你的 IP“: 开放的随机端口 /saolei.jsp 访问</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/08/pP6PjM9.png\" alt=\"pP6PjM9.png\"></p>\n<hr>\n<p>示例: <span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MTozMjc3MC9zYW9sZWkuanNwP2xldmVsPTgmYW1wO2xlaU51bT04JmFtcDtzaXplPTg=\">扫雷</span></p>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "url": "http://yunyat.cloud/linux/docker/docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E8%B4%B0/",
            "title": "Docker的使用-贰",
            "date_published": "2023-09-05T10:57:03.000Z",
            "content_html": "<h4 id=\"docker容器的应用\"><a class=\"markdownIt-Anchor\" href=\"#docker容器的应用\">#</a> Docker 容器的应用</h4>\n<blockquote>\n<p>前言：使用 Docker 部署 nginx 站点实现外网访问</p>\n</blockquote>\n<p>1. 先创建一个 nginx 站点</p>\n<blockquote>\n<p><code>docker run --name nginx-one -itd -P nginx:latest</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFU6s.png\" alt=\"nginx1\"></p>\n<p>2. 将本地的 <code>./nginx/www</code> 、 <code>./nginx/logs</code> 、 <code>./nginx/conf</code>  分别挂载到容器的 <code>/usr/share/nginx/html</code> 、 <code>/var/log/nginx</code> 、 <code>/etc/nginx/nginx.conf</code>  并且将主机端口 25568 映射到容器的 80 端口</p>\n<blockquote>\n<p><code>docker run -itd -p 25568:80 --name nginx-two -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/logs:/var/log/nginx -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf nginx:latest</code></p>\n<p>注意：挂载之前要用 <code>docker cp f9226f7ac7f7:/etc/nginx/nginx.conf ./nginx/conf/</code>  命令将 <code>nginx.conf</code>  文件 <code>copy</code>  到本地，要不然会报挂载错误，使用本命令时注意将容器 ID 改为自己的</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFwmq.png\" alt=\"nginx2\"></p>\n<p>3. 在本地的 <code>/root/nginx/www</code>  文件夹下创建 <code>index.html</code></p>\n<blockquote>\n<p><code>cd /root/nginx/www; vim index.html</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFaXn.png\" alt=\"nginx3\"></p>\n<p>4. 直接在浏览器访问你服务器的 ip 加之前指定的端口 (由于我服务器防火墙没开放 20000 端口，所以用 25568 代替一下)</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsFNlj.png\" alt=\"nginx4\"></p>\n<blockquote>\n<p>点击连接访问<span class=\"exturl\" data-url=\"aHR0cDovLzguMjIyLjE1My45MToyNTU2OA==\"> nginx 站点</span></p>\n</blockquote>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A3%B9/",
            "title": "Docker的使用-壹",
            "date_published": "2023-09-05T01:14:52.000Z",
            "content_html": "<h4 id=\"docker使用\"><a class=\"markdownIt-Anchor\" href=\"#docker使用\">#</a> Docker 使用</h4>\n<ul>\n<li>在 docker 容器内运行应用程序</li>\n</ul>\n<blockquote>\n<p><code>docker run ubuntu:15.10 /bin/echo &quot;hello world&quot;</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPsklv9.png\" alt=\"docker使用1\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>docker</code> :Docker 的二进制执行文件</li>\n<li><code>run</code> : 与 Docker 组合运行一个容器</li>\n<li><code>ubuntu:15.10</code> : 要运行的镜像，本地没有就会从镜像仓库下载</li>\n<li><code>/bin/echo &quot;hello world&quot;</code> : 在启动的容器里执行 <code>echo</code>  命令</li>\n</ol>\n<ul>\n<li>与 docker 容器进行交互</li>\n</ul>\n<blockquote>\n<p><code>docker run -t -i centos:centos7 /bin/bash</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskQgJ.png\" alt=\"docker使用2\"></p>\n<p>参数解析：</p>\n<ol>\n<li><code>-t</code> : 在新的容器里指定一个终端</li>\n<li><code>-i</code> : 允许与指定的终端进行交互</li>\n</ol>\n<p>注意：可以用 <code>exit</code>  退出伪终端</p>\n<ul>\n<li>通过 ps 查看正在运行的容器</li>\n</ul>\n<blockquote>\n<p><code>docker ps</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/05/pPskM34.png\" alt=\"docker的使用3\"></p>\n<p>参数解析：</p>\n<ol>\n<li>\n<p><code>CONTAINER ID</code> : 容器 ID</p>\n</li>\n<li>\n<p><code>IMAGE</code> : 使用的镜像</p>\n</li>\n<li>\n<p><code>COMMAND</code> : 启动镜像时运行的命令</p>\n</li>\n<li>\n<p><code>CREATED</code> : 容器的创建时间</p>\n</li>\n<li>\n<p><code>STATUS</code> : 容器的状态 （容器的七种状态：</p>\n<p>1. <code>created</code>  已创建</p>\n<p>2. <code>restaring</code>  重启中</p>\n<p>3. <code>running</code>  或 <code>Up</code>  运行中</p>\n<p>4. <code>removing </code> 迁移中</p>\n<p>5. <code>paused </code> 暂停</p>\n<p>6. <code>exited </code> 停止</p>\n<p>7. <code>dead </code> 死亡）</p>\n</li>\n<li>\n<p><code>PORTS</code> : 容器的端口信息和使用的连接类型（ <code>TCP/UDP</code> ）</p>\n</li>\n<li>\n<p><code>NAMES</code> : 自动分配的容器名称</p>\n</li>\n</ol>\n<h5 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h5>\n<ol>\n<li><code>docker images</code>         \t列出本地主机上的镜像</li>\n<li><code>docker search centos[:7] </code>       \t 搜索镜像</li>\n<li><code>docker pull centos[:centos7] </code>       \t 下载镜像</li>\n<li><code>docker tag centos:centos7 mycentos:centos7 </code>        \t为镜像添加标签，其中分号前为镜像类型，分号后为镜像版本</li>\n<li><code>docker history centos:centos7 </code>        \t查看镜像的构建历史信息</li>\n<li><code>docker rmi centos:centos7</code>         \t删除镜像（可以使用 <code>-f</code>  强制删除，在删除使用 tag 标签标记的镜像时可以不用加 <code>-f</code>  参数）</li>\n<li><code>docker image prune [-a] [-f]</code>         清理镜像，加 <code>-a</code>  参数即删除所有无用的镜像，不仅仅是临时镜像  <code>-f</code>  参数即可强制删除镜像而不提示</li>\n<li><code>docker image save centos:centos7 &gt; ./my-centos7.tar.gz </code>        导出镜像到当前目录，格式为一个压缩包（可以自行选择导出的位置）</li>\n<li><code>docker image load [-i] [-q] ./my-centos7.tar.gz</code>         将 centos7 的镜像压缩包导入， <code>-i</code>  参数是指定导入的文件， <code>-q</code>  参数是精简输出信息</li>\n<li><code>docker image inspect [-f] &#123; &#123;&quot;.Os&quot;&#125; &#125; centos:centos7</code>         查看镜像信息，可以使用 <code>-f</code>  参数获取指定信息</li>\n<li><code>docker restart $(docker ps -a -q)</code>  重启所有 docker 容器</li>\n</ol>\n<p>注意：[ ] 里的为可选内容，选择具体版本</p>\n<hr>\n<p>TODO</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "url": "http://yunyat.cloud/linux/docker/Docker%E9%83%A8%E7%BD%B2/",
            "title": "Docker部署",
            "date_published": "2023-09-04T08:53:57.000Z",
            "content_html": "<h3 id=\"docker部署\"><a class=\"markdownIt-Anchor\" href=\"#docker部署\">#</a> Docker 部署</h3>\n<blockquote>\n<p>前言：部署 docker 要先确保 yum 源保持最新</p>\n</blockquote>\n<hr>\n<p>1. 先安装运行 docker 所必要的工具包</p>\n<blockquote>\n<p><code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVkQJ.png\" alt=\"docker1\"></p>\n<p>2. 添加 docker 源</p>\n<blockquote>\n<p><code>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrViz4.png\" alt=\"pPrViz4.png\"></p>\n<p>3. 修改 docker 源为阿里源</p>\n<blockquote>\n<p><code>sed -i 's+download.docker.com+mirrors.aliyun.com/docker-ce+' /etc/yum.repos.d/docker-ce.repo</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVPWF.png\" alt=\"pPrVPWF.png\"></p>\n<p>4. 更新 docker 源并安装 docker</p>\n<blockquote>\n<p>更新源  <code>yum makecache fast</code></p>\n<p>安装  <code>yum  -y install docker-ce</code></p>\n<p>注意：在 Centos8 中本命令不适用，将 fast 去掉即可</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrV9iT.png\" alt=\"pPrV9iT.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVSoV.png\" alt=\"pPrVSoV.png\"></p>\n<p>5. 重启 docker 服务并设置下次启动生效</p>\n<blockquote>\n<p>重新启动  <code>systemctl  restart  docker</code></p>\n<p>设置下次启动生效  <code>systemctl  enable  docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVCJU.png\" alt=\"pPrVCJU.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVAy9.png\" alt=\"pPrVAy9.png\"></p>\n<p>6. 配置镜像加速器</p>\n<blockquote>\n<p>用 vim 创建 <code>daemon.json</code>  文件</p>\n<p><code>vim /etc/docker/daemon.json</code></p>\n<p>写入以下内容:</p>\n<pre><code>&#123;\n&quot;registry-mirrors&quot;: [&quot;https://14lrk6zd.mirror.aliyuncs.com&quot;]\n&#125;\n</code></pre>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVELR.png\" alt=\"pPrVELR.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVZe1.png\" alt=\"pPrVZe1.png\"></p>\n<p>7. 重新加载并重启 docker</p>\n<blockquote>\n<p>重新加载  <code>systemctl  daemon-reload</code></p>\n<p>重启  <code>systemctl restart docker</code></p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVedx.png\" alt=\"pPrVedx.png\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/04/pPrVmo6.png\" alt=\"pPrVmo6.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "Docker"
            ]
        },
        {
            "id": "http://yunyat.cloud/linux/Versioning/maven%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/linux/Versioning/maven%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Maven的使用",
            "date_published": "2023-07-08T15:32:50.000Z",
            "content_html": "<p>maven 的项目结构</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgiQts.png\" alt=\"pCgiQts.png\"></p>\n<ul>\n<li>main\t-- 项目的主要代码和资源\n<ul>\n<li>java\t-- 项目的源代码</li>\n<li>resources\t-- 项目的资源</li>\n</ul>\n</li>\n<li>test\t-- 测试项目代码，目录相当于 JUnit 的测试代码的目录\n<ul>\n<li>java\t-- 所有的单元测试.java 文件，JUnit 测试类等</li>\n<li>resources\t-- 项目测试的资源，spring，hibernate 的配置文件</li>\n</ul>\n</li>\n<li>target\t-- 项目输出位置，maven 编译后的类文件及打包文件会在此目录</li>\n<li>pom.xml\t--maven 的配置文件</li>\n</ul>\n<h4 id=\"pom基础标签\"><a class=\"markdownIt-Anchor\" href=\"#pom基础标签\">#</a> pom 基础标签</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- pom 版本 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>fun.zero.li<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 域名（项目组的唯一标识） --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>MavenWSM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 项目的唯一 id / 模块名 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 项目当前版本 SNAPSHOT (快速开发) --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- groupId  artifactId  version: 也决定了项目在打包 / 发布文件的样式 / 地址：本地仓库下 /fun/zero/MavenWSM/1.0-SNAPSHOT/MavenWSM-1.0-SNAPSHOT.jar --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>WSM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>    <span class=\"token comment\">&lt;!-- 项目别名 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 项目打包产生的工件类型 有 jar、war、ear、pom --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Jar: 一般公司自己制作，方便开发调用的组件 Jar...     war: 项目打包成 war 可以部署至服务器中运行... 的格式；这里不是 web 工程所以不需要 war jar 即可～--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>    <span class=\"token comment\">&lt;!-- 给 pom 定义的一些常量 --></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 指定项目使用的 jdk 版本 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 提供的依赖下载坐标 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 每个 dependency 都是一个 jar 坐标 1. 先从本地找 -> 2. 去私服找 -> 3. 到中央仓库下载 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- Jar 包使用的范围：默认使用范围是 compile, 则测试代码和主代码都可以使用该代码 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">&lt;!-- &lt;scope>system&lt;/scope>               &lt;systemPath> 引入 Jar 资源路径... &lt;/systemPath> --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.testng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>testng<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"scopy标签\"><a class=\"markdownIt-Anchor\" href=\"#scopy标签\">#</a> scopy 标签</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">依赖范围</th>\n<th style=\"text-align:center\">对于编译 class path 有效</th>\n<th style=\"text-align:center\">对于测试 class path 有效</th>\n<th style=\"text-align:center\">对于运行 class path 有效</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">compile</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">spring-core</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">test</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Junit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">provided</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">servlet-api</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">runtime</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">JDBC 驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">system</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">本地的，maven 仓库之外的类库</td>\n</tr>\n</tbody>\n</table>\n<p>添加依赖时需要指定其依赖范围</p>\n<ul>\n<li>compile\n<ul>\n<li>编译范围，默认范围值，依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包。</li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>编译范围，在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。比如：junit。</li>\n</ul>\n</li>\n<li>provided\n<ul>\n<li>编译范围，provided 依赖在编译和测试时需要，在运行时不需要，比如：servlet api 运行时被 tomcat 容器提供。(冲突反而会报错！)</li>\n</ul>\n</li>\n<li>runtime\n<ul>\n<li>编译范围，依赖在运行和测试系统的时候需要，但在编译的时候不需要。 比如：jdbc 驱动包。</li>\n</ul>\n</li>\n<li>system\n<ul>\n<li>编译范围，system 范围依赖与 provided 类似，使用本地之外的路径的 Jar 需要指定 systemPath 磁盘路径 (不推荐！)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用maven一键构建\"><a class=\"markdownIt-Anchor\" href=\"#使用maven一键构建\">#</a> 使用 maven 一键构建</h4>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgBz7V.png\" alt=\"pCgBz7V.png\"></p>\n<blockquote>\n<p>在 cmd 终端中输入 mvn -v 查看 maven 版本及是否安装正确</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg3QqH.png\" alt=\"pCg3QqH.png\">]</p>\n<blockquote>\n<p>使用 mvn compile 将项目编译为 class 文件并输出到 target 目录</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg3zTA.png\" alt=\"pCg3zTA.png\"></p>\n<blockquote>\n<p>使用 mvn clean 清理 target 目录，整个目录一起删掉</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg8Fl8.png\" alt=\"pCg8Fl8.png\"></p>\n<blockquote>\n<p>使用 mvn test 执行 src/test/java 目录下的单元测试类</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg8llT.png\" alt=\"pCg8llT.png\"></p>\n<blockquote>\n<p>使用 mvn package 将 java 工程打包为 jar 包，将 web 工程打包为 war 包</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCg82tI.png\" alt=\"pCg82tI.png\"></p>\n<blockquote>\n<p>使用 mvn install 将项目打包并发布到本地仓库，本步骤包含 package 和 test</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgYGnS.png\" alt=\"pCgYGnS.png\"></p>\n<blockquote>\n<p>使用 mvn deploy 也可以将项目打包，并发布到本地仓库和私服中，包含 package、test 及 install</p>\n</blockquote>\n<blockquote>\n<p>使用 mvn clean test 会先清理再 test 测试</p>\n</blockquote>\n<blockquote>\n<p>使用 IDEA 也可以直接双击</p>\n</blockquote>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgY4c6.png\" alt=\"pCgY4c6.png\"></p>\n<h4 id=\"使用maven进行模块开发\"><a class=\"markdownIt-Anchor\" href=\"#使用maven进行模块开发\">#</a> 使用 maven 进行模块开发</h4>\n<ol>\n<li>\n<p>先将自己写的类用 maven 打包为 jar 并发布到本地仓库 (建议将本地仓库的存储位置改一下，具体度娘)</p>\n<blockquote>\n<pre><code>mvn install:install-file -Dfile='xxx.jar' -DgroupId='xxx.xxx.xxx' -DartifactId=xxx -Dversion='xxx.xxx.xxx' -Dpackaging=jar\n</code></pre>\n</blockquote>\n<p><code>-Dfile</code>  是 <code>jar</code>  包的路径， <code>-DgroupID</code>  是你在 <code>pom.xml</code>  中设置的组名， <code>-DartifactID</code>  是你在 <code>pom.xml</code>  中设置的项目名， <code>-Dversion</code>  是版本</p>\n<p>注意：一定要将带点的加上单引号，否则报错</p>\n</li>\n</ol>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgBQLq.png\" alt=\"pCgBQLq.png\"></p>\n<ol start=\"2\">\n<li>\n<p>然后将依赖引入即可</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/07/08/pCgB3wV.png\" alt=\"pCgB3wV.png\"></p>\n</li>\n</ol>\n<hr>\n<p>本教程参考的一些大佬的文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9oWEU5Vg==\">http://t.csdn.cn/hXE9V</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi84MUltNg==\">http://t.csdn.cn/81Im6</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FNGVOOA==\">http://t.csdn.cn/E4eN8</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXZlbi9tYXZlbi10dXRvcmlhbC5odG1s\">Maven 教程 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "java",
                "maven"
            ]
        }
    ]
}