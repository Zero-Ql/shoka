{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"框架\" category",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/",
            "title": "MyBatisPlus疑难杂症",
            "date_published": "2024-11-08T08:35:36.000Z",
            "content_html": "<ol>\n<li>无效绑定</li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240524154755.png\" alt=\"image-20240524154749356\"></p>\n<p>解决方法：</p>\n<p>在  <code>MyBatisPlusConfig</code>  中添加以下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 @Resource 注解自动注入数据源。该数据源将用于数据库连接。 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 配置并返回 MybatisSqlSessionFactoryBean 实例。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 这个工厂 Bean 用于创建 Mybatis 的 SqlSessionFactory，它是 Mybatis 的核心组件，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 提供了与数据库交互的能力。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return MybatisSqlSessionFactoryBean 配置实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> <span class=\"token function\">mybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建 MybatisSqlSessionFactoryBean 实例</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> mybatisPlus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 设置数据源，数据源是 Mybatis 与数据库交互的基础，这里将之前配置的数据源设置给 SqlSessionFactoryBean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        mybatisPlus<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 返回配置好的 MybatisSqlSessionFactoryBean 实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> mybatisPlus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>SQL 模式  <code>only_full_group_by</code></li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240529100707.png\" alt=\"image-20240529100700837\"></p>\n<p>解决方法：</p>\n<p><code>select</code>  字段后面的需要被聚合函数包裹，或  <code>group by</code>  后面的字段同  <code>select</code>  后面的字段一致</p>\n<p>例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对应的 SQL 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// select count(id) as count, max(name), max(age) from user group by age;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id) as count\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(name)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(age)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 或</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// select id, name, age from user group by id, name, age;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus",
                "问题解决"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-3/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-3/",
            "title": "MyBatisPlus-3",
            "date_published": "2024-11-08T08:32:23.000Z",
            "content_html": "<h3 id=\"条件构造器\"><a class=\"markdownIt-Anchor\" href=\"#条件构造器\">#</a> 条件构造器</h3>\n<p><em>MyBatis-Plus</em> 提供了条件构造器 (<em>Wrapper</em>) 来构建复杂的数据库查询条件，简单便捷，没有额外的负担。</p>\n<p>Wrapper 类是构建查询和更新条件的核心工具。以下是主要的 Wrapper 类及其功能：</p>\n<blockquote>\n<ul>\n<li><strong>AbstractWrapper</strong>：这是一个抽象基类，提供了所有 <em>Wrapper</em> 类共有的方法和属性。它定义了条件构造的基本逻辑，包括字段（<em>column</em>）、值（<em>value</em>）、操作符（<em>condition</em>）等。所有的 <em>QueryWrapper</em>、<em>UpdateWrapper</em>、<em>LambdaQueryWrapper</em> 和 <em>LambdaUpdateWrapper</em> 都继承自 <em>AbstractWrapper</em>。</li>\n<li><strong>QueryWrapper</strong>：专门用于构造查询条件，支持基本的等于、不等于、大于、小于等各种常见操作。它允许你以链式调用的方式添加多个查询条件，并且可以组合使用  <code>and</code>  和  <code>or</code>  逻辑。</li>\n<li><strong>UpdateWrapper</strong>：用于构造更新条件，可以在更新数据时指定条件。与 <em>QueryWrapper</em> 类似，它也支持链式调用和逻辑组合。使用 <em>UpdateWrapper</em> 可以在不创建实体对象的情况下，直接设置更新字段和条件。</li>\n<li><strong>LambdaQueryWrapper</strong>：这是一个基于 <em>Lambda</em> 表达式的查询条件构造器，它通过 <em>Lambda</em> 表达式来引用实体类的属性，从而避免了硬编码字段名。这种方式提高了代码的可读性和可维护性，尤其是在字段名可能发生变化的情况下。</li>\n<li><strong>LambdaUpdateWrapper</strong>：类似于 <em>LambdaQueryWrapper</em>，<em>LambdaUpdateWrapper</em> 是基于 <em>Lambda</em> 表达式的更新条件构造器。它允许你使用 <em>Lambda</em> 表达式来指定更新字段和条件，同样避免了硬编码字段名的问题。</li>\n</ul>\n</blockquote>\n<h4 id=\"querywrapper-updatewrapper\"><a class=\"markdownIt-Anchor\" href=\"#querywrapper-updatewrapper\">#</a> QueryWrapper &amp; UpdateWrapper</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 QueryWrapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建 LambdaQueryWrapper</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lambdaQueryWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 创建 UpdateWrapper</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> updateWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>updateWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 创建 LambdaUpdateWrapper</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">LambdaUpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lambdaUpdateWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>lambdaUpdateWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>alleq</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>全部相等（或个别  <code>isNull</code>  ）</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>allEq(Map&lt;K, V&gt; params)</code></li>\n<li><code>allEq(Map&lt;K, V&gt; params, boolean null2IsNull)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>params</code> ： <code>key</code>  为数据库字段名， <code>value</code>  为字段值</li>\n<li><code>null2IsNull</code> ：默认 <em>true</em> ，为 <em>true</em> 则在  <code>map</code>  的  <code>value</code>  为 <em>null</em> 时调用  <code>isNull</code>  方法，为 <em>false</em> 时则忽略此字段</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  为满惠并且  <code>age</code>  为  <code>19</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">allEq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>eq</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>相等</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>eq(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  为满惠的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>ne</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>不等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ne(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不等于满惠的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">ne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>gt</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>大于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ge(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  大于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>lt</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>小于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>lt(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  小于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>le</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>小于等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>le(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  小于等于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">le</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>ge</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>大于等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ge(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  大于等于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">ge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>between</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>指定的区间， <code>BETWEEN value1 AND value2</code></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>between(R column, Object val1, Object val2)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val1</code> ：值 1（包含此值）</li>\n<li><code>val2</code> ：值 2（包含此值）</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  为  <code>20</code>  到  <code>25</code>  之间的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notBetween</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>指定的区间之外， <code>NOTBETWEEN value1 AND value2</code></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>between(R column, Object val1, Object val2)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val1</code> ：值 1（包含此值）</li>\n<li><code>val2</code> ：值 2（包含此值）</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不为  <code>20</code>  到  <code>25</code>  之间的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>like</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊查询</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>like(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  包含 “满” 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notLike</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊查询</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notLike(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不包含 “满” 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>likeLeft</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊匹配结尾</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>likeLeft(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  以 “惠” 结尾的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeLeft</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>likeRight</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊匹配开头</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>likeRight(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  以 “惠” 开头的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>isNull</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>为 <em>null</em></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>isNull(R column)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  为 <em>null</em> 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>isNotNull</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>不为 <em>null</em></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>isNotNull(R column)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不为 <em>null</em> 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>in</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>集合中的值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>in(R column, Collection&lt;?&gt; value)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>value</code> ：值的集合</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  等于  <code>&#123;19,20,21,22,23,24,25,26&#125;</code>  此集合中的值的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notIn</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>非集合中的值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notIn(R column, Collection&lt;?&gt; value)</code></li>\n<li><code>notIn(R column, Object... values)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>value</code> ：值的集合</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不等于  <code>&#123;19,20,21,22,23,24,25,26&#125;</code>  此集合中的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>inSql</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>动态生成集合值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>inSql(R column, String inValue)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>inValue</code> ：动态生成集合值的 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  满足动态返回的集合值 <code>(age &lt; 25)</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">inSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select u.age from user as u where u.age &lt; 25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notInSql</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>字段不在动态生成的集合值内</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notInSql(R column, String inValue)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>inValue</code> ：动态生成集合值的 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不满足动态返回的集合值 <code>(age &lt; 25)</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notInSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select u.age from user as u where u.age &lt; 25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>groupBy</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>分组</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>groupBy(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性，可以有多个</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询每个 <code>age</code>  的  <code>id</code>  数量以及每个组的最大  <code>age</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id) as count\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(age)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>map <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>orderByAsc</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>升序排序</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>orderByAsc(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  进行升序查询</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>orderByDesc</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>降序排序</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>orderByDesc(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  进行降序查询</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>having</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>条件筛选，通常于  <code>GROUP BY</code>  一起使用</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>having(String sqlHaving, Object... params)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>sqlHaving</code> ：<em>SQL</em> 语句</li>\n<li><code>params</code> ：可变参数列表，包含 <em>SQL</em> 语句中占位符的替换值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  分组后，查询每组  <code>age</code>  字段的总和大于  <code>40</code>  的记录的  <code>id</code>  计数和  <code>age</code>  字段值</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">having</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum(age) > &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>map <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>or</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>拼接条件</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>or()</code></li>\n<li><code>or(Consumer&lt;Param&gt; consumer)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>consumer</code> ：一个  <code>Consumer</code>  函数式接口，它接受一个  <code>Param</code>  类型的参数，并可以调用  <code>Param</code>  对象上的方法来构建 <em>OR</em> 嵌套条件</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>条件一：( <code>name</code>  为  <code>&quot;满惠&quot;</code>  并且  <code>age</code>  为  <code>&quot;19&quot;</code> ) 或者  <code>id</code>  为  <code>&quot;16&quot;</code></p>\n</li>\n<li>\n<p>条件二：  <code>email</code>  为  <code>&quot;test3@baomidou.com&quot;</code>  或者  <code>email</code>  为  <code>&quot;test16@baomidou.com&quot;</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对应 SQL 原句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//select * from user where ((name = 满惠 and age = 19) or id = 16 ) and ( email = test3@baomidou.com or email = test16@baomidou.com );</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-></span> j<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test3@baomidou.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test16@baomidou.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>代码解析</p>\n<ul>\n<li>首先，使用了嵌套的 <em>Lambda</em> 表达式， <code>i -&gt; i.and(j -&gt; j.eq(&quot;name&quot;, &quot;满惠&quot;).eq(&quot;age&quot;, &quot;19&quot;))</code> ，来构建了一个  <code>and</code>  条件，其中包含了两个  <code>eq</code>  条件，即  <code>&quot;name&quot;</code>  等于  <code>&quot;满惠&quot;</code>  且  <code>&quot;age&quot;</code>  等于  <code>&quot;19&quot;</code> 。接着，使用了  <code>or()</code>  方法来连接另一个  <code>eq</code>  条件，即  <code>&quot;id&quot;</code>  等于  <code>&quot;16&quot;</code> 。</li>\n<li>然后，它使用了  <code>and()</code>  方法来连接另一个查询条件， <code>i -&gt; i.eq(&quot;email&quot;, &quot;test3@baomidou.com&quot;).or().eq(&quot;email&quot;, &quot;test16@baomidou.com&quot;)</code> ，这个条件包括两个  <code>or</code>  连接的  <code>eq</code>  条件，即  <code>&quot;email&quot;</code>  等于  <code>&quot;test3@baomidou.com&quot;</code>  或  <code>&quot;email&quot;</code>  等于  <code>&quot;test16@baomidou.com&quot;</code> 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>exists</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>判断 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>exists(String existsSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>existsSql</code> ：一个字符串，包含要作为 <em>EXISTS</em> 条件的 <em>SQL</em> 子查询，如何 <em>SQL</em> 语句返回有记录，则返回  <code>true</code></li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>判断  <code>&quot;满惠&quot;</code>  是否存在  <code>email</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where user.name = '满惠' and user.email is not null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notExists</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>判断 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notExists(String notExistsSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>notExistsSql</code> ：一个字符串，包含要作为 <em>NOTEXISTS</em> 条件的 <em>SQL</em> 子查询</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>判断  <code>&quot;满惠&quot;</code>  是否存在  <code>email</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where user.name = '满惠' and user.email is not null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>last</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>拼接 <em>SQL</em> 到语句后</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>last(String lastSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>lastSql</code> ：需要追加的 <em>SQL</em> 语句，多次调用以最后一次为准，<strong>有 <em>SQL</em> 注入风险</strong></li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不为  <code>null</code>  的前五条记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGVzL3dyYXBwZXIv\">条件构造器 | MyBatis-Plus (baomidou.com)</span></p>\n<h4 id=\"综合应用\"><a class=\"markdownIt-Anchor\" href=\"#综合应用\">#</a> 综合应用</h4>\n<ol>\n<li>查询所有姓名包含 “满” 且年龄大于 18 岁的记录</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查询所有年龄大于 20 且 小于 25 的记录</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>将 id 为 10 的用户的姓名修改为 QSky</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QSky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>将姓名以 “文” 开头的用户删除</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"文\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义-sql-语句\"><a class=\"markdownIt-Anchor\" href=\"#自定义-sql-语句\">#</a> 自定义 <em>SQL</em> 语句</h3>\n<h4 id=\"sql-注入器\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入器\">#</a> <em>SQL</em> 注入器</h4>\n<p>使用 <em>SQL</em> 注入器可以允许你执行自定义的 <em>SQL</em> 语句</p>\n<p>实现的步骤大致分为以下几步：</p>\n<ol>\n<li>创建定义 <em>SQL</em> 语句的类</li>\n<li>创建注入器</li>\n<li>在 <em>Mapper</em> 接口中加入自定义的方法</li>\n<li>使用 <em>Mapper</em> 接口中的方法</li>\n</ol>\n<h4 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h4>\n<ol>\n<li>创建定义 <em>SQL</em> 语句的类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此类需要继承 AbstractMethod 抽象类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectAllMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMethod</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 构造函数，用于创建一个 SelectAllMethod 对象。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param methodName 要映射的方法名。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SelectAllMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 重写 injectMappedStatement 方法，用于生成并返回一个 MappedStatement 对象，它包含了查询全部数据的 SQL 语句。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param mapperClass 生成的 mapper 接口所在的类。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param modelClass 数据模型类，即实体类。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param tableInfo 表信息，包含了表的名称等信息。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回一个 MappedStatement 对象，包含了完整的查询全部数据的 SQL 语句及其相关配置。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MappedStatement</span> <span class=\"token function\">injectMappedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mapperClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TableInfo</span> tableInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 构造查询全部列的 SQL 语句</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from \"</span> <span class=\"token operator\">+</span> tableInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getTableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> <span class=\"token string\">\"selectAll\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 使用语言驱动创建 SQL 源，根据 SQL 语句和模型类</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">var</span> sqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>languageDriver<span class=\"token punctuation\">.</span><span class=\"token function\">createSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 添加并返回一个用于查询全部数据的 MappedStatement</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addSelectMappedStatementForOther</span><span class=\"token punctuation\">(</span>mapperClass<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> sqlSource<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建注入器</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * MySQLInjector 类，继承自 AbstractSqlInjector，用于生成 MySQL 数据库操作的方法列表。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 或继承 DefaultSqlInjector、ISqlInjector。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @@Repository 注解标识这是一个仓库层组件。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySQLInjector</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSqlInjector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 获取方法列表，根据配置、映射器类和表信息生成特定的方法列表。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param configuration MyBatis 的配置信息。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param mapperClass 映射器类，用于确定方法的生成范围和类型。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param tableInfo 表信息，包含关于数据库表的结构和元数据。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return 返回一个包含生成的方法列表的集合。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AbstractMethod</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMethodList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> configuration<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mapperClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TableInfo</span> tableInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用父类方法，获取初始的方法列表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AbstractMethod</span><span class=\"token punctuation\">></span></span> methodList <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodList</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> mapperClass<span class=\"token punctuation\">,</span> tableInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 向方法列表中添加一个自定义的 selectAll 方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        methodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SelectAllMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectAll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> methodList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在 <em>Mapper</em> 接口中加入自定义的方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * UserMapper 接口，用于映射用户数据。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 继承自 BaseMapper&lt;User>，提供基本的 CRUD 操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 选择所有用户。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 因为返回的是用户列表，其返回值是使用 List 存储的</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return 返回用户列表。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Mapper</em> 中定义的方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注入 UserMapper，用于测试中对用户数据的查询操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Injector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>结果图</li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240523212141.png\" alt=\"image-20240523212135630\"></p>\n<h4 id=\"使用-wrapper-自定义-sql\"><a class=\"markdownIt-Anchor\" href=\"#使用-wrapper-自定义-sql\">#</a> 使用 <em>Wrapper</em> 自定义 <em>SQL</em></h4>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-2/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-2/",
            "title": "MyBatisPlus-2",
            "date_published": "2024-11-08T08:31:35.000Z",
            "content_html": "<h3 id=\"持久层接口\"><a class=\"markdownIt-Anchor\" href=\"#持久层接口\">#</a> 持久层接口</h3>\n<h4 id=\"service-interface\"><a class=\"markdownIt-Anchor\" href=\"#service-interface\">#</a> Service Interface</h4>\n<h5 id=\"save\"><a class=\"markdownIt-Anchor\" href=\"#save\">#</a> save</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录（选择字段，策略插入）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 插入（批量）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 插入（分批次批量）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：插入记录，根据实体对象的字段进行策略性插入。</p>\n<p>返回值：Boolean，表示插入成功与否。</p>\n<p>参数说明：</p>\n<table>\n  <tr>\n     <th>类型</th>\n     <th>参数名</th>\n     <th>描述</th>\n </tr>\n <tr>\n     <td>T</td>\n     <td>entity</td>\n     <td>实体对象</td>\n </tr>\n <tr>\n     <td>Collection&lt;T&gt;</td>\n     <td>entityList</td>\n     <td>实体对象集合</td>\n </tr>\n <tr>\n     <td>int</td>\n     <td>batchSize</td>\n     <td>插批次数量</td>\n </tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// boolean save(T entity);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> userAge<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> userAge<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的保存方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// boolean saveBatch(Collection&lt;T> entityList);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatchUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// boolean saveBatch(Collection&lt;T> entityList, int batchSize);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatchUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">,</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"remove\"><a class=\"markdownIt-Anchor\" href=\"#remove\">#</a> remove</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 queryWrapper 设置的条件，删除记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 ID 删除</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除（根据 ID 批量删除）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：通过指定条件删除符合条件的记录</p>\n<p>返回值：Boolean，表示删除操作是否成功</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n</tr>\n<tr>\n  <td>Serializable</td>\n  <td>id</td>\n  <td>主键ID</td>\n</tr>\n<tr>\n  <td>Collection&lt;?extends Serializable&gt;</td>\n  <td>idList</td>\n  <td>主键ID列表</td>\n</tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// boolean remove(Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// boolean removeById(Serializable id);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByID</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// boolean removeByIds(Collection&lt;? extends Serializable> idList);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByIDs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeByIds</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> list</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询所有</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 查询所有列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：查询符合条件的记录</p>\n<p>返回值： 查询结果，可能是实体对象、Map 对象或其他类型</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n </tr>\n<tr>\n  <td>Collection&lt;?extends Serializable&gt;</td>\n  <td>idList</td>\n  <td>主键ID列表</td>\n</tr>\n <tr>\n  <td>Map&lt;String, Object&gt;</td>\n  <td>columnMap</td>\n  <td>表字段Map对象</td>\n</tr>\n <tr>\n  <td>Function&lt;?super Object, V&gt;</td>\n  <td>Mapper</td>\n  <td>转换函数</td>\n</tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// List&lt;T> list();</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// List&lt;Map&lt;String, Object>> listMaps();</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"page\"><a class=\"markdownIt-Anchor\" href=\"#page\">#</a> Page</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无条件分页查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 条件分页查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 无条件分页查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 条件分页查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：分页查询符合条件的记录</p>\n<p>返回值：分页查询结果，包含记录列表和总记录数</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n <tr>\n  <td>IPage&lt;T&gt;</td>\n  <td>page</td>\n  <td>翻页对象</td>\n </tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n </tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// IPage&lt;T> page(IPage&lt;T> page);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userIPage <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> userIPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// IPage&lt;T> page(IPage&lt;T> page, Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userIPage <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> userIPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// IPage&lt;Map&lt;String, Object>> pageMaps(IPage&lt;T> page);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPageMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userPageMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userMapList <span class=\"token operator\">=</span> userPageMaps<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// IPage&lt;Map&lt;String, Object>> pageMaps(IPage&lt;T> page, Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userPageMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userMapList <span class=\"token operator\">=</span> userPageMaps<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mapper-interface\"><a class=\"markdownIt-Anchor\" href=\"#mapper-interface\">#</a> Mapper Interface</h4>\n<h5 id=\"insert\"><a class=\"markdownIt-Anchor\" href=\"#insert\">#</a> insert</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：插入一条记录</p>\n<p>返回值：int，表示插入操作影响的行数，通常为 1，表示成功</p>\n<p>参数说用：</p>\n<table>\n<tr>\n<th>类型</th>\n<th>参数名</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>T</td>\n<td>entity</td>\n<td>实体对象</td>\n</tr>\n</table>\n</blockquote>\n<p>更多使用实例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGVzL2RhdGEtaW50ZXJmYWNlLw==\">持久层接口 | MyBatis-Plus (baomidou.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-1/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-1/",
            "title": "MyBatisPlus-1",
            "date_published": "2024-05-25T17:00:09.000Z",
            "content_html": "<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus</span> 是一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==\">MyBatis</span> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p>具体可查看官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vaW50cm9kdWNlLw==\">简介 | MyBatis-Plus (baomidou.com)</span></p>\n</blockquote>\n<h3 id=\"安装-mybatis-plus\"><a class=\"markdownIt-Anchor\" href=\"#安装-mybatis-plus\">#</a> 安装 MyBatis-Plus</h3>\n<h4 id=\"添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#添加依赖\">#</a> 添加依赖</h4>\n<p>首先需要添加  <code>MyBatis-Plus Starter</code>  依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 此处使用的是 SpringBoot3，如果你使用 SpringBoot2，请参考官方文档导入 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-spring-boot3-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h3>\n<p>在  <code>application.yaml</code>  中添加  <code>MyBatis-Plus</code>  的  <code>logging</code>  配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 MyBatis 内置的控制台输出日志方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure><p>定义一个配置类  <code>MyBatisPlusConfig</code> ，在此类上添加  <code>@MapperScan</code>  注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * MyBatisPlus 配置类，用于配置 MyBatisPlus 的相关设置。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Configuration 标注为 Spring 配置类。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @MapperScan (\"com.example.*\") 扫描指定包下的 Mapper 接口。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 创建并配置 MybatisPlusInterceptor 拦截器。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return 返回配置好的 MybatisPlusInterceptor 实例。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 MybatisPlusInterceptor 实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加分页插件拦截器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回配置好的拦截器实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"编码\"><a class=\"markdownIt-Anchor\" href=\"#编码\">#</a> 编码</h3>\n<p>写一个实体类  <code>user.java</code> ，对应数据表中的字段.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用了 lombok 简化开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写一个  <code>Mapper</code>  接口，用于映射数据库操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试代码\"><a class=\"markdownIt-Anchor\" href=\"#测试代码\">#</a> 测试代码</h3>\n<p>在单元测试中测试功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootApiApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注入 UserMapper，用于测试中对用户数据的查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 测试 UserMapper 的查询功能</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 调用 userMapper 的 selectList 方法，查询所有用户，打印输出查询结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"basemapper-iservice\"><a class=\"markdownIt-Anchor\" href=\"#basemapper-iservice\">#</a> <em>BaseMapper</em> &amp; <em>IService</em></h3>\n<p>​\t<em>MyBatis-Plus</em> 提供了两个核心接口，分别用于对 <em>Dao</em> 层及 <em>Service</em> 层进行操作。</p>\n<h4 id=\"basemapper\"><a class=\"markdownIt-Anchor\" href=\"#basemapper\">#</a>  <code>BaseMapper</code></h4>\n<p><code>BaseMapper</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Mapper</em> 接口，它继承自 <em>mybatis-plus</em> 的 <em>Mapper</em> 接口，并扩展了一些常用的数据库操作方法。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 CRUD 封装  <code>BaseMapper</code>  接口，为  <code>Mybatis-Plus</code>  启动时自动解析实体表关系映射转换为  <code>Mybatis</code>  内部对象注入容器<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 参数  <code>Serializable</code>  为任意类型主键  <code>Mybatis-Plus</code>  不推荐使用复合主键约定每一张表都有自己的唯一  <code>id</code>  主键<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p><code>BaseMapper</code>  的主要作用是定义 <em>DAO</em> 层的数据库操作方法，例如数据的增删改查。</p>\n<p>开发者可以编写接口继承  <code>BaseMapper</code>  接口，并指定对应的实体类，就可以通过注入来使用这些通用方法。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 可以添加一些自定义的操作...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"iservice\"><a class=\"markdownIt-Anchor\" href=\"#iservice\">#</a>  <code>IService</code></h4>\n<p><code>IService</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Service</em> 接口。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 Service CRUD 封装 IService 接口，进一步封装 CRUD 采用  <code>get 查询单行</code>   <code>remove 删除</code>   <code>list 查询集合</code>   <code>page 分页</code>  前缀命名方式区分  <code>Mapper</code>  层避免混淆<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 建议如果存在自定义通用 Service 方法的可能，请创建自己的  <code>IBaseService</code>  继承  <code>Mybatis-Plus</code>  提供的基类<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p>开发者可以编写接口继承  <code>IService</code>  接口，并指定对应的实体类，就可以使用这些通用方法，无需手动编写业务逻辑代码。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 自定义的操作，查找年龄大于 age 的所有记录...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"serviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#serviceimpl\">#</a>  <code>ServiceImpl</code></h5>\n<p><code>ServiceImpl</code>  是  <code>IService</code>  接口的默认实现类， <code>ServiceImpl</code>  是针对业务逻辑层的实现，并调用  <code>BaseMapper</code>  来操作数据库。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>M：你自定义的继承了  <code>BaseMapper</code>  接口的接口</li>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 标示一个 Spring 框架的服务组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserIService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 引入 UserMapper 资源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 查找所有用户信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回用户列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 保存用户信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param userId 用户 ID</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param userName 用户名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param userAge 用户年龄</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param userEmail 用户邮箱</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return 返回保存结果，成功为 true，失败为 false</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> userAge<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户 ID</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>userAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户年龄</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户邮箱</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的保存方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 根据年龄查找用户</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param age 年龄条件</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @return 返回年龄大于指定条件的用户列表</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 使用 QueryWrapper 构建查询条件，查询年龄大于指定值的用户</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "springboot全局异常处理",
            "date_published": "2024-04-23T03:27:04.000Z",
            "content_html": "<h3 id=\"springboot-全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#springboot-全局异常处理\">#</a> <em>SpringBoot</em> 全局异常处理</h3>\n<p>​\t在写程序时总是需要处理某些异常，虽然 Java 提供了自带的异常处理，但是一个完整的项目中可能遇到千奇百怪的异常，这些异常如果都需要我们手动去进行处理，那么代码量会增多不说，程序之间的耦合还会增大不少，这并不符合 “高内聚，低耦合” 的理念。</p>\n<p>​\t<em>Spring</em> 框架提供了 <em>@RestControllerAdvice</em> 注解来处理全局异常，这样可以避免大量的  <code>try catch</code>  ，也方便了异常信息的统一处理和维护。</p>\n<p>注：注解的作用请见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmZ1bi8yMDI0LzA0LzE2L3NwcmluZyVFNSVCQyU4MCVFNSU4RiU5MSVFNiVCMyVBOCVFOCVBNyVBMyVFOSU5QiU4NiVFNSU5MCU4OC8=\">spring 开发注解集合 | 渡世之舟 (zero-li.fun)</span></p>\n<p>示例：</p>\n<p><em>Result</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>GlobalExceptionHandler</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span> <span class=\"token comment\">// 使用 Log4j2 进行日志记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span> <span class=\"token comment\">// 为全局异常处理提供的注解，使得下面的方法能处理所有 Controller 中抛出的异常</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 处理缺少必要请求参数的异常</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param e MissingServletRequestParameterException 异常对象，指示哪个请求参数缺失</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return Result 返回一个错误结果对象，提示缺少必要的请求参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MissingServletRequestParameterException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置 HTTP 响应状态为 400 - Bad Request</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">handleMissingServletRequestParameterException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MissingServletRequestParameterException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缺少必要的请求参数：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缺少必要的请求参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回错误结果</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 处理空指针异常</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param e NullPointerException 异常对象，指示发生空指针的位置</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return Result 返回一个错误结果对象，提示发生了空指针异常</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置 HTTP 响应状态为 500 - Internal Server Error</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">handleNullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空指针异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空指针异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回错误结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot",
                "异常处理"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "title": "springboot多模块开发",
            "date_published": "2024-04-22T03:50:17.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>为了解决项目越来越大的问题，使用了多模块开发来使层次更加清晰。</p>\n<p>架构大致如下：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvWf3j.png\" alt=\"springboot多模块开发1\"></p>\n<h3 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>（1）新建  <code>springboot</code>  项目；<br>\n（2）在新建后的  <code>springboot</code>  项目中新建多个  <code>module(模块)</code> ；<br>\n（3）修改  <code>pom</code>  文件以及删除多余的文件及文件夹；<br>\n（4）将原项目的代码放进去；</p>\n<h3 id=\"多模块开发的坑\"><a class=\"markdownIt-Anchor\" href=\"#多模块开发的坑\">#</a> 多模块开发的坑</h3>\n<p>由于第一次使用多模块开发，并不熟练，所以踩了很多坑，这里记录一下</p>\n<ol>\n<li>访问后台接口报 <code>404</code></li>\n</ol>\n<p>​\t访问所有接口都报 404，这是由于 <code>spring</code>  没有扫描到你写的 <code>bean</code>  所导致的，一般来说， <code>spring</code>  容器只会扫描启动类所在的包以及其下的子包中的所有类，但是开发不会将所有的模块都放在一个包下面，所以如果你 <code>service</code> 、 <code>dao</code>  等模块放在了启动类所在的包之外，那么 <code>spring</code>  就不会去扫描注册这些 <code>bean</code></p>\n<p>​\t解决方法是在启动类的 <code>@SpringBootApplication</code>  注解上面加上 <code>scanBasePackages=&#123;&quot;xxx.xxxxx.*&quot;&#125;</code></p>\n<p>​\t <code>xxx.xxxxx</code>  是你所共有的包，就比如说我所有的模块都是以  <code>com.example.xxx</code>  开始。</p>\n<p>​\t如：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvfnqP.png\" alt=\"springboot多模块开发2\"></p>\n<p>​\t要查看  <code>spring</code>  有没有注册你的  <code>bean</code>  可以到服务的  <code>Actuator</code>  中查看</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFv5css.png\" alt=\"springboot多模块开发3\"></p>\n<ol start=\"2\">\n<li>\n<p><code>springboot</code>  多模块的 <code>@Resource</code> 、 <code>@Autowired</code>  注入为 <code>NULL</code></p>\n<p>方法一：</p>\n</li>\n</ol>\n<p>​\t导致注入失败的原因是因为使用了  <code>new</code>  去使用这个方法，只需要将此类自动注入即可解决问题</p>\n<p>报错的代码:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改之后的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    getStudent studentInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t方法二：</p>\n<p>​\t封装一个  <code>StaticMethodGetBean</code>  的类，此类实现了  <code>ApplicationContextAware</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Spring 应用上下文，用于访问应用上下文中的 bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 设置应用上下文。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param applicationContext Spring 应用上下文实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 通过类类型获取应用上下文中的 bean。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param clazz 要获取的 bean 的类类型</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回 bean 的实例，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param &lt;T> bean 的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 尝试获取 bean 实例，如果不存在则返回 null</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在要使用的地方直接调用  <code>getBean</code>  方法获取即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>getStudent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmd5aWZhbjAvYXJ0aWNsZS9kZXRhaWxzLzEzMDU3MDA1MQ==\">SpringBoot 简单多模块构建_springboot 创建多模块项目</span></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Tools/Spring-ResponseEntity/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Tools/Spring-ResponseEntity/",
            "title": "Spring-ResponseEntity",
            "date_published": "2024-04-22T03:39:54.000Z",
            "content_html": "<h3 id=\"responseentity\"><a class=\"markdownIt-Anchor\" href=\"#responseentity\">#</a> <em>ResponseEntity</em></h3>\n<p><em>ResponseEntity</em> 是 <em>Spring Web MVC</em> 框架中提供的一个类，用于封装 <em>HTTP</em> 响应的详细信息。它允许开发者不仅定义返回给客户端的数据（通常作为请求处理的结果），还能够控制响应的状态码、头部信息以及主体内容的类型。</p>\n<h4 id=\"主要属性和功能\"><a class=\"markdownIt-Anchor\" href=\"#主要属性和功能\">#</a> 主要属性和功能：</h4>\n<ol>\n<li><em>HTTP</em> 状态码（<em>HttpStatus</em>）：通过指定一个 <em>HttpStatus</em> 枚举值（如 <code>OK</code> ,  <code>CREATED</code> ,  <code>BAD_REQUEST</code> ,  <code>NOT_FOUND</code> , 等），可以明确设置响应的状态码，以表明请求的处理结果是成功还是存在某种错误。</li>\n<li><em>HTTP</em> 头部（<em>HttpHeaders</em>）：可以通过 <em>ResponseEntity</em> 构造器或其 <em>headers</em> () 方法来设置或修改响应的头部字段，如  <code>Content-Type</code> 、 <code>Cache-Control</code> 、 <code>Location</code>  等，以便控制客户端如何解析响应内容、缓存策略、重定向位置等。</li>\n<li>响应主体（<em>body</em>）：<em>ResponseEntity</em> 的主体可以承载任何类型的数据，如字符串、 <code>JSON</code>  对象、 <code>XML</code>  文档、自定义 <code>Java</code>  对象等。这些数据将作为 <code>HTTP</code>  响应的正文发送给客户端。主体类型可以与 <code>Content-Type</code>  头部字段对应，确保客户端能正确解析。</li>\n</ol>\n<p>典型用法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/04/22/pkpf0zD.png\" alt=\"headers\"></p>\n<p>从 <em>ResponseEntity</em> 类的源码中可以看到，<em>headers</em> 方法返回的是 <em>this</em> 也就是类本身，所以可以进行链式调用</p>\n<p>而 <em>headers</em> 方法接收一个  <code>Consumer&lt;HttpHeaders&gt;</code>  类型的参数  <code>headersConsumer</code> ，该参数是一个函数接口，使用 <em>lambda</em> 表达式进行了匿名实现</p>\n<p>更多用法请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmdkb2MuY24vc3ByaW5nLXJlc3BvbnNlLWVudGl0eS8=\">使用 Spring ResponseEntity 处理 HTTP 响应 - spring 中文网 (springdoc.cn)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring",
                "ResponseEntity"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringMVC/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringMVC/",
            "title": "SpringMVC",
            "date_published": "2024-04-16T04:09:09.000Z",
            "content_html": "<h3 id=\"spring-mvc原理\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc原理\">#</a> Spring MVC 原理</h3>\n<h4 id=\"spring-mvc工作原理图\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc工作原理图\">#</a>  <code>Spring MVC工作原理图</code></h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/17/pFxTxC6.png\" alt=\"img\"></p>\n<blockquote>\n<p>在没有使用 SpringMVC 之前我们都是使用 Servlet 在做 Web 开发。但是使用 Servlet 开发在接收请求参数，数据共享，页面跳转等操作相对比较复杂。servlet 是 java 进行 web 开发的标准，既然 springMVC 是对 servlet 的封装，那么很显然<strong> SpringMVC 底层就是 Servlet，SpringMVC 就是对 Servlet 进行深层次的封装</strong></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDA3MjM1ODE=\">SpringMVC【入门篇】 - 知乎 (zhihu.com)</span></p>\n</blockquote>\n</blockquote>\n<h3 id=\"mvc模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc模式\">#</a> MVC 模式</h3>\n<p>MVC 模式 ( <code>Model</code> - <code>View</code> - <code>Controller</code> )：解决页面代码和后台代码的分离</p>\n<p>MVC 分别是：模型 <code>model(javabean)</code> 、视图 <code>view(jsp/img)</code> 、控制器 <code>Controller(Action/servlet)</code> 。</p>\n<p>C 存在的目的就是为了保证 M 和 V 的一致性，当 M 发生改变时，C 可以把 M 中的新内容更新到 V 中</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springmvc"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "title": "SpringFramework基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"spring-spring-mvc-spring-boot-spring-cloud\"><a class=\"markdownIt-Anchor\" href=\"#spring-spring-mvc-spring-boot-spring-cloud\">#</a> Spring、Spring MVC、Spring Boot、Spring Cloud</h3>\n<blockquote>\n<ol>\n<li><strong>Spring</strong>：\n<ul>\n<li><code>Spring</code>  是一个轻量级的<strong>控制反转 ( <code>IoC</code> )</strong> 和<strong>面向切面 ( <code>AOP</code> )</strong> 的容器框架。</li>\n<li>它使你能够编写更干净、更可管理、并且更易于测试的代码。</li>\n<li><code>Spring</code>  提供了基础功能，适用于开发  <code>WEB</code>  层、业务层、持久层等多个方面。</li>\n</ul>\n</li>\n<li><strong>Spring MVC</strong>：\n<ul>\n<li><code>Spring MVC</code>  是  <code>Spring</code>  的一个模块，是一个<strong> Web 框架</strong>。</li>\n<li>通过  <code>Dispatcher Servlet</code> 、 <code>ModelAndView</code>  和  <code>View Resolver</code> ，它使得开发  <code>Web</code>  应用变得很容易。</li>\n<li>主要针对网站应用程序或者服务开发，处理 URL 路由、 <code>Session</code> 、模板引擎、静态  <code>Web</code>  资源等。</li>\n</ul>\n</li>\n<li><strong>Spring Boot</strong>：\n<ul>\n<li><code>Spring Boot</code>  是为简化  <code>Spring</code>  配置的<strong>快速开发整合包</strong>。</li>\n<li>它约定优于配置，简化了  <code>Spring</code>  的配置流程。</li>\n<li>更专注于开发<strong>微服务后台接口</strong>，不涉及前端视图。</li>\n</ul>\n</li>\n<li><strong>Spring Cloud</strong>：\n<ul>\n<li><code>Spring Cloud</code>  构建于  <code>Spring Boot</code>  之上，是一个关注全局的<strong>服务治理框架</strong>。</li>\n<li>它用于整合和管理多个  <code>Spring Boot</code>  单体微服务。</li>\n<li><code>Spring Cloud</code>  依赖于  <code>Spring Boot</code>  开发，但  <code>Spring Boot</code>  可以独立开发。</li>\n</ul>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li>Spring 是核心，提供了基础功能。</li>\n<li>Spring MVC 是基于 Spring 的一个 MVC 框架。</li>\n<li>Spring Boot 是为简化 Spring 配置的快速开发整合包。</li>\n<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>\n</ul>\n</blockquote>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p><code>spring</code>  是一个专注于  <code>Java EE</code>  开发的框架，它会使我们编写出来的  <code>Java</code>  程序 更快，更容易，更安全。</p>\n<h3 id=\"spring的分层架构设计模式\"><a class=\"markdownIt-Anchor\" href=\"#spring的分层架构设计模式\">#</a> Spring 的分层架构设计模式</h3>\n<ol>\n<li>\n<p><strong>表示层（Controller 层）</strong>：</p>\n<ul>\n<li>表示层是 Web 应用的入口，负责接收 HTTP 请求并处理。</li>\n<li>在 Spring 中，它提供了与 Spring MVC 和 Struts2 等框架的整合。</li>\n<li>控制器层处理用户请求，协调业务逻辑层和持久层之间的交互。</li>\n</ul>\n</li>\n<li>\n<p><strong>服务层（Service 层）</strong>：</p>\n<ul>\n<li>也称为业务逻辑层，负责处理业务逻辑，与项目需求紧密相关。</li>\n<li>在 Spring 中，可以管理事务、记录日志等。</li>\n<li>服务层通过调用持久层的方法来操作数据，对外提供接口。</li>\n</ul>\n</li>\n<li>\n<p><strong>持久层（DAO 层）</strong>：</p>\n<ul>\n<li>也被称为数据访问层，负责将数据持久化到数据库中。</li>\n<li>基本上，它主要用于数据库的增删改查操作。</li>\n<li>DAO 层是一个接口，具体的实现在 Mapper.xml 或者其他地方。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"声明组件扫描器\"><a class=\"markdownIt-Anchor\" href=\"#声明组件扫描器\">#</a> 声明组件扫描器</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>你要扫描的包名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h3 id=\"spring-相关网站\"><a class=\"markdownIt-Anchor\" href=\"#spring-相关网站\">#</a>  <code>Spring</code>  相关网站</h3>\n<ul>\n<li><code>Spring MVC API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvY3VycmVudC9qYXZhZG9jLWFwaS8=\">Overview (Spring Framework 6.1.5 API)</span></li>\n</ul>\n</li>\n<li><code>Spring Boot API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvYXBpLw==\">Overview (Spring Boot 3.2.4 API)</span></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/SpringBoot%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/SpringBoot/SpringBoot%E5%9F%BA%E7%A1%80/",
            "title": "SpringBoot基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"springboot-简介\"><a class=\"markdownIt-Anchor\" href=\"#springboot-简介\">#</a> <em>Springboot</em> 简介</h3>\n<blockquote>\n<blockquote>\n<p>​\t<em>Spring Boot</em> 是由<em> Pivotal</em> 团队提供的全新框架，其设计目的是用来简化新<em> Spring</em> 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，<em>Spring Boot</em> 致力于在蓬勃发展的快速应用开发领域 (<em>rapid application development</em>) 成为领导者。</p>\n</blockquote>\n<p>引用自百度百科</p>\n</blockquote>\n<p>总结：使用 <em>springboot</em> 可以很快的创建一个<em> springweb</em> 项目，极大的简化<em> spring</em> 的配置，让你专注于后端开发而不用关心繁琐的配置。</p>\n<h3 id=\"springboot-项目结构\"><a class=\"markdownIt-Anchor\" href=\"#springboot-项目结构\">#</a> <em>Springboot</em> 项目结构</h3>\n<ul>\n<li><em>resources</em> 资源文件夹\n<ul>\n<li><em>static</em> 保存所有静态资源（<em>js、css、images</em> 等）</li>\n<li><em>templates</em> 保存所有模板页面</li>\n<li><em>application.properties</em> 文件，用来编写一些服务器配置文件。但是更推荐使用 <em>yaml</em> 后缀来配置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jsr303-校验\"><a class=\"markdownIt-Anchor\" href=\"#jsr303-校验\">#</a> <em>JSR303</em> 校验</h3>\n<p>使用 <em>JSR303</em> 校验可以很轻松的在后端完成数据校验工作，只需要在要校验的实体类上加入相应的注解即可。</p>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>空检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Null</td>\n        <td>验证对象是否为null</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotNull</td>\n        <td>验证对象是否不为null，无法检查长度为0的字符串</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotBlank</td>\n        <td>检查约束字符串是不是Null还有被Trim的长度是否大于0，只对字符串，且会去掉前后空格</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotEmpty</td>\n        <td>检查约束元素是否为Null或者是EMPTY</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>Booelan检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertTrue</td>\n        <td>验证Boolean对象是否为true</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertFalse</td>\n        <td>验证Boolean对象是否为false</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>长度检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Size(min=,max=)</td>\n        <td>验证对象(Array,Collection,Map,String)大小是否在给定范围之内</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Length(min=,max=)</td>\n        <td>验证对象的长度是否在给定范围内</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>日期检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Past</td>\n        <td>验证Date和Calendar对象是否在当前时间之前</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Future</td>\n        <td>验证Date和Calendar对象是否在当前时间之后</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Pattern</td>\n        <td>验证String对象是否符合正则表达式的规则</td>\n    </tr>\n</table>\n<p>除了上面的注解标签，还可以自定义数据校验规则</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "url": "http://yunyat.cloud/MyCodingBook/%E5%90%8E%E7%AB%AF/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "title": "spring开发注解集合",
            "date_published": "2024-04-16T03:35:58.000Z",
            "content_html": "<h3 id=\"spring-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-的常用注解\">#</a> Spring 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Component(value=&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类会被交由  <code>spring</code>  容器管理</p>\n<p>2）value 值为 spring 创建该类对象的 id 值</p>\n<p>3）该注解使用类的无参构造方法创建对象</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Value(&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行基本类型的注入，在括号内的引号中键入属性值</p>\n<p>2）可以给  <code>set</code>  方法进行此注释</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Autowired</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行引用类型的注入，即 <code>bean</code>  对象的注入</p>\n<p>2）可以声明在字段 (属性) 或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byType</code>  注入，通过此注解的对象需要在 <code>IoC</code>  容器中存在，否则需要加上 <code>required=false</code> ，表示忽略当前要注入的 <code>bean</code> ，如果有就直接注入，没有跳过，不会报错</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ComponentScan</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注释使组件扫描器扫描本类此包下的  <code>bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Configuration</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解定义配置类</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Bean</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  中用于方法级别的注解，主要用于在  <code>Java</code>  配置类中定义一个  <code>Bean</code>  。</p>\n<p>2）此注解告诉  <code>spring</code>  这个方法将返回一个对象，该对象应该被注册为  <code>spring</code>  容器中的一个  <code>Bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestControllerAdvice</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  框架的一个注解，用于定义一个全局的异常处理控制器。通常与  <code>@ExceptionHandler</code>  注解一起使用。</p>\n<p>2） <code>@RestControllerAdvice</code>  等同于  <code>@ControllerAdvice</code>  加上  <code>@ResponseBody</code>  注解，表示该类中的方法负责处理异常，并将处理结果作为 <code>HTTP</code>  响应的主体返回。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ResponseStatus</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为  <code>Spring</code>  框架提供的一个注解，用于指示方法应该返回特定的 HTTP 状态码和可选的原因短语。</p>\n<p>2）接收  <code>value</code>  和  <code>code(可选)</code>  ，类型为  <code>HTTPStatus</code>  枚举类的常量值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring-mvc-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc-的常用注解\">#</a> Spring MVC 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Controller</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类，其中的方法如果没有被此注解修饰，一般都是返回一个视图（一个具体的页面），这个视图会和模板引擎结合在一起使用</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestController</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解基本上等于  <code>@RequesBody</code>   +  <code>@Controller</code></p>\n<p>2）使用此注解会直接返回一个 <code>JSON</code>  数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestMapping</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解来映射请求，也就是通过它来指定控制器可以处理那些  <code>URL</code>  请求</p>\n<p>2）此注解除了  <code>name()</code>  方法，其他的方法都可以定义多个属性值，如  <code>value()</code>  和  <code>path()</code>  都可以同时定义多个字符串值来接收多个  <code>URL</code>  请求</p>\n</blockquote>\n<ul>\n<li>\n<p><em>path</em>：可以处理的  <code>url</code>  路径， <code>value</code>  效果和  <code>path</code>  相同</p>\n</li>\n<li>\n<p><em>method</em>：此属性用来定义浏览器的请求方式，可以使用此属性指定方法仅处理哪些请求。有四种基本请求方式：1.  <code>RequestMethod.GET</code> （查）2.  <code>RequestMethod.POST</code> （增） 3.  <code>RequestMethod.PUT</code> （改） 4.  <code>RequestMethod.DELETE</code> （删）。常用的只有 1、2 两种</p>\n</li>\n<li>\n<p><em>params</em>：可以使用此属性限制请求参数，只有带指定参数的请求才会被响应</p>\n</li>\n<li>\n<p><em>headers</em>：此属性表示请求头，可以使用此属性限制客户端发来的请求</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@PathVariable</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）可以通过此注解将  <code>URL</code>  中的占位符绑定到控制器的处理方法的参数中，占位符可以在任何位置，占位符使用 <code>&#123;&#125;</code>  括起来，如： <code>@RequestMapping(&quot;/books/&#123;id&#125;/&#123;authorName&#125;&quot;)</code></p>\n<p>2）通过此注解可以将  <code>URL</code>  中的参数接收，URL 中的参数名需与方法接收参数名保持一致，否则无法接收。可以通过  <code>@PathVariable</code>  的  <code>value</code>  属性指定参数名</p>\n<p>3）此注解是直接放在形参中的，如： <code>public String testBook(@PathVariable Integer id, @PathVariable(value=&quot;authorName&quot;) String name)&#123;&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestParam</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）通过此注解从  <code>request</code> （请求） 中获取数值。</p>\n<p>2）与上一个注解的区别在于请求数据风格不同，如： <code>http://localhost:8080/user?id=1</code></p>\n</blockquote>\n<ul>\n<li><code>value</code> ：当传入的参数和方法参数名不一致时，可以使用  <code>value</code>  指定传入的参数名</li>\n<li><code>required</code> ：是布尔值，用来表示该参数是否为必须传入</li>\n<li><code>defaultValue</code> ：默认值，表示请求中没有同名的参数时的默认值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestBody</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）将  <code>HTTP</code>  请求体数据自动绑定到指定类型的参数</p>\n<p>2）支持多种数据格式（如  <code>JSON</code> 、 <code>XML</code> ）与  <code>Java</code>  类型（如  <code>POJO</code> 、 <code>List</code> 、 <code>Map</code> ）的映射，借助  <code>HttpMessageConverter</code>  实现</p>\n<p>3）可与  <code>@RequestParam</code> 、 <code>@PathVariable</code>  等注解共存，以便在一个方法中处理多种来源的请求数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ExceptionHandler</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是 <code>Spring MVC</code>  中用于标记处理特定异常的方法</p>\n<p>2）可以接受多种异常 <code>@ExceptionHandler(value = &#123;NullPointerException.class, IllegalArgumentException.class, IllegalStateException.class&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他注解\"><a class=\"markdownIt-Anchor\" href=\"#其他注解\">#</a> 其他注解</h3>\n<p><code>@Resource</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为 <code>J2EE</code>  提供</p>\n<p>2）跟 <code>@Autowired</code>  一样，都是为 <code>bean</code>  对象注入，同样可以声明到字段或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byName</code>  注入，没有则通过 <code>byType</code>  方式注入</p>\n<p>更多关于此注解的细节参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTkwNDk0L2FydGljbGUvZGV0YWlscy8xMTQ0NDQzNzE=\">@Autowired 和 @Resource 注解的区别和联系</span></p>\n</blockquote>\n</li>\n</ul>\n<p><code>@WebServlet</code></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"注入方式\"><a class=\"markdownIt-Anchor\" href=\"#注入方式\">#</a> 注入方式</h3>\n<ul>\n<li><code>byName</code>\n<ul>\n<li>简单说就是使用变量名去 <code>IoC</code>  容器中匹配合适 <code>bean</code>  的 <code>id</code>  属性</li>\n</ul>\n</li>\n<li><code>byType</code>\n<ul>\n<li>使用变量类型去匹配 <code>bean</code>  的 <code>class</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>具体可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdhODQyNDI4L2FydGljbGUvZGV0YWlscy81NDY5NDQ4NA==\">Spring 中的 byName 与 byType_springboot byname 和 bytype</span></p>\n<h3 id=\"封装实体类接收表单数据\"><a class=\"markdownIt-Anchor\" href=\"#封装实体类接收表单数据\">#</a> 封装实体类接收表单数据</h3>\n<p>在表单数据过多时，可以封装实体类接收参数</p>\n<p><em>Demo</em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 直接传入实体类的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>getUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "spring注解"
            ]
        }
    ]
}