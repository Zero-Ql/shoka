{
    "version": "https://jsonfeed.org/version/1",
    "title": "上善若水 • All posts by \"我的编程宝典\" category",
    "description": "若能避开猛烈的欢喜，自然也不会有悲痛的来袭.",
    "home_page_url": "http://yunyat.cloud",
    "items": [
        {
            "id": "http://yunyat.cloud/MyCodingBook/DataStructure/BinaryTree/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "http://yunyat.cloud/MyCodingBook/DataStructure/BinaryTree/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "二叉树之打印二叉树",
            "date_published": "2024-11-15T09:16:25.000Z",
            "content_html": "<h2 id=\"打印\"><a class=\"markdownIt-Anchor\" href=\"#打印\">#</a> 打印</h2>\n<div class=\"note info\">\n<p>二叉树的遍历是指按某种顺序访问二叉树中的所有结点，使得每个节点都被访问，且仅被访问一次。</p>\n</div>\n<p>示例二叉树：</p>\n<figure class=\"highlight mathematica\"><figcaption data-lang=\"mathematica\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">/</span> \\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    B   C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">/</span>   <span class=\"token operator\">/</span> \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  D   E   F</pre></td></tr></table></figure><p>源码：</p>\n<details class=\"success\"><summary>test.java</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a 示例</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Node</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Optional</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author: QSky</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @date: 2024/11/18 下午 5:25</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @project: BT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @package: PACKAGE_NAME</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">T_Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 构造二叉树</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Node</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 打印二叉树</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 右 - 根 - 左顺序打印二叉树</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归终止条件：当前节点为空</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 递归打印右子树</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 打印当前节点，按深度缩进</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每一层打印四个空格缩进</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---\"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 递归打印左子树</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">printTree</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<details class=\"success\"><summary>Node.java</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a 示例</span><a href=\"https://yunyat.cloud\">参考链接</a></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>datastructure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Optional</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author: QSky</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @date: 2024/11/15 下午 5:55</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @project: BT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @package: com.example.datastructure</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<p>输出结果：</p>\n<pre><code>        ---F\n    ---C\n        ---E\n---A\n    ---B\n        ---D\n</code></pre>\n<h2 id=\"解析\"><a class=\"markdownIt-Anchor\" href=\"#解析\">#</a> 解析</h2>\n<ol>\n<li>\n<p>进入  <code>printTree(A, 0)</code></p>\n<ol>\n<li>root 节点为  <code>A</code>  ，不为  <code>NULL</code> ，不会返回。</li>\n<li>递归打印右子树：调用  <code>printTree(root.right, 1);</code> ，即  <code>printTree(C, 1);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(C, 1)</code></p>\n<ol>\n<li>root 节点为  <code>C</code>  ，不是  <code>NULL</code>  ，不会返回。</li>\n<li>递归打印右子树，调用  <code>printTree(C.right, 2)</code> ， 即  <code>printTree(F, 2);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(F, 1)</code></p>\n<ol>\n<li>root 节点为  <code>F</code>  ，不是  <code>NULL</code>  ，不会返回。</li>\n<li>递归打印右子树，调用  <code>printTree(F.right, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code></p>\n<ol>\n<li>root 节点为  <code>NULL</code>  ，直接返回，不做任何操作。</li>\n<li>返回到上一层，继续  <code>printTree(F, 2)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(F, 2)</code></p>\n<ol>\n<li>打印  <code>F</code>  的数据， 由于  <code>n = 2</code> ， 会缩进两个层次，输出格式为： <code>\t\t---F</code></li>\n<li>递归打印左子树：调用  <code>printTree(F.left, 3)</code> ，即  <code>printTree(NULL, 3)</code> 。</li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （左子树）</p>\n<ol>\n<li>root 是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(C, 1)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(C, 1)</code></p>\n<ol>\n<li>打印 C 的数据，缩进一个层次，输出格式为： <code>\t---C</code></li>\n<li>递归打印左子树：调用  <code>printTree(C.left, 2)</code> ，即  <code>printTree(E, 2)</code> 。</li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(E, 2)</code></p>\n<ol>\n<li>root 是  <code>E</code> ， 不是  <code>NULL</code> 。</li>\n<li>递归打印右子树，调用  <code>printTree(E.right, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （右子树）</p>\n<ol>\n<li>root 是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(E, 2)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(E, 2)</code></p>\n<ol>\n<li>打印 E 的数据，缩进两个层次，输出格式为： <code>\t\t---E</code></li>\n<li>递归打印左子树，调用  <code>printTree(E.left, 3)</code> ， 即  <code>printTree(NULL, 3);</code></li>\n</ol>\n</li>\n<li>\n<p>进入  <code>printTree(NULL, 3)</code> （左子树）</p>\n<ol>\n<li><code>root</code>  是  <code>NULL</code> ，直接返回。</li>\n<li>返回到上一层，继续  <code>printTree(A, 0)</code>  的剩余代码。</li>\n</ol>\n</li>\n<li>\n<p>继续  <code>printTree(A, 0)</code></p>\n<ol>\n<li>打印 A 的数据，没有缩进，输出格式为： <code>---A</code></li>\n<li>递归打印左子树：调用  <code>printTree(A.left, 1)</code> ，即  <code>printTree(B, 1)</code> 。</li>\n</ol>\n</li>\n</ol>\n<p>…</p>\n<p>省略部分逻辑类比上层，不再赘述。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这个递归遍历过程是按照 “右 - 根 - 左” 的顺序进行的，先遍历右子树，再打印根节点，最后遍历左子树。</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "数据结构",
                "算法"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/HTML/HTML-2/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/HTML/HTML-2/",
            "title": "HTML - 2",
            "date_published": "2024-11-08T08:59:39.000Z",
            "content_html": "<h3 id=\"html-基础\"><a class=\"markdownIt-Anchor\" href=\"#html-基础\">#</a> HTML 基础</h3>\n<h4 id=\"html-标题\"><a class=\"markdownIt-Anchor\" href=\"#html-标题\">#</a> HTML 标题</h4>\n<p>HTML 的标题 (Heading) 是通过  <code>&lt;h1&gt;</code>  -  <code>&lt;h6&gt;</code>  标签来定义的。</p>\n<p><code>&lt;h1&gt;</code>  定义最大标题， <code>&lt;h6&gt;</code>  定义最小标题。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>这是一个一级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>这是一个二级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>这是一个三级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：浏览器会自动在标题的前后添加空行。</p>\n</blockquote>\n<p>请确保将 HTML 标题 标签只用于标题。而不仅仅只是为了生成 粗体 或 大号 的文本而使用标题。</p>\n<h4 id=\"html-段落\"><a class=\"markdownIt-Anchor\" href=\"#html-段落\">#</a> HTML 段落</h4>\n<p>HTML 段落是通过  <code>&lt;p&gt;&lt;/p&gt;</code>  来定义的， <code>&lt;/p&gt; 是块级元素</code> 。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>注：浏览器会自动在段落的前后添加空行。</p>\n</blockquote>\n<h5 id=\"html-折行\"><a class=\"markdownIt-Anchor\" href=\"#html-折行\">#</a> HTML 折行</h5>\n<p>如果你希望在不产生一个新段落的情况下进行换行（新行），请使用  <code>&lt;br/&gt;</code>  标签。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span>演示了<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span>段落分行的效果<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>&lt;br/&gt;</code>  标签是一个单体标签，因此只能在开始标签中关闭。</p>\n<h4 id=\"html-链接\"><a class=\"markdownIt-Anchor\" href=\"#html-链接\">#</a> HTML 链接</h4>\n<p>HTML 的超链接是通过  <code>&lt;a&gt;&lt;/a&gt;</code>  来定义的，在  <code>href</code>  属性中指定链接的地址，超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，你可以点击这些内容来跳转到新的文档或者当前文档的某个部分。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://zero-li.fun<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>超链接的<b>默认</b>样式：</p>\n<ul>\n<li>一个为访问过的链接显示为蓝色字体并带有下划线。</li>\n<li>访问过的链接显示为紫色字体并带有下划线。</li>\n<li>点击链接时，链接显示为红色并带有下划线。</li>\n</ul>\n<h5 id=\"html-链接语法\"><a class=\"markdownIt-Anchor\" href=\"#html-链接语法\">#</a> HTML 链接语法</h5>\n<p>创建链接的主要 HTML 元素是 <code>&lt;a&gt;</code> （锚）元素。</p>\n<p><b>文本链接</b>：最常见的链接类型是文本链接，它使用 <code>&lt;a&gt;</code>  元素将一段文本转化为可点击的链接。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://zero-li.fun<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><b>图像链接</b>：使用图像作为连接，将 <code>&lt;a&gt;</code>  包围住 <code>&lt;img&gt;</code>  元素。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://zero-li.fun<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Blog.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>&lt;a&gt;</code>  元素的属性：</p>\n<ul>\n<li><a href=\"https://www.runoob.com/tags/att-a-href.html\"> <code>href</code> </a>：指定链接目标的 <abbr title=\"统一资源定位器\">URL</abbr> 。</li>\n<li><a href=\"https://www.runoob.com/tags/att-a-target.html\"> <code>target</code> </a>：规定在何处打开目标 URL。仅在存在 href 属性时可用。\n<ul>\n<li>可选值：\n<ul>\n<li><code>_blank</code> ：新窗口打开。</li>\n<li><code>_parent</code> ：在父窗口中打开链接。</li>\n<li><code>_self</code> ：默认，当前页面跳转。</li>\n<li><code>_top</code> ：在当前窗口打开链接，并替换当前的整个窗体。</li>\n<li><code>framename</code> ：在指定的框架中打开被链接文档。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.runoob.com/tags/att-a-download.html\"> <code>download</code> </a>：指定下载链接。\n<ul>\n<li><code>filename</code> ：指定文件名称。</li>\n</ul>\n</li>\n<li><a href=\"https://www.runoob.com/tags/att-a-hreflang.html\"> <code>hreflang</code> </a>：指定被链接文档的语言。\n<ul>\n<li><code>language_code</code> ：双字符的语言代码。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoP3E95Y+M5a2X56ym6K+t6KiA5Luj56CB\">双字符语言代码</span>。</li>\n</ul>\n</li>\n<li><a href=\"https://www.runoob.com/tags/att-a-media.html\"> <code>media</code> </a>：规定目标 URL 的媒介类型。默认值： <code>all</code>  。</li>\n<li><a href=\"https://www.runoob.com/tags/att-a-rel.html\"> <code>rel</code> </a>：规定当前文档与目标 URL 之间的关系。\n<ul>\n<li><code>index</code> ：文档索引。</li>\n<li><code>help</code> ：帮助文档。</li>\n<li><code>bookmark</code> ：相关文档。</li>\n<li><code>next</code> ：集合中的下一个文档。</li>\n<li><code>prev</code> ：集合中的前一个文档。</li>\n</ul>\n</li>\n<li><a> <code>type</code> </a>：规定目标 URL 的 <abbr title=\"Multipurpose Internet Mail Extensions\">MIME</abbr> 类型</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/html/index.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/html/index.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        图片作为链接:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用锚的 id 属性跳转到页面的不同位置 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>标题，\"链接到标题\"链接到此<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>#top</span><span class=\"token punctuation\">></span></span>链接到标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"html-图像\"><a class=\"markdownIt-Anchor\" href=\"#html-图像\">#</a> HTML 图像</h4>\n<p>HTML 图像是通过  <code>&lt;img&gt;</code>  来定义的，图像的名称和尺寸是以属性的形式提供的。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>引用不同路径时的写法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>文件位于与 html 文件相同目录下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/logo.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- 文件位于与 html 文件不同盘符下 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file:///D:/logo.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- 文件位于与 html 文件不同目录下，html 与 images 在同一目录下 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/logo.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>图片文件位于与 html 文件不同目录下，html 位于 connage 目录</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>图片文件位于 images 下，connage 与 images 位于同级目录</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../images/logo.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">&lt;!-- 图片位于网络，直接使用绝对路径 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com/img/flexible/logo/pc/peak-result.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>250<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"html-水平线\"><a class=\"markdownIt-Anchor\" href=\"#html-水平线\">#</a> HTML 水平线</h4>\n<p><code>&lt;hr&gt;</code>  标签可用于在 HTML 页面创建水平线。</p>\n<p>水平线可用于分割内容。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>这是一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"html-注释\"><a class=\"markdownIt-Anchor\" href=\"#html-注释\">#</a> HTML 注释</h4>\n<p>你可以将注释插入到 HTML 代码中，这样可以提高其可读性。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 这是一个注释 --></span></pre></td></tr></table></figure><h4 id=\"html-文本格式化\"><a class=\"markdownIt-Anchor\" href=\"#html-文本格式化\">#</a> HTML 文本格式化</h4>\n<p>HTML 使用标签  <code>&lt;b&gt;</code>  与  <code>&lt;i&gt;</code>  对输出的文本进行格式化。如：粗体 or 斜体</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    这是一段<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>重要<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span>的文字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    这是一段<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span>倾斜<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>的文字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>HTML 文本格式化标签：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">开始标签</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">结束标签</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;b&gt;</code></td>\n<td style=\"text-align:center\">定义粗体文本</td>\n<td style=\"text-align:center\"><code>&lt;/b&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;strong&gt;</code></td>\n<td style=\"text-align:center\">定义你要呈现的文本加粗显示</td>\n<td style=\"text-align:center\"><code>&lt;/strong&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;i&gt;</code></td>\n<td style=\"text-align:center\">定义斜体文本</td>\n<td style=\"text-align:center\"><code>&lt;/i&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;em&gt;</code></td>\n<td style=\"text-align:center\">定义你要呈现的文本斜体显示</td>\n<td style=\"text-align:center\"><code>&lt;/em&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;small&gt;</code></td>\n<td style=\"text-align:center\">定义小型文本和旁注</td>\n<td style=\"text-align:center\"><code>&lt;/small&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;sup&gt;</code></td>\n<td style=\"text-align:center\">定义上标字</td>\n<td style=\"text-align:center\"><code>&lt;/sup&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;sub&gt;</code></td>\n<td style=\"text-align:center\">定义下标字</td>\n<td style=\"text-align:center\"><code>&lt;/sub&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;ins&gt;</code></td>\n<td style=\"text-align:center\">定义插入字</td>\n<td style=\"text-align:center\"><code>&lt;/ins&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;del&gt;</code></td>\n<td style=\"text-align:center\">定义删除字</td>\n<td style=\"text-align:center\"><code>&lt;/del&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    正常字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>加粗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>文本加粗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span>斜体<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>文本斜体<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>small</span><span class=\"token punctuation\">></span></span>小型文本和旁注<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>small</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sup</span><span class=\"token punctuation\">></span></span>上标<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sup</span><span class=\"token punctuation\">></span></span>字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sub</span><span class=\"token punctuation\">></span></span>下标<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sub</span><span class=\"token punctuation\">></span></span>字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ins</span><span class=\"token punctuation\">></span></span>插入字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ins</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span>删除字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>HTML “计算机输出” 标签（短语标签）：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">开始标签</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">结束标签</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;code&gt;</code></td>\n<td style=\"text-align:center\">定义计算机代码文本</td>\n<td style=\"text-align:center\"><code>&lt;/code&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;kbd&gt;</code></td>\n<td style=\"text-align:center\">定义键盘码</td>\n<td style=\"text-align:center\"><code>&lt;/kbd&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;samp&gt;</code></td>\n<td style=\"text-align:center\">定义计算机代码样本</td>\n<td style=\"text-align:center\"><code>&lt;/samp&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;pre&gt;</code></td>\n<td style=\"text-align:center\">定义预格式文本，被标签包裹的文本会保留空格和换行符</td>\n<td style=\"text-align:center\"><code>&lt;/pre&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;var&gt;</code></td>\n<td style=\"text-align:center\">定义变量</td>\n<td style=\"text-align:center\"><code>&lt;/var&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>code</span><span class=\"token punctuation\">></span></span>System.out.println(\"定义计算机代码\");<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>code</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>kbd</span><span class=\"token punctuation\">></span></span>键盘码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>kbd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>samp</span><span class=\"token punctuation\">></span></span>System.out.println(\"计算机代码样本\");<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>samp</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span>预格式  文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>var</span><span class=\"token punctuation\">></span></span>变量<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>var</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>HTML 引文、引用及标签定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">开始标签</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">结束标签</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;abbr&gt;</code></td>\n<td style=\"text-align:center\">定义缩写</td>\n<td style=\"text-align:center\"><code>&lt;/abbr&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;address&gt;</code></td>\n<td style=\"text-align:center\">定义地址等信息</td>\n<td style=\"text-align:center\"><code>&lt;/address&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;bdo&gt;</code></td>\n<td style=\"text-align:center\">定义文字方向</td>\n<td style=\"text-align:center\"><code>&lt;/bdo&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;blockquote&gt;</code></td>\n<td style=\"text-align:center\">定义长的引用</td>\n<td style=\"text-align:center\"><code>&lt;/blockquote&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;q&gt;</code></td>\n<td style=\"text-align:center\">定义短的引用</td>\n<td style=\"text-align:center\"><code>&lt;/q&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;cite&gt;</code></td>\n<td style=\"text-align:center\">定义引用、引证</td>\n<td style=\"text-align:center\"><code>&lt;/cite&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;dfn&gt;</code></td>\n<td style=\"text-align:center\">定义项目</td>\n<td style=\"text-align:center\"><code>&lt;/dfn&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>abbr</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>World Wide Web Consortium<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>W3C<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>abbr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            姓名：清天<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            性别：男<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            联系邮箱:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>qingtian03111@gmail.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Gmail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bdo</span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ltr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>这段文字从左到右显示<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bdo</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bdo</span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rtl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>这段文字从右到左显示<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bdo</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>blockquote</span> <span class=\"token attr-name\">cite</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://zero-li.fun/index.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I walk in the rain, and my umbrella is a boat that rows backwards in the sky<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>blockquote</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>q</span> <span class=\"token attr-name\">cite</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://zero-li.fun/index.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>引用<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>q</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cite</span><span class=\"token punctuation\">></span></span>My<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cite</span><span class=\"token punctuation\">></span></span> Blog<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dfn</span><span class=\"token punctuation\">></span></span>定义项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dfn</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"html-元素\"><a class=\"markdownIt-Anchor\" href=\"#html-元素\">#</a> HTML 元素</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">开始标签</th>\n<th style=\"text-align:center\">元素内容</th>\n<th style=\"text-align:center\">结束标签</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;p&gt;</code></td>\n<td style=\"text-align:center\">这是一个段落</td>\n<td style=\"text-align:center\"><code>&lt;/p&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;a href=&quot;index.html&quot;&gt;</code></td>\n<td style=\"text-align:center\">这是一个链接</td>\n<td style=\"text-align:center\"><code>&lt;a&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;br&gt;</code></td>\n<td style=\"text-align:center\">换行</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    这是一个段落</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>这是一个链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"html-元素语法\"><a class=\"markdownIt-Anchor\" href=\"#html-元素语法\">#</a> HTML 元素语法</h4>\n<ul>\n<li>HTML 元素以开始标签起始，以结束标签终止</li>\n<li>某些元素具有空内容</li>\n<li>大多数 HTML 元素可以拥有属性</li>\n</ul>\n<h4 id=\"html-空元素\"><a class=\"markdownIt-Anchor\" href=\"#html-空元素\">#</a> HTML 空元素</h4>\n<p>没有内容的元素被称为空元素，空元素是在开始标签中关闭的。</p>\n<p><code>&lt;br&gt;</code>  就是没有关闭标签的空元素，在开始标签中添加斜杠 <code>&lt;br/&gt;</code> ，是关闭空元素的正确方法。</p>\n<p>注意：HTML 标签对大小写并不敏感，但是更推荐使用小写标签，因为万维网联盟（W3C）在 HTML 4 中推荐使用小写，在 XHTML 中强制使用小写。HTML 属性也是推荐使用小写。</p>\n<h3 id=\"html-属性\"><a class=\"markdownIt-Anchor\" href=\"#html-属性\">#</a> HTML 属性</h3>\n<p>属性是 HTML 元素提供的附加信息。</p>\n<h4 id=\"html-属性语法\"><a class=\"markdownIt-Anchor\" href=\"#html-属性语法\">#</a> HTML 属性语法</h4>\n<ul>\n<li>HTML 元素可以设置属性</li>\n<li>属性可以在元素中添加附加信息</li>\n<li>属性一般描述于开始标签</li>\n<li>属性总是以名称 / 值对的形式出现，如： <code>name=&quot;value&quot;</code></li>\n</ul>\n<h3 id=\"html-属性-标签参考\"><a class=\"markdownIt-Anchor\" href=\"#html-属性-标签参考\">#</a> HTML 属性 &amp; 标签参考</h3>\n<blockquote>\n<p>标签：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2h0bWwtcmVmZXJlbmNlLmh0bWw=\">HTML 标签列表 | 菜鸟教程</span></p>\n</blockquote>\n<blockquote>\n<p>属性：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3JlZi1zdGFuZGFyZGF0dHJpYnV0ZXMuaHRtbA==\">HTML 全局属性 | 菜鸟教程</span></p>\n</blockquote>\n<p>适用于大部分元素的属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>class</code></td>\n<td style=\"text-align:center\">为 html 元素定义一个或多个类名，类名从样式文件引入 <code>(.css文件)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>id</code></td>\n<td style=\"text-align:center\">定义元素的唯一 id</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>style</code></td>\n<td style=\"text-align:center\">规定元素的行内样式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>title</code></td>\n<td style=\"text-align:center\">描述了元素的额外信息（作为工具条使用）</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "HTML"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/HTML/HTML-1/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/HTML/HTML-1/",
            "title": "HTML - 1",
            "date_published": "2024-11-08T08:57:57.000Z",
            "content_html": "<h3 id=\"html\"><a class=\"markdownIt-Anchor\" href=\"#html\">#</a> HTML</h3>\n<h4 id=\"html-简介\"><a class=\"markdownIt-Anchor\" href=\"#html-简介\">#</a> HTML 简介</h4>\n<blockquote>\n<p>引用自百度百科：</p>\n<p>​\tHTML 的全称为超文本标记语言，是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQTAlODclRTglQUUlQjAlRTglQUYlQUQlRTglQTglODAvNTk2NDQzNj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">标记语言</span>。它包括一系列标签，通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命令可以说明文字，图形、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEElQTglRTclOTQlQkIvMjA2NTY0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">动画</span>、声音、表格、链接等。</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjYlODUlRTYlOTYlODclRTYlOUMlQUMvMjgzMjQyMj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">超文本</span>是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkIlODQlRTclQkIlODclRTQlQkYlQTElRTYlODElQUYvMTI3NTUwMTQ/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">组织信息</span>的方式，它通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjYlODUlRTclQkElQTclRTklOTMlQkUlRTYlOEUlQTUvMzEzMTIxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">超级链接</span>方法将文本中的文字、图表与其他<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYlRTUlQUElOTIlRTQlQkQlOTMvODQwMDYyNz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">信息媒体</span>相关联。这些相互关联的信息媒体可能在同一文本中，也可能是其他文件，或是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUMlQjAlRTclOTAlODYlRTQlQkQlOEQlRTclQkQlQUUvNzk3OTg4P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">地理位置</span>相距遥远的某台计算机上的文件。这种组织信息方式将分布在不同位置的信息资源用随机方式进行连接，为人们查找，检索信息提供方便。</p>\n</blockquote>\n<h4 id=\"html-文档后缀名\"><a class=\"markdownIt-Anchor\" href=\"#html-文档后缀名\">#</a> HTML 文档后缀名</h4>\n<ul>\n<li><code>.html</code></li>\n<li><code>.htm</code></li>\n</ul>\n<p>这两种后缀名没有区别</p>\n<h4 id=\"简单的-html-实例\"><a class=\"markdownIt-Anchor\" href=\"#简单的-html-实例\">#</a> 简单的 HTML 实例</h4>\n<p>完整的 HTML 页面基本架构</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 起始行 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 开始标签 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我的第一个一级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我的第一个段落<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 结束标签 --></span></pre></td></tr></table></figure><p>参数解析：</p>\n<ul>\n<li><code>&lt;!DOCTYPE html&gt;</code>  声明为 HTML 5 文档</li>\n<li><code>&lt;html&gt;</code>  元素是 HTML 页面的根元素</li>\n<li><code>&lt;head&gt;</code>  元素包含了文档的元数据，如  <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>  定义了网页编码格式为 UTF-8 (中文)</li>\n<li><code>&lt;title&gt;</code>  元素描述了网页的标题</li>\n<li><code>&lt;body&gt;</code>  元素包含了可见的页面内容</li>\n<li><code>&lt;h1&gt;</code>  元素定义了一个一级大标题</li>\n<li><code>&lt;p&gt;</code>   元素定义了一个段落</li>\n</ul>\n<blockquote>\n<p>小提示：在网页上使用  <code>F12</code>  可以查看页面的元素组成</p>\n</blockquote>\n<h5 id=\"html-标签\"><a class=\"markdownIt-Anchor\" href=\"#html-标签\">#</a> HTML 标签</h5>\n<p>HTML 标记标签通常被称为 HTML 标签（HTML tag）</p>\n<ul>\n<li>\n<p>HTML 标签是由尖括号包围的关键字 ， 比如  <code>&lt;html&gt;</code></p>\n</li>\n<li>\n<p>HTML 标签通常是成对出现的，如： <code>&lt;p&gt;&lt;/p&gt;</code></p>\n</li>\n<li>\n<p>标签对中的第一个标签是开始标签，第二个标签是结束标签</p>\n</li>\n</ul>\n<blockquote>\n<p><code>&lt;标签&gt;</code>  内容 <code>&lt;/标签&gt;</code></p>\n</blockquote>\n<h5 id=\"html-元素\"><a class=\"markdownIt-Anchor\" href=\"#html-元素\">#</a> HTML 元素</h5>\n<p>“HTML 标签” 和 “HTML 元素” 通常都是描述同样的意思.</p>\n<p>但是严格来讲，一个 HTML 元素包含了开始标签与结束标签：</p>\n<blockquote>\n<p><code>&lt;p&gt;</code>  这是一个段落 <code>&lt;/p&gt;</code></p>\n</blockquote>\n<h4 id=\"web-浏览器\"><a class=\"markdownIt-Anchor\" href=\"#web-浏览器\">#</a> Web 浏览器</h4>\n<p>web 浏览器是用于读取 HTML 文件，并将其作为网页显示。</p>\n<p>浏览器并不是直接显示的 HTML 标签，而是由 HTML 标签来决定如何展现 HTML 页面内容给用户。</p>\n<p>可视化页面结构：</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/21/pia37E8.png\" alt=\"1\"></p>\n<h4 id=\"html-版本\"><a class=\"markdownIt-Anchor\" href=\"#html-版本\">#</a> HTML 版本</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th style=\"text-align:center\">发布时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>HTML</code></td>\n<td style=\"text-align:center\">1991</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HTML+</code></td>\n<td style=\"text-align:center\">1993</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HTML 2.0</code></td>\n<td style=\"text-align:center\">1995</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HTML 3.2</code></td>\n<td style=\"text-align:center\">1997</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HTML 4.01</code></td>\n<td style=\"text-align:center\">1999</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>XHTML 1.0</code></td>\n<td style=\"text-align:center\">2000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HTML 5</code></td>\n<td style=\"text-align:center\">2012</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>XHTML 5</code></td>\n<td style=\"text-align:center\">2013</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"doctype声明\"><a class=\"markdownIt-Anchor\" href=\"#doctype声明\">#</a>  <code>&lt;!DOCTYPE&gt;</code>  声明</h4>\n<p><code>&lt;!DOCTYPE&gt;</code>  声明有助于在浏览器中正确显示网页。</p>\n<p>注意：doctype 声明是不区分大小写的：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"通用声明\"><a class=\"markdownIt-Anchor\" href=\"#通用声明\">#</a> 通用声明</h5>\n<ul>\n<li>\n<p>HTML 5</p>\n<ul>\n<li>\n<blockquote>\n<p><code>&lt;!DOCTYPE html&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>HTML 4.01</p>\n<ul>\n<li>\n<blockquote>\n<p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>XHTML 1.0</p>\n<ul>\n<li>\n<blockquote>\n<p><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"中文编码\"><a class=\"markdownIt-Anchor\" href=\"#中文编码\">#</a> 中文编码</h4>\n<p>在大部分浏览器中，直接输出中文会出现乱码现象，这时候我们就需要在头部（ <code>&lt;head&gt;</code>  标签中）将字符编码声明为  <code>UTF-8</code>  或  <code>GBK</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>ZERO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h</span><span class=\"token punctuation\">></span></span>我的第一个标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意：对于设置 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>  后仍然出现乱码问题，你应该检查你的网页文件在保存时所使用的文档编码是否与之相同。</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "HTML"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript-3/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript-3/",
            "title": "JavaScript - 3",
            "date_published": "2024-11-08T08:56:18.000Z",
            "content_html": "<h3 id=\"javascript-事件\"><a class=\"markdownIt-Anchor\" href=\"#javascript-事件\">#</a> JavaScript 事件</h3>\n<hr>\n<p>HTML 事件是发生在 HTML 元素上的事情</p>\n<p>当在 HTML 页面中使用 JavaScript 时，JavaScript 可以触发这些事件。</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "JavaScript"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript-2/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript-2/",
            "title": "JavaScript - 2",
            "date_published": "2024-11-08T08:54:37.000Z",
            "content_html": "<h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h3>\n<p>在 JavaScript 中，除了核心类型 —— <code>core object</code> ，其他的一切都是对象</p>\n<p>JavaScript 的对象可以简单的理解为  <code>&quot;名称&quot;</code> —— <code>&quot;值&quot;</code> (你不应将其理解为键值对，因为 JavaScript 中有比其更接近键值对的  <code>Map</code> （映射表，于 ES 2015 加入）)，其中， <code>&quot;名称&quot;</code>  是一个字符串， <code>&quot;值&quot;</code>  可以是任意 JavaScript 的数据类型 (包括对象)。正因为这种特性，使得用户可以创建出极为复杂的数据结构。</p>\n<h4 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\">#</a> 创建对象</h4>\n<p>有两种方法创建一个空对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这两种方法都能创建一个空对象，但是更推荐使用第二种方法 (对象字面量 ( <code>object literal</code> ) 法)，这种方法也是 JSON 格式的核心语法。第一种方法更接近 Java 的编码方式。</p>\n<p>示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">information</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> objkey <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>objkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>name</p>\n<p>information</p>\n<p>男</p>\n</blockquote>\n<p>使用链式 ( <code>chain</code> ) 调用访问某一个具体的属性，JavaScript 的链式调用有两种方式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">information</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 第一种</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>information<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 第二种</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"information\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>Tom</p>\n<p>男</p>\n<p>Tom</p>\n<p>男</p>\n</blockquote>\n<h4 id=\"在对象中定义方法函数\"><a class=\"markdownIt-Anchor\" href=\"#在对象中定义方法函数\">#</a> 在对象中定义方法 (函数)</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">information</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> sex <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span> <span class=\"token string\">\"武汉\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> sex <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>Tom</p>\n<p>18</p>\n<p>男</p>\n<p>武汉</p>\n</blockquote>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p>JavaScript 的函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块</p>\n<p>函数的前面使用了关键词  <code>function</code>  标识，JavaScript 的函数同 Java 的方法相似，可以接收形参和有返回值，但是需要注意的是，形参是不需要显示的声明其类型，这点和 Java 是不同的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">functionname</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//coding</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"函数表达式\"><a class=\"markdownIt-Anchor\" href=\"#函数表达式\">#</a> 函数表达式</h4>\n<ul>\n<li>函数可以由函数表达式创建，这样创建的函数可以是匿名的；它不必有一个名称。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr></table></figure><ul>\n<li>也可以为创建的函数提供名称，可以使用此名称在函数内部代指其本身</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span>  str <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> str <span class=\"token operator\">+</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5050</span></pre></td></tr></table></figure><h4 id=\"在函数中定义-javascript-变量\"><a class=\"markdownIt-Anchor\" href=\"#在函数中定义-javascript-变量\">#</a> 在函数中定义 JavaScript 变量</h4>\n<ul>\n<li>\n<p>局部变量</p>\n<ul>\n<li>使用  <code>var</code>  在函数内定义的变量是局部变量，作用域只在函数内部</li>\n</ul>\n</li>\n<li>\n<p>全局变量</p>\n<ul>\n<li>在函数外定义的变量是全局变量，网页上的所有脚本和函数都能访问它</li>\n</ul>\n</li>\n<li>\n<p>生存期</p>\n<ul>\n<li>JavaScript 局部变量的生存期在函数运行完之后就会被删除，全局变量在页面关闭之后被删除</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"javascript-的构造函数\"><a class=\"markdownIt-Anchor\" href=\"#javascript-的构造函数\">#</a> JavaScript 的构造函数</h4>\n<p>JavaScript 和 Java 都有构造函数，但是它们在设计和使用上有一些区别：</p>\n<ul>\n<li>调用方式\n<ul>\n<li>在 Java 中，构造函数是在使用  <code>new</code>  关键字创建新对象时由  <code>JVM</code>  自动调用的。而在 JavaScript 中，构造函数也是在创建新对象时被调用的。</li>\n</ul>\n</li>\n<li>返回值\n<ul>\n<li>Java 的构造函数没有返回值。而 JavaScript 的构造函数默认返回  <code>this</code>  ，也就是新创建的对象。</li>\n</ul>\n</li>\n<li>类型系统\n<ul>\n<li>Java 是静态类型语言，而 JavaScript 是动态类型语言。这意味着在 Java 中，所有变量的类型在编译的时候都是已知的，而在 JavaScript 中，变量的类型可以在运行时改变。</li>\n</ul>\n</li>\n<li>面向对象模型\n<ul>\n<li>Java 使用基于类的面向对象类型，而 JavaScript 使用基于原型的面向对象模型。这意味着在 Java 中，对象是通过实例化类来创建的，而在 JavaScript 中，对象可以直接从其他对象继承。</li>\n</ul>\n</li>\n<li>函数和方法\n<ul>\n<li>在 Java 中，构造函数和方法是类的一部分，而在 JavaScript 中，函数可以独立于任何对象存在。</li>\n</ul>\n</li>\n</ul>\n<p>JavaScript 的构造函数和普通函数的区别：</p>\n<ul>\n<li>调用方式\n<ul>\n<li>构造函数通过使用  <code>new</code>  关键字来创建对象实例，而普通函数可以直接通过函数名来调用。</li>\n</ul>\n</li>\n<li>返回值\n<ul>\n<li>构造函数不需要显式的返回值，它会隐式的返回新创建的对象实例。而普通函数可以通过  <code>return</code>  语句来返回指定的值。</li>\n</ul>\n</li>\n<li>函数名\n<ul>\n<li>构造函数的首字母通常大写，而普通函数的首字母通常小写。</li>\n</ul>\n</li>\n<li><code>this</code>  关键字\n<ul>\n<li>在构造函数内部， <code>this</code>  指向的是新创建的对象实例。在普通函数内部， <code>this</code>  通常指向全局对象（在浏览器中是  <code>window</code>  对象），除非在严格模式下或者使用了  <code>call</code> 、 <code>apply</code> 、 <code>bind</code>  等方法改变了  <code>this</code>  的指向。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"向未声明的变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#向未声明的变量赋值\">#</a> 向未声明的变量赋值</h4>\n<p>如果把值赋给未分配的变量，该变量将被自动作为 window 的一个属性</p>\n<p>非严格模式下给未声明变量赋值创建的全局变量，是全局对象的可配置属性，可以删除</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>var2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 给未声明的变量赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">delete</span> var1<span class=\"token punctuation\">;</span><span class=\"token comment\">//false 无法删除</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">delete</span> var2<span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报变量未定义</span></pre></td></tr></table></figure><h4 id=\"javascript-作用域\"><a class=\"markdownIt-Anchor\" href=\"#javascript-作用域\">#</a> JavaScript 作用域</h4>\n<p>在 JavaScript 中，对象和函数同样也是变量，作用域为可访问变量、对象、函数的集合</p>\n<p>如果变量在函数内没有声明，那么该变量即为全局变量</p>\n<h5 id=\"html-中的全局变量\"><a class=\"markdownIt-Anchor\" href=\"#html-中的全局变量\">#</a> HTML 中的全局变量</h5>\n<p>在 HTML 中，全局变量是 window 对象，所以 window 对象可以调用函数内的局部变量</p>\n<p>注意：所有数据变量都属于 window 对象</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    在 HTML 中，所有全局变量都会成为 window 变量。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"我可以显示 \"</span> <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>carName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        carName <span class=\"token operator\">=</span> <span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "JavaScript"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/",
            "title": "MyBatisPlus疑难杂症",
            "date_published": "2024-11-08T08:35:36.000Z",
            "content_html": "<ol>\n<li>无效绑定</li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240524154755.png\" alt=\"image-20240524154749356\"></p>\n<p>解决方法：</p>\n<p>在  <code>MyBatisPlusConfig</code>  中添加以下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 @Resource 注解自动注入数据源。该数据源将用于数据库连接。 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 配置并返回 MybatisSqlSessionFactoryBean 实例。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 这个工厂 Bean 用于创建 Mybatis 的 SqlSessionFactory，它是 Mybatis 的核心组件，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 提供了与数据库交互的能力。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return MybatisSqlSessionFactoryBean 配置实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> <span class=\"token function\">mybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建 MybatisSqlSessionFactoryBean 实例</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span> mybatisPlus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisSqlSessionFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 设置数据源，数据源是 Mybatis 与数据库交互的基础，这里将之前配置的数据源设置给 SqlSessionFactoryBean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        mybatisPlus<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 返回配置好的 MybatisSqlSessionFactoryBean 实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> mybatisPlus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>SQL 模式  <code>only_full_group_by</code></li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240529100707.png\" alt=\"image-20240529100700837\"></p>\n<p>解决方法：</p>\n<p><code>select</code>  字段后面的需要被聚合函数包裹，或  <code>group by</code>  后面的字段同  <code>select</code>  后面的字段一致</p>\n<p>例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对应的 SQL 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// select count(id) as count, max(name), max(age) from user group by age;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id) as count\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(name)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(age)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 或</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// select id, name, age from user group by id, name, age;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus",
                "问题解决"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-3/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-3/",
            "title": "MyBatisPlus-3",
            "date_published": "2024-11-08T08:32:23.000Z",
            "content_html": "<h3 id=\"条件构造器\"><a class=\"markdownIt-Anchor\" href=\"#条件构造器\">#</a> 条件构造器</h3>\n<p><em>MyBatis-Plus</em> 提供了条件构造器 (<em>Wrapper</em>) 来构建复杂的数据库查询条件，简单便捷，没有额外的负担。</p>\n<p>Wrapper 类是构建查询和更新条件的核心工具。以下是主要的 Wrapper 类及其功能：</p>\n<blockquote>\n<ul>\n<li><strong>AbstractWrapper</strong>：这是一个抽象基类，提供了所有 <em>Wrapper</em> 类共有的方法和属性。它定义了条件构造的基本逻辑，包括字段（<em>column</em>）、值（<em>value</em>）、操作符（<em>condition</em>）等。所有的 <em>QueryWrapper</em>、<em>UpdateWrapper</em>、<em>LambdaQueryWrapper</em> 和 <em>LambdaUpdateWrapper</em> 都继承自 <em>AbstractWrapper</em>。</li>\n<li><strong>QueryWrapper</strong>：专门用于构造查询条件，支持基本的等于、不等于、大于、小于等各种常见操作。它允许你以链式调用的方式添加多个查询条件，并且可以组合使用  <code>and</code>  和  <code>or</code>  逻辑。</li>\n<li><strong>UpdateWrapper</strong>：用于构造更新条件，可以在更新数据时指定条件。与 <em>QueryWrapper</em> 类似，它也支持链式调用和逻辑组合。使用 <em>UpdateWrapper</em> 可以在不创建实体对象的情况下，直接设置更新字段和条件。</li>\n<li><strong>LambdaQueryWrapper</strong>：这是一个基于 <em>Lambda</em> 表达式的查询条件构造器，它通过 <em>Lambda</em> 表达式来引用实体类的属性，从而避免了硬编码字段名。这种方式提高了代码的可读性和可维护性，尤其是在字段名可能发生变化的情况下。</li>\n<li><strong>LambdaUpdateWrapper</strong>：类似于 <em>LambdaQueryWrapper</em>，<em>LambdaUpdateWrapper</em> 是基于 <em>Lambda</em> 表达式的更新条件构造器。它允许你使用 <em>Lambda</em> 表达式来指定更新字段和条件，同样避免了硬编码字段名的问题。</li>\n</ul>\n</blockquote>\n<h4 id=\"querywrapper-updatewrapper\"><a class=\"markdownIt-Anchor\" href=\"#querywrapper-updatewrapper\">#</a> QueryWrapper &amp; UpdateWrapper</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 QueryWrapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建 LambdaQueryWrapper</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lambdaQueryWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lambdaQueryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 创建 UpdateWrapper</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> updateWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>updateWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 创建 LambdaUpdateWrapper</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">LambdaUpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> lambdaUpdateWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>lambdaUpdateWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>alleq</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>全部相等（或个别  <code>isNull</code>  ）</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>allEq(Map&lt;K, V&gt; params)</code></li>\n<li><code>allEq(Map&lt;K, V&gt; params, boolean null2IsNull)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>params</code> ： <code>key</code>  为数据库字段名， <code>value</code>  为字段值</li>\n<li><code>null2IsNull</code> ：默认 <em>true</em> ，为 <em>true</em> 则在  <code>map</code>  的  <code>value</code>  为 <em>null</em> 时调用  <code>isNull</code>  方法，为 <em>false</em> 时则忽略此字段</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  为满惠并且  <code>age</code>  为  <code>19</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">allEq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>eq</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>相等</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>eq(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  为满惠的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>ne</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>不等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ne(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不等于满惠的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">ne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>gt</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>大于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ge(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  大于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>lt</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>小于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>lt(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  小于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>le</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>小于等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>le(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  小于等于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">le</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>ge</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>大于等于</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>ge(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  大于等于  <code>20</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">ge</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>between</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>指定的区间， <code>BETWEEN value1 AND value2</code></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>between(R column, Object val1, Object val2)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val1</code> ：值 1（包含此值）</li>\n<li><code>val2</code> ：值 2（包含此值）</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  为  <code>20</code>  到  <code>25</code>  之间的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notBetween</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>指定的区间之外， <code>NOTBETWEEN value1 AND value2</code></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>between(R column, Object val1, Object val2)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val1</code> ：值 1（包含此值）</li>\n<li><code>val2</code> ：值 2（包含此值）</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不为  <code>20</code>  到  <code>25</code>  之间的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>like</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊查询</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>like(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  包含 “满” 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notLike</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊查询</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notLike(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不包含 “满” 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>likeLeft</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊匹配结尾</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>likeLeft(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  以 “惠” 结尾的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeLeft</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>likeRight</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>模糊匹配开头</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>likeRight(R column, Object val)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>val</code> ：属性值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  以 “惠” 开头的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>isNull</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>为 <em>null</em></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>isNull(R column)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  为 <em>null</em> 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>isNotNull</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>不为 <em>null</em></li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>isNotNull(R column)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不为 <em>null</em> 的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>in</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>集合中的值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>in(R column, Collection&lt;?&gt; value)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>value</code> ：值的集合</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  等于  <code>&#123;19,20,21,22,23,24,25,26&#125;</code>  此集合中的值的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notIn</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>非集合中的值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notIn(R column, Collection&lt;?&gt; value)</code></li>\n<li><code>notIn(R column, Object... values)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>value</code> ：值的集合</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不等于  <code>&#123;19,20,21,22,23,24,25,26&#125;</code>  此集合中的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>inSql</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>动态生成集合值</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>inSql(R column, String inValue)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>inValue</code> ：动态生成集合值的 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  满足动态返回的集合值 <code>(age &lt; 25)</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">inSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select u.age from user as u where u.age &lt; 25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notInSql</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>字段不在动态生成的集合值内</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notInSql(R column, String inValue)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>column</code> ：数据库的字段属性</li>\n<li><code>inValue</code> ：动态生成集合值的 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>age</code>  不满足动态返回的集合值 <code>(age &lt; 25)</code>  的记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">notInSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select u.age from user as u where u.age &lt; 25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>groupBy</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>分组</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>groupBy(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性，可以有多个</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询每个 <code>age</code>  的  <code>id</code>  数量以及每个组的最大  <code>age</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id) as count\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"max(age)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>map <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>orderByAsc</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>升序排序</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>orderByAsc(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  进行升序查询</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByAsc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>orderByDesc</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>降序排序</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>orderByDesc(R columns, ...)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>columns</code> ：数据库的字段属性</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  进行降序查询</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>having</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>条件筛选，通常于  <code>GROUP BY</code>  一起使用</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>having(String sqlHaving, Object... params)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>sqlHaving</code> ：<em>SQL</em> 语句</li>\n<li><code>params</code> ：可变参数列表，包含 <em>SQL</em> 语句中占位符的替换值</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>根据  <code>age</code>  分组后，查询每组  <code>age</code>  字段的总和大于  <code>40</code>  的记录的  <code>id</code>  计数和  <code>age</code>  字段值</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count(id)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">having</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum(age) > &#123;0&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectMaps</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>map <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>or</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>拼接条件</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>or()</code></li>\n<li><code>or(Consumer&lt;Param&gt; consumer)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>consumer</code> ：一个  <code>Consumer</code>  函数式接口，它接受一个  <code>Param</code>  类型的参数，并可以调用  <code>Param</code>  对象上的方法来构建 <em>OR</em> 嵌套条件</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>条件一：( <code>name</code>  为  <code>&quot;满惠&quot;</code>  并且  <code>age</code>  为  <code>&quot;19&quot;</code> ) 或者  <code>id</code>  为  <code>&quot;16&quot;</code></p>\n</li>\n<li>\n<p>条件二：  <code>email</code>  为  <code>&quot;test3@baomidou.com&quot;</code>  或者  <code>email</code>  为  <code>&quot;test16@baomidou.com&quot;</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 对应 SQL 原句</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//select * from user where ((name = 满惠 and age = 19) or id = 16 ) and ( email = test3@baomidou.com or email = test16@baomidou.com );</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-></span> j<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满惠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"19\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"16\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test3@baomidou.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test16@baomidou.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>代码解析</p>\n<ul>\n<li>首先，使用了嵌套的 <em>Lambda</em> 表达式， <code>i -&gt; i.and(j -&gt; j.eq(&quot;name&quot;, &quot;满惠&quot;).eq(&quot;age&quot;, &quot;19&quot;))</code> ，来构建了一个  <code>and</code>  条件，其中包含了两个  <code>eq</code>  条件，即  <code>&quot;name&quot;</code>  等于  <code>&quot;满惠&quot;</code>  且  <code>&quot;age&quot;</code>  等于  <code>&quot;19&quot;</code> 。接着，使用了  <code>or()</code>  方法来连接另一个  <code>eq</code>  条件，即  <code>&quot;id&quot;</code>  等于  <code>&quot;16&quot;</code> 。</li>\n<li>然后，它使用了  <code>and()</code>  方法来连接另一个查询条件， <code>i -&gt; i.eq(&quot;email&quot;, &quot;test3@baomidou.com&quot;).or().eq(&quot;email&quot;, &quot;test16@baomidou.com&quot;)</code> ，这个条件包括两个  <code>or</code>  连接的  <code>eq</code>  条件，即  <code>&quot;email&quot;</code>  等于  <code>&quot;test3@baomidou.com&quot;</code>  或  <code>&quot;email&quot;</code>  等于  <code>&quot;test16@baomidou.com&quot;</code> 。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>exists</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>判断 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>exists(String existsSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>existsSql</code> ：一个字符串，包含要作为 <em>EXISTS</em> 条件的 <em>SQL</em> 子查询，如何 <em>SQL</em> 语句返回有记录，则返回  <code>true</code></li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>判断  <code>&quot;满惠&quot;</code>  是否存在  <code>email</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where user.name = '满惠' and user.email is not null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>notExists</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>判断 <em>SQL</em> 语句</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>notExists(String notExistsSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>notExistsSql</code> ：一个字符串，包含要作为 <em>NOTEXISTS</em> 条件的 <em>SQL</em> 子查询</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>判断  <code>&quot;满惠&quot;</code>  是否存在  <code>email</code></p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from user where user.name = '满惠' and user.email is not null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>last</code></p>\n<ul>\n<li>\n<p>描述</p>\n<ul>\n<li>拼接 <em>SQL</em> 到语句后</li>\n</ul>\n</li>\n<li>\n<p>原型</p>\n<ul>\n<li><code>last(String lastSql)</code></li>\n</ul>\n</li>\n<li>\n<p>参数说明</p>\n<ul>\n<li><code>lastSql</code> ：需要追加的 <em>SQL</em> 语句，多次调用以最后一次为准，<strong>有 <em>SQL</em> 注入风险</strong></li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<ul>\n<li>\n<p>查询  <code>name</code>  不为  <code>null</code>  的前五条记录</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit 5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGVzL3dyYXBwZXIv\">条件构造器 | MyBatis-Plus (baomidou.com)</span></p>\n<h4 id=\"综合应用\"><a class=\"markdownIt-Anchor\" href=\"#综合应用\">#</a> 综合应用</h4>\n<ol>\n<li>查询所有姓名包含 “满” 且年龄大于 18 岁的记录</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"满\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>查询所有年龄大于 20 且 小于 25 的记录</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>将 id 为 10 的用户的姓名修改为 QSky</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QSky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>将姓名以 “文” 开头的用户删除</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">likeRight</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"文\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义-sql-语句\"><a class=\"markdownIt-Anchor\" href=\"#自定义-sql-语句\">#</a> 自定义 <em>SQL</em> 语句</h3>\n<h4 id=\"sql-注入器\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入器\">#</a> <em>SQL</em> 注入器</h4>\n<p>使用 <em>SQL</em> 注入器可以允许你执行自定义的 <em>SQL</em> 语句</p>\n<p>实现的步骤大致分为以下几步：</p>\n<ol>\n<li>创建定义 <em>SQL</em> 语句的类</li>\n<li>创建注入器</li>\n<li>在 <em>Mapper</em> 接口中加入自定义的方法</li>\n<li>使用 <em>Mapper</em> 接口中的方法</li>\n</ol>\n<h4 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h4>\n<ol>\n<li>创建定义 <em>SQL</em> 语句的类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此类需要继承 AbstractMethod 抽象类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectAllMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMethod</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 构造函数，用于创建一个 SelectAllMethod 对象。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param methodName 要映射的方法名。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SelectAllMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 重写 injectMappedStatement 方法，用于生成并返回一个 MappedStatement 对象，它包含了查询全部数据的 SQL 语句。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param mapperClass 生成的 mapper 接口所在的类。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param modelClass 数据模型类，即实体类。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param tableInfo 表信息，包含了表的名称等信息。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回一个 MappedStatement 对象，包含了完整的查询全部数据的 SQL 语句及其相关配置。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MappedStatement</span> <span class=\"token function\">injectMappedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mapperClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TableInfo</span> tableInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 构造查询全部列的 SQL 语句</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from \"</span> <span class=\"token operator\">+</span> tableInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getTableName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> <span class=\"token string\">\"selectAll\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 使用语言驱动创建 SQL 源，根据 SQL 语句和模型类</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">var</span> sqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>languageDriver<span class=\"token punctuation\">.</span><span class=\"token function\">createSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 添加并返回一个用于查询全部数据的 MappedStatement</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addSelectMappedStatementForOther</span><span class=\"token punctuation\">(</span>mapperClass<span class=\"token punctuation\">,</span> methodName<span class=\"token punctuation\">,</span> sqlSource<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建注入器</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * MySQLInjector 类，继承自 AbstractSqlInjector，用于生成 MySQL 数据库操作的方法列表。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 或继承 DefaultSqlInjector、ISqlInjector。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @@Repository 注解标识这是一个仓库层组件。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySQLInjector</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSqlInjector</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 获取方法列表，根据配置、映射器类和表信息生成特定的方法列表。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param configuration MyBatis 的配置信息。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param mapperClass 映射器类，用于确定方法的生成范围和类型。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param tableInfo 表信息，包含关于数据库表的结构和元数据。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return 返回一个包含生成的方法列表的集合。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AbstractMethod</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMethodList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span> configuration<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mapperClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TableInfo</span> tableInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用父类方法，获取初始的方法列表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AbstractMethod</span><span class=\"token punctuation\">></span></span> methodList <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodList</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">,</span> mapperClass<span class=\"token punctuation\">,</span> tableInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 向方法列表中添加一个自定义的 selectAll 方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        methodList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SelectAllMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectAll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> methodList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在 <em>Mapper</em> 接口中加入自定义的方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * UserMapper 接口，用于映射用户数据。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 继承自 BaseMapper&lt;User>，提供基本的 CRUD 操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 选择所有用户。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 因为返回的是用户列表，其返回值是使用 List 存储的</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return 返回用户列表。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Mapper</em> 中定义的方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注入 UserMapper，用于测试中对用户数据的查询操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Injector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>结果图</li>\n</ol>\n<p><img data-src=\"https://figurebed.yunyat.cloud/Code/20240523212141.png\" alt=\"image-20240523212135630\"></p>\n<h4 id=\"使用-wrapper-自定义-sql\"><a class=\"markdownIt-Anchor\" href=\"#使用-wrapper-自定义-sql\">#</a> 使用 <em>Wrapper</em> 自定义 <em>SQL</em></h4>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-2/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-2/",
            "title": "MyBatisPlus-2",
            "date_published": "2024-11-08T08:31:35.000Z",
            "content_html": "<h3 id=\"持久层接口\"><a class=\"markdownIt-Anchor\" href=\"#持久层接口\">#</a> 持久层接口</h3>\n<h4 id=\"service-interface\"><a class=\"markdownIt-Anchor\" href=\"#service-interface\">#</a> Service Interface</h4>\n<h5 id=\"save\"><a class=\"markdownIt-Anchor\" href=\"#save\">#</a> save</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录（选择字段，策略插入）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 插入（批量）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 插入（分批次批量）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：插入记录，根据实体对象的字段进行策略性插入。</p>\n<p>返回值：Boolean，表示插入成功与否。</p>\n<p>参数说明：</p>\n<table>\n  <tr>\n     <th>类型</th>\n     <th>参数名</th>\n     <th>描述</th>\n </tr>\n <tr>\n     <td>T</td>\n     <td>entity</td>\n     <td>实体对象</td>\n </tr>\n <tr>\n     <td>Collection&lt;T&gt;</td>\n     <td>entityList</td>\n     <td>实体对象集合</td>\n </tr>\n <tr>\n     <td>int</td>\n     <td>batchSize</td>\n     <td>插批次数量</td>\n </tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// boolean save(T entity);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> userAge<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> userAge<span class=\"token punctuation\">,</span> userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的保存方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// boolean saveBatch(Collection&lt;T> entityList);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatchUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// boolean saveBatch(Collection&lt;T> entityList, int batchSize);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveBatchUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> batchSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveBatch</span><span class=\"token punctuation\">(</span>userList<span class=\"token punctuation\">,</span> batchSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"remove\"><a class=\"markdownIt-Anchor\" href=\"#remove\">#</a> remove</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据 queryWrapper 设置的条件，删除记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据 ID 删除</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除（根据 ID 批量删除）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByIds</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">></span></span> idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：通过指定条件删除符合条件的记录</p>\n<p>返回值：Boolean，表示删除操作是否成功</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n</tr>\n<tr>\n  <td>Serializable</td>\n  <td>id</td>\n  <td>主键ID</td>\n</tr>\n<tr>\n  <td>Collection&lt;?extends Serializable&gt;</td>\n  <td>idList</td>\n  <td>主键ID列表</td>\n</tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// boolean remove(Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// boolean removeById(Serializable id);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByID</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// boolean removeByIds(Collection&lt;? extends Serializable> idList);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeByIDs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeByIds</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\">#</a> list</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询所有</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 查询所有列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：查询符合条件的记录</p>\n<p>返回值： 查询结果，可能是实体对象、Map 对象或其他类型</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n </tr>\n<tr>\n  <td>Collection&lt;?extends Serializable&gt;</td>\n  <td>idList</td>\n  <td>主键ID列表</td>\n</tr>\n <tr>\n  <td>Map&lt;String, Object&gt;</td>\n  <td>columnMap</td>\n  <td>表字段Map对象</td>\n</tr>\n <tr>\n  <td>Function&lt;?super Object, V&gt;</td>\n  <td>Mapper</td>\n  <td>转换函数</td>\n</tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// List&lt;T> list();</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// List&lt;Map&lt;String, Object>> listMaps();</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">listMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"page\"><a class=\"markdownIt-Anchor\" href=\"#page\">#</a> Page</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无条件分页查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 条件分页查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 无条件分页查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 条件分页查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> page<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：分页查询符合条件的记录</p>\n<p>返回值：分页查询结果，包含记录列表和总记录数</p>\n<p>参数说明：</p>\n<table>\n<tr>\n  <th>类型</th>\n  <th>参数名</th>\n  <th>描述</th>\n</tr>\n <tr>\n  <td>IPage&lt;T&gt;</td>\n  <td>page</td>\n  <td>翻页对象</td>\n </tr>\n<tr>\n  <td>Wrapper&lt;T&gt;</td>\n  <td>queryWrapper</td>\n  <td>实体包装类 QueryWrapper</td>\n </tr>\n</table>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// IPage&lt;T> page(IPage&lt;T> page);</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userIPage <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> userIPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// IPage&lt;T> page(IPage&lt;T> page, Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPages</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userIPage <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> userIPage<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// IPage&lt;Map&lt;String, Object>> pageMaps(IPage&lt;T> page);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPageMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userPageMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userMapList <span class=\"token operator\">=</span> userPageMaps<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// IPage&lt;Map&lt;String, Object>> pageMaps(IPage&lt;T> page, Wrapper&lt;T> queryWrapper);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPageMaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryWrapper</span> queryWrapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">IPage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userPageMaps <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">pageMaps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> userMapList <span class=\"token operator\">=</span> userPageMaps<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"mapper-interface\"><a class=\"markdownIt-Anchor\" href=\"#mapper-interface\">#</a> Mapper Interface</h4>\n<h5 id=\"insert\"><a class=\"markdownIt-Anchor\" href=\"#insert\">#</a> insert</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入一条记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>作用：插入一条记录</p>\n<p>返回值：int，表示插入操作影响的行数，通常为 1，表示成功</p>\n<p>参数说用：</p>\n<table>\n<tr>\n<th>类型</th>\n<th>参数名</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>T</td>\n<td>entity</td>\n<td>实体对象</td>\n</tr>\n</table>\n</blockquote>\n<p>更多使用实例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vZ3VpZGVzL2RhdGEtaW50ZXJmYWNlLw==\">持久层接口 | MyBatis-Plus (baomidou.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-1/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/MyBatisPlus-1/",
            "title": "MyBatisPlus-1",
            "date_published": "2024-05-25T17:00:09.000Z",
            "content_html": "<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus</span> 是一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==\">MyBatis</span> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<p>具体可查看官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vaW50cm9kdWNlLw==\">简介 | MyBatis-Plus (baomidou.com)</span></p>\n</blockquote>\n<h3 id=\"安装-mybatis-plus\"><a class=\"markdownIt-Anchor\" href=\"#安装-mybatis-plus\">#</a> 安装 MyBatis-Plus</h3>\n<h4 id=\"添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#添加依赖\">#</a> 添加依赖</h4>\n<p>首先需要添加  <code>MyBatis-Plus Starter</code>  依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 此处使用的是 SpringBoot3，如果你使用 SpringBoot2，请参考官方文档导入 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-spring-boot3-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h3>\n<p>在  <code>application.yaml</code>  中添加  <code>MyBatis-Plus</code>  的  <code>logging</code>  配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 MyBatis 内置的控制台输出日志方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure><p>定义一个配置类  <code>MyBatisPlusConfig</code> ，在此类上添加  <code>@MapperScan</code>  注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * MyBatisPlus 配置类，用于配置 MyBatisPlus 的相关设置。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Configuration 标注为 Spring 配置类。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @MapperScan (\"com.example.*\") 扫描指定包下的 Mapper 接口。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.example.*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 创建并配置 MybatisPlusInterceptor 拦截器。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return 返回配置好的 MybatisPlusInterceptor 实例。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 MybatisPlusInterceptor 实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加分页插件拦截器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回配置好的拦截器实例</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"编码\"><a class=\"markdownIt-Anchor\" href=\"#编码\">#</a> 编码</h3>\n<p>写一个实体类  <code>user.java</code> ，对应数据表中的字段.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用了 lombok 简化开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写一个  <code>Mapper</code>  接口，用于映射数据库操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试代码\"><a class=\"markdownIt-Anchor\" href=\"#测试代码\">#</a> 测试代码</h3>\n<p>在单元测试中测试功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringbootApiApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注入 UserMapper，用于测试中对用户数据的查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 测试 UserMapper 的查询功能</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_Select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 调用 userMapper 的 selectList 方法，查询所有用户，打印输出查询结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"basemapper-iservice\"><a class=\"markdownIt-Anchor\" href=\"#basemapper-iservice\">#</a> <em>BaseMapper</em> &amp; <em>IService</em></h3>\n<p>​\t<em>MyBatis-Plus</em> 提供了两个核心接口，分别用于对 <em>Dao</em> 层及 <em>Service</em> 层进行操作。</p>\n<h4 id=\"basemapper\"><a class=\"markdownIt-Anchor\" href=\"#basemapper\">#</a>  <code>BaseMapper</code></h4>\n<p><code>BaseMapper</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Mapper</em> 接口，它继承自 <em>mybatis-plus</em> 的 <em>Mapper</em> 接口，并扩展了一些常用的数据库操作方法。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 CRUD 封装  <code>BaseMapper</code>  接口，为  <code>Mybatis-Plus</code>  启动时自动解析实体表关系映射转换为  <code>Mybatis</code>  内部对象注入容器<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 参数  <code>Serializable</code>  为任意类型主键  <code>Mybatis-Plus</code>  不推荐使用复合主键约定每一张表都有自己的唯一  <code>id</code>  主键<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p><code>BaseMapper</code>  的主要作用是定义 <em>DAO</em> 层的数据库操作方法，例如数据的增删改查。</p>\n<p>开发者可以编写接口继承  <code>BaseMapper</code>  接口，并指定对应的实体类，就可以通过注入来使用这些通用方法。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 可以添加一些自定义的操作...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"iservice\"><a class=\"markdownIt-Anchor\" href=\"#iservice\">#</a>  <code>IService</code></h4>\n<p><code>IService</code>  接口是 <em>MyBatis-Plus</em> 提供的通用 <em>Service</em> 接口。</p>\n<blockquote>\n<p>官方说明：</p>\n<p>- 通用 Service CRUD 封装 IService 接口，进一步封装 CRUD 采用  <code>get 查询单行</code>   <code>remove 删除</code>   <code>list 查询集合</code>   <code>page 分页</code>  前缀命名方式区分  <code>Mapper</code>  层避免混淆<br>\n - 泛型  <code>T</code>  为任意实体对象<br>\n - 建议如果存在自定义通用 Service 方法的可能，请创建自己的  <code>IBaseService</code>  继承  <code>Mybatis-Plus</code>  提供的基类<br>\n - 对象  <code>Wrapper</code>  为  <code>条件构造器</code></p>\n</blockquote>\n<p>开发者可以编写接口继承  <code>IService</code>  接口，并指定对应的实体类，就可以使用这些通用方法，无需手动编写业务逻辑代码。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserIService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 自定义的操作，查找年龄大于 age 的所有记录...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"serviceimpl\"><a class=\"markdownIt-Anchor\" href=\"#serviceimpl\">#</a>  <code>ServiceImpl</code></h5>\n<p><code>ServiceImpl</code>  是  <code>IService</code>  接口的默认实现类， <code>ServiceImpl</code>  是针对业务逻辑层的实现，并调用  <code>BaseMapper</code>  来操作数据库。</p>\n<p>原型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传入的参数：</p>\n<ul>\n<li>M：你自定义的继承了  <code>BaseMapper</code>  接口的接口</li>\n<li>T：对应的实体类的类型</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 标示一个 Spring 框架的服务组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserIService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 引入 UserMapper 资源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 查找所有用户信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回用户列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 保存用户信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param userId 用户 ID</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param userName 用户名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param userAge 用户年龄</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param userEmail 用户邮箱</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return 返回保存结果，成功为 true，失败为 false</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> userAge<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户 ID</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>userAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户年龄</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置用户邮箱</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的保存方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 根据年龄查找用户</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param age 年龄条件</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @return 返回年龄大于指定条件的用户列表</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findUsersByAgeGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 使用 QueryWrapper 构建查询条件，查询年龄大于指定值的用户</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "mybatis",
                "mybatisplus"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-5/",
            "title": "MySQL-5",
            "date_published": "2024-05-14T07:48:52.000Z",
            "content_html": "<h3 id=\"sql-注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入\">#</a> <em>SQL</em> 注入</h3>\n<blockquote>\n<p>如果您通过网页获取用户输入的数据并将其插入一个 <em>MySQL</em> 数据库，那么就有可能发生 <em>SQL</em> 注入安全的问题。</p>\n<p>所谓 <em>SQL</em> 注入，就是通过把 <em>SQL</em> 命令插入到 <em>Web</em> 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 <em>SQL</em> 命令。</p>\n<p><em>MySQL</em> 注入是指攻击者通过恶意构造的输入，成功地执行恶意的 <em>SQL</em> 查询，这通常发生在用户输入未经适当验证或转义的情况下，攻击者试图在输入中插入 <em>SQL</em> 代码，以执行意外的查询或破坏数据库。</p>\n<p>我们永远不要信任用户的输入，我们必须认定用户输入的数据都是不安全的，我们都需要对用户输入的数据进行过滤处理。</p>\n</blockquote>\n<h3 id=\"防范注入\"><a class=\"markdownIt-Anchor\" href=\"#防范注入\">#</a> 防范注入</h3>\n<ol>\n<li><strong>使用参数化查询或预编译语句</strong>：使用参数化查询（<em>Prepared Statements</em>）可以有效防止 <em>SQL</em> 注入，因为它们在执行查询之前将输入数据与查询语句分离。</li>\n<li><strong>输入验证和转义</strong>：对用户输入进行适当的验证，并使用合适的转义函数（如 <code>mysqli_real_escape_string</code> ）来处理输入，以防止恶意注入。</li>\n<li><strong>最小权限原则</strong>：给予数据库用户最小的权限，确保它们只能执行必要的操作，以降低潜在的损害。</li>\n<li><strong>使用 <em>ORM</em> 框架</strong>：使用对象关系映射（<em>ORM</em>）框架（如<em> Hibernate</em>、<em>Sequelize</em>）可以帮助抽象 <em>SQL</em> 查询，从而降低 <em>SQL</em> 注入的风险。</li>\n<li><strong>禁用错误消息显示</strong>：在生产环境中，禁用显示详细的错误消息，以防止攻击者获取有关数据库结构的敏感信息。</li>\n</ol>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zcWwtaW5qZWN0aW9uLmh0bWw=\">MySQL 及 SQL 注入 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h3>\n<p><em>MySQL</em> 的函数可以执行很多操作，具体请查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1mdW5jdGlvbnMuaHRtbA==\">MySQL 函数 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"mysql-运算符\"><a class=\"markdownIt-Anchor\" href=\"#mysql-运算符\">#</a> MySQL 运算符</h3>\n<p>运算符大致分为以下几种：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcGVyYXRvci5odG1s\">MySQL 运算符 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-4/",
            "title": "MySQL-4",
            "date_published": "2024-05-13T08:24:45.000Z",
            "content_html": "<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<p><em>MySQL</em> 中，<u>事务</u>(<em> <code>Transaction</code> </em>) 是一组 <em>SQL</em> 语句的执行，它们被视为一个单独的工作单元。这组操作要么全部成功执行，要么全部不执行，是一个 “全有或全无” 的原则. <u>事务</u>的主要目的是为了保证数据的完整性和一致性.</p>\n<p>基本特性 (<em><strong>ACID</strong></em> 属性)：</p>\n<ul>\n<li><strong>原子性</strong> (<strong>A</strong>tomicity)\n<ul>\n<li><u>事务</u>是一个原子操作单元，<u>事务</u>中的所有操作要么全部执行成功，要么全部不执行，不会仅执行部分操作，<u>事务</u>在执行过程中发生错误，会被回滚（ <code>Rollback</code> ）到<u>事务</u>开始前的状态.</li>\n</ul>\n</li>\n<li><strong>一致性</strong> (<strong>C</strong>onsistency)\n<ul>\n<li><u>事务</u>执行前后，数据库从一个一致状态转换到另一个一致状态。即使在<u>事务</u>执行过程中出现错误，数据库也能够保持数据的完整性.</li>\n</ul>\n</li>\n<li><strong>隔离性</strong> (<strong>I</strong>solation)\n<ul>\n<li>多个<u>事务</u>并发执行时，每个<u>事务</u>好像是在独立地处理数据，即一个<u>事务</u>内部的操作对其他<u>事务</u>是隔离的，这可以防止并发<u>事务</u>之间的相互干扰，<u>事务</u>隔离分为不同级别，包括读未提交（ <code>Read uncommitted</code> ）、读提交（ <code>read committed</code> ）、可重复读（ <code>repeatable read</code> ）和串行化（ <code>Serializable</code> ）.</li>\n</ul>\n</li>\n<li><strong>持久性</strong> (<strong>D</strong>urability)\n<ul>\n<li>一旦<u>事务</u>提交（ <code>commit</code> ），其结果就是永久性的，即使系统发生故障也不会丢失已提交<u>事务</u>的结果.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><em>只有使用了 lnnodb 数据库引擎的数据库或表才支持事务.</em></p>\n<p><em>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交.</em></p>\n</blockquote>\n<h3 id=\"事务操作\"><a class=\"markdownIt-Anchor\" href=\"#事务操作\">#</a> 事务操作</h3>\n<ul>\n<li><code>BEGIN</code>  或  <code>START TRANSACTION</code>\n<ul>\n<li>显示开启一个事务.</li>\n</ul>\n</li>\n<li><code>COMMIT</code>\n<ul>\n<li>提交事务，并对已对数据库进行的所有修改变为永久.</li>\n</ul>\n</li>\n<li><code>ROLLBACK</code>\n<ul>\n<li>回滚事务。结束用户的事务，并撤销正在进行的所有未提交的修改.</li>\n</ul>\n</li>\n<li><code>SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li><code>savepoint</code>  允许在事务中创建一个标记点，一个事务中可以有多个标记点.</li>\n</ul>\n</li>\n<li><code>RELEASE SAVEPOINT &lt;identifier&gt;</code>\n<ul>\n<li>删除一个事务的标记点，当没有指定的标记点时，该语句会抛出一个异常.</li>\n</ul>\n</li>\n<li><code>ROLLBACK TO &lt;identifier&gt;</code>\n<ul>\n<li>将事务回滚到标记点.</li>\n</ul>\n</li>\n</ul>\n<p>事务处理流程：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/05/10/pkZG5WQ.png\" alt=\"mysql_1\"></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 开启一个事务\nbegin;\n\n# 更改 user 表的 birhdate 列的值为 '2024-05-09' 的值为 NULL\nupdate user as u set birhdate=NULL where u.birhdate='2024-05-09';\n\n# 提交事务\ncommit;\n# or 回滚事务\nrollback;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC10cmFuc2FjdGlvbi5odG1s\">MySQL 事务 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"alter-命令\"><a class=\"markdownIt-Anchor\" href=\"#alter-命令\">#</a> <em>ALTER</em> 命令</h3>\n<p><em>ALTER</em> 命令是用于修改现有数据库表结构的重要语句，通过它，你可以执行多种表结构的更改操作，而不必删除并重新创建表.</p>\n<p>常用操作：</p>\n<ul>\n<li>添加列\n<ul>\n<li><code>ALTER TABLE table_name ADD column_name data_type;</code>\n<ul>\n<li>示例： <code>alter table user add birth_date date;</code> ，向  <code>user</code>  表添加  <code>birth_date</code>  日期列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除列\n<ul>\n<li><code>ALTER TABLE table_name DROP COLUMN column_name;</code>\n<ul>\n<li>示例： <code>alter table user drop column birth_date;</code> ，将  <code>user</code>  表的  <code>birth_date</code>  列删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改列的数据类型\n<ul>\n<li><code>ALTER TABLE table_name MODIFY column_name new_data_type;</code>\n<ul>\n<li>示例： <code>alter table user modify id varchar(10);</code>  ，将  <code>id</code>  列的字段类型修改为变长字符串类型.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>改变列名及数据类型：\n<ul>\n<li><code>ALTER TABLE table_name CHANGE column_name new_column_name new_data_type;</code></li>\n<li>示例： <code>alter table user change birhdate birth_date date;</code> ，将  <code>birhdate</code>  列名改为  <code>birth_date</code>  并将列类型改为  <code>date</code> ；</li>\n</ul>\n</li>\n<li>添加主键\n<ul>\n<li><code>ALTER TABLE table_name ADD PRIMARY KEY(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add primary key(id);</code> ，将  <code>id</code>  设置为  <code>test_table</code>  表的主键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加唯一键\n<ul>\n<li><code>ALTER TABLE table_name ADD UNIQUE(column_name);</code>\n<ul>\n<li>示例： <code>alter table user add unique(id);</code> ，将  <code>id</code>  列设置为唯一键.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>添加外键约束\n<ul>\n<li><code> ALTER TABLE table_name ADD CONSTRAINT fk_constraint_name FOREIGN KEY(column_name) REFERENCES referenced_table_name(referenced_column_name);</code>\n<ul>\n<li>示例： <code>alter table orders add constraint fk_user_id foreign key(id) references user(id);</code> ，将 <code>orders</code>  的  <code>id</code>  设置为外键，引用  <code>user</code>  的  <code>id</code>  列.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设置默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER column_name SET DEFAULT value;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date set default '1970-01-01';</code> ，将  <code>order_date</code>  的默认值设置为  <code>1970-01-01</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>删除默认值\n<ul>\n<li><code>ALTER TABLE table_name ALTER order_date DROP DEFAULT;</code>\n<ul>\n<li>示例： <code>alter table orders alter order_date drop default;</code> ，将  <code>order_date</code>  列的默认值删除.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改表名\n<ul>\n<li><code>ALTER TABLE table_name RENAME TO new_table;</code>\n<ul>\n<li>示例： <code>alter table test_table rename to user_age;</code> ，将  <code>test_table</code>  表名改为  <code>user_age</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改存储引擎\n<ul>\n<li><code>ALTER TABLE table_name ENGINE=value;</code>\n<ul>\n<li>示例： <code>alter table user engine=myisam;</code> ，将 user 表的存储引擎改为  <code>myisam</code>  .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据备份与恢复\"><a class=\"markdownIt-Anchor\" href=\"#数据备份与恢复\">#</a> 数据备份与恢复</h3>\n<p>​\t使用  <code>MYSQLDUMP</code>  命令可以备份和还原数据库。如果只想复制一张表，可以使用  <code>mysqldump</code>  命令导出该表的结构和数据，然后导入到新的数据库或新的表中，也可以导出所有的表结构及数据，以达到复制数据库的目的 .</p>\n<ul>\n<li>备份表数据：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &lt;table_name&gt; &gt; &lt;table_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql user &gt; user.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的  <code>user</code>  表导出到当前目录下名为  <code>user.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>还原表数据：\n<ul>\n<li><code>source &lt;path&gt;;</code>\n<ul>\n<li>示例： <code>source D:/user.sql;</code> ，将 D 盘根目录下的  <code>user.sql</code>  文件导入到当前选择的数据库中 .</li>\n<li>此命令需要在 <em>MySQL</em> 中执行 .</li>\n<li>可以使用此方法还原所有表数据，即还原数据库 .</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>备份数据库：\n<ul>\n<li><code>mysqldump -h &lt;ip&gt; -u &lt;user_name&gt; -p [-d] &lt;db_name&gt; &gt; &lt;new_db_name.sql&gt;;</code>\n<ul>\n<li>示例： <code>mysqldump -h localhost -uroot -p test_mysql &gt; test_mysql.sql;</code> ，将本地的  <code>test_mysql</code>  数据库的所有表导出到当前目录下名为  <code>test_mysql.sql</code>  的文件中 .</li>\n<li>- <code>d</code>  参数为可选，加上此参数则只导出表结构而不包含数据 .</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI5OTM0MC9hcnRpY2xlL2RldGFpbHMvMTIxMzgwMDU4\">mysql 导入导出命令详细总结，看这一篇就够了_mysql 导入导出命令 - CSDN 博客</span></p>\n<h3 id=\"元数据\"><a class=\"markdownIt-Anchor\" href=\"#元数据\">#</a> 元数据</h3>\n<p>元数据是用于描述数据的数据。元数据在 <em>MySQL</em> 中是指关于数据库及其内容 (如表、列、索引等) 的信息。</p>\n<p>元数据存储在系统表中，这些表位于 <em>MySQL</em> 数据库的  <code>information_schema</code>  数据库中，通过查询这些系统表，可以获取关于数据库的结构、对象和其他相关信息的详细信息。</p>\n<p>常用的元数据查询：</p>\n<ul>\n<li>查看表的索引\n<ul>\n<li><code>SHOW INDEX FROM table_name;</code></li>\n</ul>\n</li>\n<li>查看表的创建语句\n<ul>\n<li><code>SHOW CREATE TABLE table_name;</code></li>\n</ul>\n</li>\n<li>查看表的行数\n<ul>\n<li><code>SELECT COUNT(*) FROM table_name;</code></li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kYXRhYmFzZS1pbmZvLmh0bWw=\">MySQL 元数据 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-3/",
            "title": "MySQL-3",
            "date_published": "2024-05-09T07:03:42.000Z",
            "content_html": "<h3 id=\"like-子句\"><a class=\"markdownIt-Anchor\" href=\"#like-子句\">#</a> <em>LIKE</em> 子句</h3>\n<p><em>like</em> 子句用于指定 <em>update</em> 以及 <em>delete</em> 中的 <em>where</em> 条件.</p>\n<p>可以使用 <em> <code>or</code> </em> 或者 <em> <code>and</code> </em> 指定一个或者多个条件.</p>\n<p>基本语法：</p>\n<p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;LIKE句所用的列名&gt; LIKE &lt;条件&gt;;</code></p>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1;\n</code></pre>\n<p>筛选 <em>user</em> 表中的所有行，<em>id</em> 列为 1 的所有列.</p>\n<h4 id=\"like-通配符\"><a class=\"markdownIt-Anchor\" href=\"#like-通配符\">#</a> <em>LIKE</em> 通配符</h4>\n<p>在 <em>like</em> 子句中， <code>%</code>  通配符与正则表达式的  <code>*</code>  作用相同，表示零个或多个字符.</p>\n<p>而  <code>_</code>  通配符表示一个字符.</p>\n<p>不区分大小写匹配：</p>\n<pre><code class=\"language-mysql\">select * from user where id like 1 collate utf8mb4_general_ci;\n</code></pre>\n<p>使用  <code>collate utf8mb4_general_ci</code>  定义 <em>utf8mb4</em> 字符集和大小写不敏感规则.</p>\n<h3 id=\"union-连接子句\"><a class=\"markdownIt-Anchor\" href=\"#union-连接子句\">#</a> <em>UNION</em> 连接子句</h3>\n<p>此操作符用于连接两个以上的 <em>SELECT</em> 语句的结果并去除重复行后组合到一个结果集中.</p>\n<p>每个 <em>UNION</em> 操作符必须由两个或者多个 <em>SELECT</em> 语句组成，每个 <em>SELECT</em> 语句的列数和数据类型必须一致.</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>可选子句，用于指定合并后的结果集的排序顺序.</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<pre><code class=\"language-mysql\">select * from user where id &lt; 2 union select * from user where id &gt; 2;\n</code></pre>\n<p>筛选 <em>user</em> 表中 <em>id</em> 不等于 <em>2</em> 的所有行.</p>\n<h3 id=\"union-all\"><a class=\"markdownIt-Anchor\" href=\"#union-all\">#</a> <em>UNION ALL</em></h3>\n<p>此子句与 <em>UNION</em> 的不同在于展示出来的数据会包含重复数据。</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... FROM table1 WHERE condition1\nUNION ALL\nSELECT column1, column2, ... FROM table2 WHERE condition2\n[ORDER BY column1, column2, ...];\n</code></pre>\n<h3 id=\"order-by-语句\"><a class=\"markdownIt-Anchor\" href=\"#order-by-语句\">#</a> <em>ORDER BY</em> 语句</h3>\n<p>如果想要对读取的数据进行排序，可以使用此子句来设定你想按那个字段那种方式来进行排序，再返回搜索结果。此子句可以按照一个或多个值进行升序 (<em>ASC</em>) 或降序 (<em>DESC</em>) 排序.</p>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名&gt; ORDER BY column1 [ASC | DESC], column2 [ASC | DESC],...;</code></p>\n<p>参数解析：</p>\n<ul>\n<li><code>ORDER BY</code>\n<ul>\n<li>用于指定排序顺序子句，<em>ASC</em> 表示升序（默认），<em>DESC</em> 表示降序.</li>\n</ul>\n</li>\n</ul>\n<p>使用拼音对汉字进行排序，如果使用 <em>gbk</em> 字符集，可以直接排序，如果使用 <em>utf8</em> 字符集，需要对字段进行转码.</p>\n<pre><code class=\"language-mysql\">select * from user order by convert(username using gbk);\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1vcmRlci1ieS5odG1s\">MySQL ORDER BY (排序) 语句 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"join连接\"><a class=\"markdownIt-Anchor\" href=\"#join连接\">#</a> <em>JOIN</em> (连接)</h3>\n<p>可以在 <em>SELECT</em> 、<em>UPDATE</em>、<em>DELETE</em> 语句中使用 JOIN 来联合多表查询.</p>\n<p>JOIN 按照功能大致分为三类：</p>\n<ul>\n<li><code>INNER JOIN</code>\n<ul>\n<li>获取两个表中字段匹配的记录，如果右表中匹配的行有字段为 <em>NULL</em>，则不显示此行.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; INNER JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 简单查询\nselect * from user inner join scores on user.id = scores.id;\n\n# 使用 as 定义别名\nselect u.username,s.chinese,s.mathematics,s.english from user as u inner join scores as s on u.id = s.id;\n\n# 多 inner join 查询\nselect * from user as u \ninner join scores as s on u.id = s.id \ninner join test_table as t on u.id = t.id;\n\n# 使用 where 过滤记录\nselect * from user as u\ninner join scores as s on u.id = s.id\ninner join test_table as t on u.id = t.id\nwhere u.birhdate &gt; '2005-01-01';\n</code></pre>\n<ul>\n<li><code>LEFT JOIN</code>\n<ul>\n<li>返回左表中的所有行，并包括右表中匹配的行，如果右表中匹配的行中没有值，则返回 <em>NULL</em> 值.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,... FROM &lt;表名1&gt; left JOIN &lt;表名2&gt; ON &lt;表名1.字段名&gt; = &lt;表名2.字段名&gt; ...;</code></p>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># left join 的使用方法同 inner join 一样\nselect u.id,u.username,s.mathematics,s.chinese,s.english,t.age from user as u\nleft join scores as s on u.id = s.id\nleft join test_table as t on s.id = t.id;\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1qb2luLmh0bWw=\">MySQL 连接的使用 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"null-处理\"><a class=\"markdownIt-Anchor\" href=\"#null-处理\">#</a> <em>NULL</em> 处理</h3>\n<p><em>MySQL</em> 提供了三个运算符来处理 <em>NULL</em> 值，在 <em>MySQL</em> 中，<em>NULL</em> 值通常表示缺失或未知数据，你不能使用  <code>=</code>  或者  <code>!=</code>  来查找 <em>NULL</em> 值，因为 <em>NULL</em> 值与其他任何值比较都为 <em>NULL</em> .</p>\n<ul>\n<li><code>IS NULL</code>\n<ul>\n<li>当列的值是 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>IS NOT NULL</code>\n<ul>\n<li>当列的值不为 <em>NULL</em>，此运算符返回 <em>true</em> .</li>\n</ul>\n</li>\n<li><code>&lt;=&gt;</code>\n<ul>\n<li>当比较的两个值相等或者都为 <em>NULL</em> 时返回 <em>true</em> .</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\"># 判读 age 字段是否为 NULL\nselect * from test_table as t where t.age is null;\n\n# 判断 age 字段是否不为 NULL\nselect * from test_table as t where t.age is not null;\n\n# 判断 age 字段是否为 NULL，效果同 is 一样\nselect * from test_table as t where t.age &lt;=&gt; null;\n</code></pre>\n<h4 id=\"数据表清洗\"><a class=\"markdownIt-Anchor\" href=\"#数据表清洗\">#</a> 数据表清洗</h4>\n<p>将表中指定的列中所有的 NULL 值替换为  <code>0</code> .</p>\n<pre><code class=\"language-mysql\">select * , ifnull(t.age,0) as age from test_table as t;\n</code></pre>\n<h4 id=\"ifnull-coalesce\"><a class=\"markdownIt-Anchor\" href=\"#ifnull-coalesce\">#</a> IFNULL &amp; COALESCE</h4>\n<p><code>IFNULL</code>  基本语法：</p>\n<p><code>IFNULL(expr1,expr2)</code></p>\n<p><em>ifnull</em> 是常用的用于处理 <em>NULL</em> 值的函数，其基本功能是如果参数 1 为 <em>NULL</em>，则返回参数 2 的值.</p>\n<p><code>COALESCE</code>  基本语法：</p>\n<p><code>COALESCE(value1,value2,...,valueEn)</code></p>\n<p><em>coalesce</em> 可以看做是 <em>ifnull</em> 的增强版，其功能同 <em>ifnull</em> 相同，但是可以接受比 <em>ifnull</em> 更多的参数，如果参数 1 为 <em>NULL</em>，则返回其参数列表中第一个非 <em>NULL</em> 的表达式，如果所有提供的表达式都为 <em>NULL</em>，那么 <em>coalesce</em> 函数将返回 <em>NULL</em>.</p>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1udWxsLmh0bWw=\">MySQL NULL 值处理 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p>MySQL 提供了正则表达式的匹配，用于提供比普通筛选更强大的功能.</p>\n<ul>\n<li><code>REGEXP</code>\n<ul>\n<li>regexp 是用于进行正则匹配的运算符.</li>\n</ul>\n</li>\n</ul>\n<p>基本语法：</p>\n<p><code>SELECT column1,column2,... FROM &lt;表名&gt; WHERE column_name regexp 'pattern'</code></p>\n<pre><code class=\"language-mysql\"># 筛选出以 1 开头的 id\nselect * from user as u where u.id regexp '^[1*]';\n</code></pre>\n<p>更多使用示例请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1yZWdleHAuaHRtbA==\">MySQL 正则表达式 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-2/",
            "title": "MySQL-2",
            "date_published": "2024-05-06T07:12:40.000Z",
            "content_html": "<h2 id=\"mysql-基本操作\"><a class=\"markdownIt-Anchor\" href=\"#mysql-基本操作\">#</a> MySQL 基本操作</h2>\n<h3 id=\"对数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据库操作\">#</a> 对数据库操作</h3>\n<h4 id=\"创建数据库\"><a class=\"markdownIt-Anchor\" href=\"#创建数据库\">#</a> 创建数据库</h4>\n<p><code>CREATE DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法 ( <code>[]</code>  中为可选内容)：</p>\n<pre><code class=\"language-mysql\">CREATE DATABASE [IF NOT EXISTS] &lt;database_name&gt; [DEFAULT CHARSET charset_name] [COLLATE collation_name];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>IF NOT EXISTS</code></p>\n<ul>\n<li>这是一个可选的子句，用来避免因为试图创建已存在的数据库而产生的错误。</li>\n</ul>\n</li>\n<li>\n<p><code>DEFAULT CAHRSET</code></p>\n<ul>\n<li>这部分指定新创建的数据库的默认字符集为指定的字符集，这意味着在这个数据库中的所有表（除非明确指定其他字符集），其默认字符集都会是指定的字符集。</li>\n</ul>\n</li>\n<li>\n<p><code>COLLATE</code></p>\n<ul>\n<li>这部分指定了新创建数据库的默认排序规则为  <code>utf8_general_ci</code> 。排序规则（<em>Collation</em>）影响了字符数据的比较、排序以及唯一性校验的方式。 <code>utf8_general_ci</code>  是一个大小写不敏感的排序规则，适合那些对大小写不敏感的搜索场景，而且它对 <em>Unicode</em> 字符的排序并不是基于精确的语言排序规则，而是采用了一种通用的简单排序策略。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"选择数据库\"><a class=\"markdownIt-Anchor\" href=\"#选择数据库\">#</a> 选择数据库</h4>\n<p>要对一个数据库进行操作，必须先选择该数据库。选择数据库有两种方式。</p>\n<p>一是登录时选择已经创建好的数据库：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token operator\">-</span>D &lt;数据库名> <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p</pre></td></tr></table></figure><p>二是使用  <code>USE</code>  语句选择：</p>\n<pre><code class=\"language-mysql\">use &lt;数据库名&gt;;\n</code></pre>\n<p>使用这种方法语句执行成功后会显示  <code>Database changed</code> 。</p>\n<h4 id=\"删除数据库\"><a class=\"markdownIt-Anchor\" href=\"#删除数据库\">#</a> 删除数据库</h4>\n<p><code>DROP DATABASE &lt;数据库名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP DATABASE [IF EXISTS] &lt;database_name&gt;;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选子句，如果数据库存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对数据表操作\"><a class=\"markdownIt-Anchor\" href=\"#对数据表操作\">#</a> 对数据表操作</h3>\n<p>创建数据表需要 <u>表名</u>、<u>表字段名</u>、<u>每个表字段的数据类型</u>。</p>\n<h4 id=\"创建数据表\"><a class=\"markdownIt-Anchor\" href=\"#创建数据表\">#</a> 创建数据表</h4>\n<pre><code class=\"language-mysql\">CREATE TABLE table_name(\n\tcolumn1 datatype,\n    column2 datatype,\n    ...\n);\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>表名</li>\n</ul>\n</li>\n<li><code>column1</code>\n<ul>\n<li>表的列名</li>\n</ul>\n</li>\n<li><code>datatype</code>\n<ul>\n<li>每个列的数据类型</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-mysql\">create table if not exists users(\\\n    id int unsigned auto_increment,\\\n    username varchar(50) not null,\\\n    birthdate date,\\\n    is_active boolean default true,\\\n    primary key(id,username)\\\n)engine=innodb default charset=utf8;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li>\n<p><code>unsigned</code></p>\n<ul>\n<li>设置字段属性的数据类型为无符号类型。</li>\n</ul>\n</li>\n<li>\n<p><code>auto_increment</code></p>\n<ul>\n<li>此关键字用于创建一个自增长的列，一般用于主键，每当有新的记录插入到表中时，此列数值会自动加 <code>1</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>primary key</code></p>\n<ul>\n<li>此关键字用于定义列为主键，主键用于唯一标识每行数据。可以使用多列来定义主键，列间以逗号 <code>,</code>  分隔。</li>\n</ul>\n</li>\n<li>\n<p><code>default</code></p>\n<ul>\n<li>此关键字用于指定列的默认值约束。当向表中插入新的记录时，如果没有为某个具有  <code>default</code>  约束的列提供具体值，那么 <em>MySQL</em> 将自动赋予该列预先定义好的默认值。</li>\n</ul>\n</li>\n<li>\n<p><code>not null</code></p>\n<ul>\n<li>如果不想字段值为空，可以设置字段属性为  <code>not null</code> 。</li>\n</ul>\n</li>\n<li>\n<p><code>engine=innodb</code></p>\n<ul>\n<li>指定表的存储引擎为  <code>InnoDB</code> 。 <code>InnoDB</code>  引擎支持事务处理和行级锁定。</li>\n</ul>\n</li>\n<li>\n<p><code>default charset=utf8</code></p>\n<ul>\n<li>指定默认的字符集为  <code>utf8</code> 。 <code>charset=utf8</code>  表示表中的所有字符串数据将以 <em>UTF-8</em> 字符集编码进行存储。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除数据表\"><a class=\"markdownIt-Anchor\" href=\"#删除数据表\">#</a> 删除数据表</h4>\n<p><code>DROP TABLE &lt;数据表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DROP TABLE [IF EXISTS] table_name;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>table_name</code>\n<ul>\n<li>是你要删除的数据表的名字</li>\n</ul>\n</li>\n<li><code>IF EXISTS</code>\n<ul>\n<li>可选的子句，数据表存在才执行操作。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看\"><a class=\"markdownIt-Anchor\" href=\"#查看\">#</a> 查看</h3>\n<p>可以使用  <code>show databases;</code>  命令查看所有数据库。</p>\n<p>使用  <code>show tables;</code>  查看选定数据库的所有表。</p>\n<p>使用  <code>desc &lt;表名&gt;;</code>  查看表结构。</p>\n<h2 id=\"增删查改\"><a class=\"markdownIt-Anchor\" href=\"#增删查改\">#</a> 增删查改</h2>\n<h3 id=\"增\"><a class=\"markdownIt-Anchor\" href=\"#增\">#</a> 增</h3>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;(column1, column2, ...)\nVALUES\n\t(value1, value2, ...),\n\t(value1, value2, ...),\n...;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>表中的列名。</li>\n</ul>\n</li>\n<li><code>value1, value2, ...</code>\n<ul>\n<li>要插入的具体数值。</li>\n</ul>\n</li>\n</ul>\n<p>如果数据是字符型，必须使用引号包裹。</p>\n<p>如果需要插入所有的列的数据，可以省略列名：</p>\n<pre><code class=\"language-mysql\">INSERT INTO &lt;表名&gt;\nVALUES(NULL, 1, '张三');\n</code></pre>\n<ul>\n<li><code>NULL</code>\n<ul>\n<li>是用于自增长列的占位符，表示系统会为该列生成一个唯一的值。</li>\n</ul>\n</li>\n</ul>\n<p>在使用  <code>INSERT INTO</code>  插入数据时，如果设置了唯一键并且已经有此条数据，则  <code>SQL</code>  语句将无法执行成功，并会抛出错误 .</p>\n<p>可以使用  <code>INSERT IGNORE INTO</code>  来插入数据，与  <code>INSERT INTO</code>  的区别在于会忽略数据库中已经存在的数据，如果数据库中没有此条数据，则插入新的数据，如果有数据存在就跳过这条数据，这样就可以保留数据库中已经存在的数据，达到在间隙中插入数据的目的。</p>\n<h3 id=\"查\"><a class=\"markdownIt-Anchor\" href=\"#查\">#</a> 查</h3>\n<p><code>SELECT * FROM &lt;表名&gt;;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">SELECT column1, column2, ... \nFROM table_name \n[WHERE condition] \n[ORDER BY column_name [ASC | DESC]]\n[LIMIT number];\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>column1, column2, ...</code>\n<ul>\n<li>你要选择的列的名称，可以使用  <code>*</code>  号表示选择所有列。</li>\n</ul>\n</li>\n<li><code>table_name</code>\n<ul>\n<li>要查询的数据表名称。</li>\n</ul>\n</li>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于指定过滤条件，返回符合条件的行。\n<ul>\n<li><code>select * from user where id &gt; 1;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>ORDER BY column_name [ASC | DESC]]</code>\n<ul>\n<li>可选子句，用于指定结果集的排序顺序，默认升序 (<em>ASC</em>)。\n<ul>\n<li><code>select * from user order by id desc;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>LIMIT number</code>\n<ul>\n<li>可选子句，限定返回的行数。\n<ul>\n<li><code>select * from user limit 2;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>如果你需要过滤重复的数据，可以使用  <code>DISTINCT</code>  关键字来过滤重复的数据。</p>\n<p>基本语法： <code>SELECT DISTINCT &lt;列名&gt; FROM table_name;</code></p>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1zZWxlY3QtcXVlcnkuaHRtbA==\">MySQL 查询数据 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC13aGVyZS1jbGF1c2UuaHRtbA==\">MySQL WHERE 子句 | 菜鸟教程 (runoob.com)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1oYW5kbGluZy1kdXBsaWNhdGVzLmh0bWw=\">MySQL 处理重复数据 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"改\"><a class=\"markdownIt-Anchor\" href=\"#改\">#</a> 改</h3>\n<p><code>UPDATE &lt;表名&gt; SET column1=value1, column2=value2, ...</code> ;</p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">UPDATE &lt;table_name&gt;\nSET column1=value1, column2=value2, ...\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于更新指定的行。省略则更新所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC11cGRhdGUtcXVlcnkuaHRtbA==\">MySQL UPDATE 更新 | 菜鸟教程 (runoob.com)</span></p>\n<h3 id=\"删\"><a class=\"markdownIt-Anchor\" href=\"#删\">#</a> 删</h3>\n<p><code>DELETE FROM &lt;表名&gt; WHERE condition;</code></p>\n<p>基本语法：</p>\n<pre><code class=\"language-mysql\">DELETE FROM table_name\nWHERE condition;\n</code></pre>\n<p>参数解析：</p>\n<ul>\n<li><code>WHERE condition</code>\n<ul>\n<li>可选子句，用于删除指定的行。省略则删除所有的行。</li>\n</ul>\n</li>\n</ul>\n<p>更多使用示例请参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9teXNxbC9teXNxbC1kZWxldGUtcXVlcnkuaHRtbA==\">MySQL DELETE 语句 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "url": "http://yunyat.cloud/MyCodingBook/database/MySQL-1/",
            "title": "MySQL-1",
            "date_published": "2024-05-06T07:09:43.000Z",
            "content_html": "<h3 id=\"mysql-简介\"><a class=\"markdownIt-Anchor\" href=\"#mysql-简介\">#</a> MySQL 简介</h3>\n<p><em>MySQL</em> 是一款广泛使用的关系型数据库管理系统（<em>RDBMS</em>），由瑞典 <em>MySQL AB</em> 公司最初开发，目前隶属于 <em>Oracle</em> 公司。<em>MySQL</em> 以其开源、稳定、高效、可扩展性强等特点而著名，是互联网行业中最为流行的数据库解决方案之一。</p>\n<p><em>MySQL</em> 命令关键字本身是不区分大小写的，但是数据库名、表名、列名、别名等在不同的操作系统下区分大小写的情况有所不同：</p>\n<ul>\n<li>在 <em>Windows</em> 系统下，<em>MySQL</em> 的表名、数据库名等默认是不区分大小写的，这是由于 <code>lower_case_table_names</code>  系统变量默认设置为 1，它会使得 <em>MySQL</em> 在存储和查找表名时统一转换为小写。</li>\n<li>在 <em>Linux</em> 系统和其他大多数 <em>Unix-like</em> 系统中，默认情况下 <em>MySQL</em> 是区分大小写的，也就是说，数据库名、表名等必须准确匹配其创建时的大小写。</li>\n</ul>\n<p>另外，尽管 <em>MySQL</em> 的关键字不区分大小写，但在编写 <em>SQL</em> 语句时，为了提高代码可读性和遵循行业标准，通常建议将 <em>SQL</em> 关键字大写，而标识符（如表名、列名）则根据实际情况保持一致的大小写规则。对于列名和列别名，无论在何种操作系统下，<em>MySQL</em> 内部都是忽略大小写的。不过要注意的是，如果启用了特定的排序规则（<em>collation</em>），即使在不区分大小写的环境中，也可能存在区分大小写的情况，尤其是在涉及到字符串比较时。</p>\n<h3 id=\"mysql-相关术语\"><a class=\"markdownIt-Anchor\" href=\"#mysql-相关术语\">#</a> MySQL 相关术语</h3>\n<ul>\n<li><strong>数据库:</strong> 数据库是一些关联表的集合。</li>\n<li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li>\n<li><strong>列:</strong> 一列 (数据元素) 包含了相同类型的数据，例如邮政编码的数据。</li>\n<li>** 行：** 一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li>\n<li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li>\n<li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li>\n<li>** 外键：** 外键用于关联两个表。</li>\n<li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li>\n<li>** 索引：** 使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li>\n<li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li>\n</ul>\n<h3 id=\"关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库\">#</a> 关系型数据库</h3>\n<p>MySQL 为关系型数据库 (<em>Relational Database Management System</em>), 这种所谓的 &quot;<u>关系型</u>&quot;可以理解为&quot;<u>表格</u>&quot; 的概念，一个关系型数据库由一个或数个表格组成，如图所示的一个表格:</p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2014/03/0921_1.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>表头 (header):</strong> 每一列的名称；</li>\n<li><strong>列 (col):</strong> 具有相同数据类型的数据的集合；</li>\n<li><strong>行 (row):</strong> 每一行用来描述某条记录的具体信息；</li>\n<li><strong>值 (value):</strong> 行的具体信息，每个值必须与该列的数据类型相同；</li>\n<li><strong>键 (key)</strong>: 键的值在当前列中具有唯一性。</li>\n</ul>\n<h3 id=\"mysql-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据类型\">#</a> MySQL 数据类型</h3>\n<p>MySQL 数据类型大致分为五类，<u>数值</u>、<u>日期 \\ 时间</u>、<u>字符串 (字符)</u>、<u>空间类型</u> 和 <em><u>JSON</u></em> 类型，这五大类中又分为许多子类型：</p>\n<h4 id=\"数值类型\"><a class=\"markdownIt-Anchor\" href=\"#数值类型\">#</a> 数值类型</h4>\n<p>这些类型包括严格数值数据类型 (  <code>INTEGER</code> 、 <code>SMALLINT</code> 、 <code>DECIMAL</code>  和  <code>NUMERIC</code>  )，以及近似数值数据类型 (  <code>FLOAT</code> 、 <code>REAL</code>  和  <code>DOUBLE PRECISION</code> )。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>范围（有符号）</th>\n            <th>范围（无符号）</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>TINYINT</td>\n            <td>1 Bytes</td>\n            <td>(-128, 127)</td>\n            <td>(0, 255)</td>\n            <td>小整数值</td>\n        </tr>\n        <tr>\n            <td>SMALLINT</td>\n            <td>2 Bytes</td>\n            <td>(-32 768, 32 767)</td>\n            <td>(0, 65 535)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>MEDIUMINT</td>\n            <td>3 Bytes</td>\n            <td>(-8 388 608, 8 388 607)</td>\n            <td>(0, 16 777 215)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>INT 或 INTEGER</td>\n            <td>4 Bytes</td>\n            <td>(-2 147 483 648, 2 147 483 647)</td>\n            <td>(0, 4 294 967 295)</td>\n            <td>大整数值</td>\n        </tr>\n        <tr>\n            <td>BIGINT</td>\n            <td>8 Bytes</td>\n            <td>(-9 223 372 036 854 775 808, 9 223 372 036 854 775 807)</td>\n            <td>(0, 18 446 744 073 709 551 615)</td>\n            <td>极大整数值</td>\n        </tr>\n        <tr>\n            <td>FLOAT</td>\n            <td>4 Bytes</td>\n            <td>(-3.402 823 466 E+38, -1.175 494 351 E-38), (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>(0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td>\n            <td>单精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DOUBLE</td>\n            <td>8 Bytes</td>\n            <td>(-1.797 693 134 862 315 7 E+308, -2.225 073 858 507 201 4 E-308), (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>(0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td>\n            <td>双精度浮点数值</td>\n        </tr>\n        <tr>\n            <td>DECIMAL</td>\n            <td>对DECIMAL(M,D)，如果M>D，为M+2否则为D+2</td>\n            <td>依赖于M和D的值</td>\n            <td>依赖于M和D的值</td>\n            <td>小数值</td>\n        </tr>\n    </tbody>\n</table>\n<h4 id=\"日期和时间类型\"><a class=\"markdownIt-Anchor\" href=\"#日期和时间类型\">#</a> 日期和时间类型</h4>\n<p>表示时间值的日期和时间类型为  <code>DATETIME</code> 、 <code>DATE</code> 、 <code>TIMESTAMP</code> 、 <code>TIME</code>  和 <code>YEAR</code> 。</p>\n<p>每个时间类型有一个有效值范围和一个 &quot;零&quot; 值，当指定不合法的 <em>MySQL</em> 不能表示的值时使用 &quot;零&quot; 值。</p>\n<table>     <thead>         <tr>             <th>类型</th>             <th>大小</th>             <th>范围</th>             <th>格式</th>             <th>用途</th>         </tr>     </thead>     <tbody>         <tr>             <td>DATE</td>             <td>3 bytes</td>             <td>1000-01-01/9999-12-31</td>             <td>YYYY-MM-DD</td>             <td>日期值</td>         </tr>         <tr>             <td>TIME</td>             <td>3 bytes</td>             <td>'-838:59:59'/'838:59:59'</td>             <td>HH:MM:SS</td>             <td>时间值或持续时间</td>         </tr>         <tr>             <td>YEAR</td>             <td>1 byte</td>             <td>1901/2155</td>             <td>YYYY</td>             <td>年份值</td>         </tr>         <tr>             <td>DATETIME</td>             <td>8 bytes</td>             <td>'1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值</td>         </tr>         <tr>             <td>TIMESTAMP</td>             <td>4 bytes</td>             <td>'1970-01-01 00:00:01' UTC 到 '2038-01-19 03:14:07'UTC <br/>结束时间是第 <b>2147483647</b> 秒，北京时间 <b>2038-1-19 11:14:07</b>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td>             <td>YYYY-MM-DD hh:mm:ss</td>             <td>混合日期和时间值，时间戳</td>         </tr>     </tbody> </table>\n<h4 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\">#</a> 字符串类型</h4>\n<p>字符串类型指  <code>CHAR</code> 、 <code>VARCHAR</code> 、 <code>BINARY</code> 、 <code>VARBINARY</code> 、 <code>BLOB</code> 、 <code>TEXT</code> 、 <code>ENUM</code>  和 <code>SET</code> 。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>\n<table>\n    <thead>\n        <tr>\n            <th>类型</th>\n            <th>大小</th>\n            <th>用途</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>CHAR</td>\n            <td>0-255 bytes</td>\n            <td>定长字符串</td>\n        </tr>\n        <tr>\n            <td>VARCHAR</td>\n            <td>0-65535 bytes</td>\n            <td>变长字符串</td>\n        </tr>\n        <tr>\n            <td>TINYBLOB</td>\n            <td>0-255 bytes</td>\n            <td>不超过 255 个字符的二进制字符串</td>\n        </tr>\n        <tr>\n            <td>TINYTEXT</td>\n            <td>0-255 bytes</td>\n            <td>短文本字符串</td>\n        </tr>\n        <tr>\n            <td>BLOB</td>\n            <td>0-65 535 bytes</td>\n            <td>二进制形式的长文本数据</td>\n        </tr>\n        <tr>\n            <td>TEXT</td>\n            <td>0-65 535 bytes</td>\n            <td>长文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMBLOB</td>\n            <td>0-16 777 215 bytes</td>\n            <td>二进制形式的中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>MEDIUMTEXT</td>\n            <td>0-16 777 215 bytes</td>\n            <td>中等长度文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGBLOB</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>二进制形式的极大文本数据</td>\n        </tr>\n        <tr>\n            <td>LONGTEXT</td>\n            <td>0-4 294 967 295 bytes</td>\n            <td>极大文本数据</td>\n        </tr>\n    </tbody>\n</table>\n- `char(n)` 和 `varchar(n)` 中括号中 `n` 代表字符的个数，并不代表字节个数，比如 `CHAR(30)` 就可以存储 30 个字符。\n<ul>\n<li>\n<p><code>CHAR</code>  和  <code>VARCHAR</code>  类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>\n</li>\n<li>\n<p><code>BINARY</code>   和  <code>VARBINARY</code>  类似于  <code>CHAR</code>  和  <code>VARCHAR</code> ，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>\n</li>\n<li>\n<p><code>BLOB</code>  是一个二进制大对象，可以容纳可变数量的数据。</p>\n<ul>\n<li><code>TINYBLOB</code></li>\n<li><code>BLOB</code></li>\n<li><code>MEDIUMBLOB</code></li>\n<li><code>LONGBLOB</code></li>\n</ul>\n</li>\n<li>\n<p><code>TEXT</code>  是文本对象，同  <code>BLOB</code>  一样，也有四种类型。</p>\n<ul>\n<li><code>TINYTEXT</code></li>\n<li><code>TEXT</code></li>\n<li><code>MEDIUMTEXT</code></li>\n<li><code>LONGTEXT</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"枚举与集合类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举与集合类型\">#</a> 枚举与集合类型</h4>\n<ul>\n<li><code>ENUM</code> ：枚举类型，用于存取单一的值，可以选择一个预定义的集合。</li>\n<li><code>SET</code> ：集合类型，用于存储多个值，可以选择多个预定义的集合。</li>\n</ul>\n<h4 id=\"空间数据类型\"><a class=\"markdownIt-Anchor\" href=\"#空间数据类型\">#</a> 空间数据类型</h4>\n<p><code>GEOMETRY</code> ,  <code>POINT</code> ,  <code>LINESTRING</code> ,  <code>POLYGON</code> ,  <code>MULTIPOINT</code> ,  <code>MULTILINESTRING</code> ,  <code>MULTIPOLYGON</code> ,  <code>GEOMETRYCOLLECTION</code> : 用于存储空间数据（地理信息、几何图形等）。</p>\n<h4 id=\"json-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#json-数据类型\">#</a> JSON 数据类型</h4>\n<p>​\t<em>MySQL</em> 从 <code>5.7.8</code>  版本开始就支持存储原生的 <em>JSON</em> 类型的数据，我们可以 <em>MySQL</em> 中存储 <em>JSON</em> 对象或 <em>JSON</em> 数组。<em>JSON</em> 数据并不是以字符串的形式存储，而是使用一种允许快速读取文本元素的内部二进制格式进行存储的，在 <em>JSON</em> 数据列中插入或者更新的时候将会自动验证 <em>JSON</em> 文本数据是否正确，未通过验证的文本将产生一个错误信息。</p>\n<p>​\t<em>JSON</em> 与 <em>BLOB</em> 和 <em>TEXT</em> 类型一样，设置 <em>JSON</em> 类型的字段时不能设置默认值，其默认值只能为 <em>NULL</em> 。</p>\n<p>​\t<em>JSON</em> 类型的存储长度与  <code>LONGBLOB</code>  、 <code>LONGTEXT</code>  类型长度相同，但是最大长度不能超过 <em>max_allowed_packet</em> 系统变量设置的值。</p>\n<p>​</p>\n<h3 id=\"数据类型的选择\"><a class=\"markdownIt-Anchor\" href=\"#数据类型的选择\">#</a> 数据类型的选择</h3>\n<p>​\t在  <code>MySQL 5.0</code>  及以上的版本里，一个汉字占用的长度跟编码有关，在 <em>UTF-8</em> 编码下，一个汉字占用 3 个字节，<em>GBK</em> 编码下一个汉字占用 2 个字节。</p>\n<p>​\t选择数据类型通常选择更小的，以及更简单的类型，同时应该避免使用 <em>NULL</em> 。 对于经常变化的字段应该使用  <code>varchar</code> ，知道固定长度的用  <code>char</code> ，尽量使用  <code>varchar</code> ，能用  <code>varchar</code>  的地方不用  <code>text</code> ，对于超过 255 字符的只能使用  <code>varchar</code>  或  <code>text</code> 。</p>\n<h3 id=\"外键\"><a class=\"markdownIt-Anchor\" href=\"#外键\">#</a> 外键</h3>\n<p>​\t外键约束是用来在两个表之间建立关系的一种约束，它定义了一个表中的列与另一个表中的列之间的关系。外键约束可以保证数据的完整性和一致性。</p>\n<h4 id=\"级联操作\"><a class=\"markdownIt-Anchor\" href=\"#级联操作\">#</a> 级联操作</h4>\n<p>在添加了外键之后，再删除主表的数据时产生的约束行为，就称之为<u>删除 / 更新</u>行为。具体的行为有以下几种：</p>\n<ul>\n<li><code>no action</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>RESTRICT</code>  一致).</li>\n</ul>\n</li>\n<li><code>restrict</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则不允许删除 / 更新. (默认为此行为，与  <code>NO ACTION</code>  一致).</li>\n</ul>\n</li>\n<li><code>cascade</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则也删除 / 更新外键所在子表中的记录.</li>\n</ul>\n</li>\n<li><code>set null</code>\n<ul>\n<li>当在主表中删除 / 更新对应记录时，首先检查该记录是否有对应的外键，如果有则设置子表中该外键值为  <code>null</code>  (需要允许外键值取  <code>null</code>  ).</li>\n</ul>\n</li>\n<li><code>set default</code>\n<ul>\n<li>主表有变更时，子表将外键列设置为一个默认的值. ( <code>Innodb</code>  不支持)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建外键\"><a class=\"markdownIt-Anchor\" href=\"#创建外键\">#</a> 创建外键</h4>\n<p>创建外键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表时添加外键\nCREATE TABLE 表名(\n    字段名 数据类型,\n    ...\n    FOREIGN key(外键字段名) REFERENCES 主表(主表列名) [外键产生的行为]\n);\n\n# 单独添加外键\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);\n</code></pre>\n<h4 id=\"删除外键\"><a class=\"markdownIt-Anchor\" href=\"#删除外键\">#</a> 删除外键</h4>\n<pre><code class=\"language-mysql\"># 删除外键\nALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\n</code></pre>\n<p>例子：</p>\n<pre><code class=\"language-mysql\"> # 创建从表时添加外键\n create table order_items(\n item_id int auto_increment,\n order_id int unsigned,\n product_name varchar(255),\n quantity int,\n primary key(item_id),\n foreign key(order_id) references orders(order_id) \n on delete cascade on update cascade);\n    \n # 单独添加外键\n alter table scores add constraint fk_id foreign key(id) references user(id);\n \n # 删除外键\n alter table scores drop foreign key fk_id;\n</code></pre>\n<h3 id=\"唯一键\"><a class=\"markdownIt-Anchor\" href=\"#唯一键\">#</a> 唯一键</h3>\n<p>​\t唯一约束是一种完整性约束，用来确保表中某一列或多列的数据具有唯一性，即不允许出现重复的值。唯一约束有以下几条关键特点：</p>\n<ul>\n<li>\n<p><strong>唯一性</strong></p>\n<ul>\n<li>顾名思义，唯一约束强制指定列中的数据必须是唯一的。如果尝试插入重复的值，<em>MySQL</em> 将阻止该操作并返回错误.</li>\n</ul>\n</li>\n<li>\n<p><strong>允许空值</strong></p>\n<ul>\n<li>\n<p>唯一约束可以包含空值 ( <em>NULL</em> )，但是，一个具有唯一约束的列至多只能有一个空值.</p>\n</li>\n<li>\n<blockquote>\n<p>在数据库中，唯一约束允许列中的空值（ <em>NULL</em> ）出现一次的原因是基于空值的特殊性质。在 SQL 中，空值表示 “未知” 或 “不存在” 的数据。由于空值代表的是未知信息，它们在比较时不等于任何值，包括它们自己。这意味着，从逻辑上讲，你不能说一个空值等于另一个空值，因为它们都代表着未知。</p>\n<p>因此，当我们对一个列施加唯一约束时，我们是在说这个列中的每个非空值都必须是唯一的。但是，由于空值之间不能进行比较，我们就不能说它们是 “不唯一” 的。这就是为什么 SQL 标准允许一个具有唯一约束的列可以有一个空值的原因。然而，为了维护数据的完整性和逻辑一致性，大多数数据库系统会限制这样的列至多只能有一个空值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>多个唯一约束</strong></p>\n<ul>\n<li>在一个表中，可以定义多个唯一约束，这使得你可以对不同的列或列组合施加唯一性要求.</li>\n</ul>\n</li>\n<li>\n<p><strong>索引关联</strong></p>\n<ul>\n<li>创建唯一约束时，<em>MySQL</em> 会自动为受约束的列创建一个唯一索引，用于提高查询效率，尤其在执行这些列的查询时.</li>\n</ul>\n</li>\n<li>\n<p><strong>命名约定</strong></p>\n<ul>\n<li>在定义唯一约束时，可以为其指定一个明确的名称，这有助于管理和识别约束。如果不指定名称，<em>MySQL</em> 会自动为其生成一个名称，通常默认为该列的名称.</li>\n</ul>\n</li>\n<li>\n<p><strong>组合唯一约束</strong></p>\n<ul>\n<li>可以为表的多个列一起定义唯一约束，这意味着这一组列的值组合必须唯一，即使单个列的值可能重复。</li>\n</ul>\n</li>\n<li>\n<p><strong>非主键</strong></p>\n<ul>\n<li>尽管唯一约束与主键约束在确保唯一性方面有相似之处，但它不是表的主标识符，一个表可以有多个唯一约束，但主键只有一个。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"添加唯一键\"><a class=\"markdownIt-Anchor\" href=\"#添加唯一键\">#</a> 添加唯一键</h4>\n<p>​\t添加唯一键有两种方法：</p>\n<pre><code class=\"language-mysql\"># 创建表的时候使用 UNIQUE 关键字添加\nCREATE TABLE 表名(\n    字段名 数据类型 [UNIQUE],\n    ...\n);\n\n# 使用 ALTER TABLE 命令添加\nALTER TABLE 表名 ADD CONSTRAINT 约束名称 UNIQUE(列名);\n</code></pre>\n<h4 id=\"删除唯一键\"><a class=\"markdownIt-Anchor\" href=\"#删除唯一键\">#</a> 删除唯一键</h4>\n<pre><code class=\"language-mysql\"># 删除唯一键\nALTER TABLE 表名 DROP CONSTRAINT 唯一键名;\n</code></pre>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "MySQL"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/springboot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "springboot全局异常处理",
            "date_published": "2024-04-23T03:27:04.000Z",
            "content_html": "<h3 id=\"springboot-全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#springboot-全局异常处理\">#</a> <em>SpringBoot</em> 全局异常处理</h3>\n<p>​\t在写程序时总是需要处理某些异常，虽然 Java 提供了自带的异常处理，但是一个完整的项目中可能遇到千奇百怪的异常，这些异常如果都需要我们手动去进行处理，那么代码量会增多不说，程序之间的耦合还会增大不少，这并不符合 “高内聚，低耦合” 的理念。</p>\n<p>​\t<em>Spring</em> 框架提供了 <em>@RestControllerAdvice</em> 注解来处理全局异常，这样可以避免大量的  <code>try catch</code>  ，也方便了异常信息的统一处理和维护。</p>\n<p>注：注解的作用请见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmZ1bi8yMDI0LzA0LzE2L3NwcmluZyVFNSVCQyU4MCVFNSU4RiU5MSVFNiVCMyVBOCVFOCVBNyVBMyVFOSU5QiU4NiVFNSU5MCU4OC8=\">spring 开发注解集合 | 渡世之舟 (zero-li.fun)</span></p>\n<p>示例：</p>\n<p><em>Result</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>GlobalExceptionHandler</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span> <span class=\"token comment\">// 使用 Log4j2 进行日志记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span> <span class=\"token comment\">// 为全局异常处理提供的注解，使得下面的方法能处理所有 Controller 中抛出的异常</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 处理缺少必要请求参数的异常</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param e MissingServletRequestParameterException 异常对象，指示哪个请求参数缺失</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return Result 返回一个错误结果对象，提示缺少必要的请求参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MissingServletRequestParameterException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置 HTTP 响应状态为 400 - Bad Request</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">handleMissingServletRequestParameterException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MissingServletRequestParameterException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缺少必要的请求参数：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缺少必要的请求参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回错误结果</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 处理空指针异常</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param e NullPointerException 异常对象，指示发生空指针的位置</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return Result 返回一个错误结果对象，提示发生了空指针异常</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">,</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 设置 HTTP 响应状态为 500 - Internal Server Error</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">handleNullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空指针异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空指针异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回错误结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot",
                "异常处理"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/springboot%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/",
            "title": "springboot多模块开发",
            "date_published": "2024-04-22T03:50:17.000Z",
            "content_html": "<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>为了解决项目越来越大的问题，使用了多模块开发来使层次更加清晰。</p>\n<p>架构大致如下：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvWf3j.png\" alt=\"springboot多模块开发1\"></p>\n<h3 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>（1）新建  <code>springboot</code>  项目；<br>\n（2）在新建后的  <code>springboot</code>  项目中新建多个  <code>module(模块)</code> ；<br>\n（3）修改  <code>pom</code>  文件以及删除多余的文件及文件夹；<br>\n（4）将原项目的代码放进去；</p>\n<h3 id=\"多模块开发的坑\"><a class=\"markdownIt-Anchor\" href=\"#多模块开发的坑\">#</a> 多模块开发的坑</h3>\n<p>由于第一次使用多模块开发，并不熟练，所以踩了很多坑，这里记录一下</p>\n<ol>\n<li>访问后台接口报 <code>404</code></li>\n</ol>\n<p>​\t访问所有接口都报 404，这是由于 <code>spring</code>  没有扫描到你写的 <code>bean</code>  所导致的，一般来说， <code>spring</code>  容器只会扫描启动类所在的包以及其下的子包中的所有类，但是开发不会将所有的模块都放在一个包下面，所以如果你 <code>service</code> 、 <code>dao</code>  等模块放在了启动类所在的包之外，那么 <code>spring</code>  就不会去扫描注册这些 <code>bean</code></p>\n<p>​\t解决方法是在启动类的 <code>@SpringBootApplication</code>  注解上面加上 <code>scanBasePackages=&#123;&quot;xxx.xxxxx.*&quot;&#125;</code></p>\n<p>​\t <code>xxx.xxxxx</code>  是你所共有的包，就比如说我所有的模块都是以  <code>com.example.xxx</code>  开始。</p>\n<p>​\t如：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFvfnqP.png\" alt=\"springboot多模块开发2\"></p>\n<p>​\t要查看  <code>spring</code>  有没有注册你的  <code>bean</code>  可以到服务的  <code>Actuator</code>  中查看</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/15/pFv5css.png\" alt=\"springboot多模块开发3\"></p>\n<ol start=\"2\">\n<li>\n<p><code>springboot</code>  多模块的 <code>@Resource</code> 、 <code>@Autowired</code>  注入为 <code>NULL</code></p>\n<p>方法一：</p>\n</li>\n</ol>\n<p>​\t导致注入失败的原因是因为使用了  <code>new</code>  去使用这个方法，只需要将此类自动注入即可解决问题</p>\n<p>报错的代码:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改之后的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    getStudent studentInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t方法二：</p>\n<p>​\t封装一个  <code>StaticMethodGetBean</code>  的类，此类实现了  <code>ApplicationContextAware</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Spring 应用上下文，用于访问应用上下文中的 bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 设置应用上下文。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param applicationContext Spring 应用上下文实例</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 通过类类型获取应用上下文中的 bean。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param clazz 要获取的 bean 的类类型</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return 返回 bean 的实例，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param &lt;T> bean 的类型</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 尝试获取 bean 实例，如果不存在则返回 null</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在要使用的地方直接调用  <code>getBean</code>  方法获取即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> studentInformation <span class=\"token operator\">=</span> <span class=\"token class-name\">StaticMethodGetBean</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>getStudent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>studentInformation<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmd5aWZhbjAvYXJ0aWNsZS9kZXRhaWxzLzEzMDU3MDA1MQ==\">SpringBoot 简单多模块构建_springboot 创建多模块项目</span></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/Tools/Spring-ResponseEntity/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/Tools/Spring-ResponseEntity/",
            "title": "Spring-ResponseEntity",
            "date_published": "2024-04-22T03:39:54.000Z",
            "content_html": "<h3 id=\"responseentity\"><a class=\"markdownIt-Anchor\" href=\"#responseentity\">#</a> <em>ResponseEntity</em></h3>\n<p><em>ResponseEntity</em> 是 <em>Spring Web MVC</em> 框架中提供的一个类，用于封装 <em>HTTP</em> 响应的详细信息。它允许开发者不仅定义返回给客户端的数据（通常作为请求处理的结果），还能够控制响应的状态码、头部信息以及主体内容的类型。</p>\n<h4 id=\"主要属性和功能\"><a class=\"markdownIt-Anchor\" href=\"#主要属性和功能\">#</a> 主要属性和功能：</h4>\n<ol>\n<li><em>HTTP</em> 状态码（<em>HttpStatus</em>）：通过指定一个 <em>HttpStatus</em> 枚举值（如 <code>OK</code> ,  <code>CREATED</code> ,  <code>BAD_REQUEST</code> ,  <code>NOT_FOUND</code> , 等），可以明确设置响应的状态码，以表明请求的处理结果是成功还是存在某种错误。</li>\n<li><em>HTTP</em> 头部（<em>HttpHeaders</em>）：可以通过 <em>ResponseEntity</em> 构造器或其 <em>headers</em> () 方法来设置或修改响应的头部字段，如  <code>Content-Type</code> 、 <code>Cache-Control</code> 、 <code>Location</code>  等，以便控制客户端如何解析响应内容、缓存策略、重定向位置等。</li>\n<li>响应主体（<em>body</em>）：<em>ResponseEntity</em> 的主体可以承载任何类型的数据，如字符串、 <code>JSON</code>  对象、 <code>XML</code>  文档、自定义 <code>Java</code>  对象等。这些数据将作为 <code>HTTP</code>  响应的正文发送给客户端。主体类型可以与 <code>Content-Type</code>  头部字段对应，确保客户端能正确解析。</li>\n</ol>\n<p>典型用法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 处理所有未被其他异常处理器捕获的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param e 抛出的异常对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回一个包含错误信息的 ResponseEntity 对象，状态码为 500（内部服务器错误）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统异常：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 构建响应体，包含错误状态码、自定义错误信息和异常信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERNAL_SERVER_ERROR</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span>httpheaders <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 设置响应头内容类型为 JSON</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">// 这里硬编码了 access-token，实际应用中应根据需求设置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    httpheaders<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 将错误信息封装成 JSON 格式作为响应体的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"系统异常\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/04/22/pkpf0zD.png\" alt=\"headers\"></p>\n<p>从 <em>ResponseEntity</em> 类的源码中可以看到，<em>headers</em> 方法返回的是 <em>this</em> 也就是类本身，所以可以进行链式调用</p>\n<p>而 <em>headers</em> 方法接收一个  <code>Consumer&lt;HttpHeaders&gt;</code>  类型的参数  <code>headersConsumer</code> ，该参数是一个函数接口，使用 <em>lambda</em> 表达式进行了匿名实现</p>\n<p>更多用法请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmdkb2MuY24vc3ByaW5nLXJlc3BvbnNlLWVudGl0eS8=\">使用 Spring ResponseEntity 处理 HTTP 响应 - spring 中文网 (springdoc.cn)</span></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring",
                "ResponseEntity"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringMVC/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringMVC/",
            "title": "SpringMVC",
            "date_published": "2024-04-16T04:09:09.000Z",
            "content_html": "<h3 id=\"spring-mvc原理\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc原理\">#</a> Spring MVC 原理</h3>\n<h4 id=\"spring-mvc工作原理图\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc工作原理图\">#</a>  <code>Spring MVC工作原理图</code></h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/17/pFxTxC6.png\" alt=\"img\"></p>\n<blockquote>\n<p>在没有使用 SpringMVC 之前我们都是使用 Servlet 在做 Web 开发。但是使用 Servlet 开发在接收请求参数，数据共享，页面跳转等操作相对比较复杂。servlet 是 java 进行 web 开发的标准，既然 springMVC 是对 servlet 的封装，那么很显然<strong> SpringMVC 底层就是 Servlet，SpringMVC 就是对 Servlet 进行深层次的封装</strong></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDA3MjM1ODE=\">SpringMVC【入门篇】 - 知乎 (zhihu.com)</span></p>\n</blockquote>\n</blockquote>\n<h3 id=\"mvc模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc模式\">#</a> MVC 模式</h3>\n<p>MVC 模式 ( <code>Model</code> - <code>View</code> - <code>Controller</code> )：解决页面代码和后台代码的分离</p>\n<p>MVC 分别是：模型 <code>model(javabean)</code> 、视图 <code>view(jsp/img)</code> 、控制器 <code>Controller(Action/servlet)</code> 。</p>\n<p>C 存在的目的就是为了保证 M 和 V 的一致性，当 M 发生改变时，C 可以把 M 中的新内容更新到 V 中</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springmvc"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/Spring%E5%9F%BA%E7%A1%80/",
            "title": "SpringFramework基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"spring-spring-mvc-spring-boot-spring-cloud\"><a class=\"markdownIt-Anchor\" href=\"#spring-spring-mvc-spring-boot-spring-cloud\">#</a> Spring、Spring MVC、Spring Boot、Spring Cloud</h3>\n<blockquote>\n<ol>\n<li><strong>Spring</strong>：\n<ul>\n<li><code>Spring</code>  是一个轻量级的<strong>控制反转 ( <code>IoC</code> )</strong> 和<strong>面向切面 ( <code>AOP</code> )</strong> 的容器框架。</li>\n<li>它使你能够编写更干净、更可管理、并且更易于测试的代码。</li>\n<li><code>Spring</code>  提供了基础功能，适用于开发  <code>WEB</code>  层、业务层、持久层等多个方面。</li>\n</ul>\n</li>\n<li><strong>Spring MVC</strong>：\n<ul>\n<li><code>Spring MVC</code>  是  <code>Spring</code>  的一个模块，是一个<strong> Web 框架</strong>。</li>\n<li>通过  <code>Dispatcher Servlet</code> 、 <code>ModelAndView</code>  和  <code>View Resolver</code> ，它使得开发  <code>Web</code>  应用变得很容易。</li>\n<li>主要针对网站应用程序或者服务开发，处理 URL 路由、 <code>Session</code> 、模板引擎、静态  <code>Web</code>  资源等。</li>\n</ul>\n</li>\n<li><strong>Spring Boot</strong>：\n<ul>\n<li><code>Spring Boot</code>  是为简化  <code>Spring</code>  配置的<strong>快速开发整合包</strong>。</li>\n<li>它约定优于配置，简化了  <code>Spring</code>  的配置流程。</li>\n<li>更专注于开发<strong>微服务后台接口</strong>，不涉及前端视图。</li>\n</ul>\n</li>\n<li><strong>Spring Cloud</strong>：\n<ul>\n<li><code>Spring Cloud</code>  构建于  <code>Spring Boot</code>  之上，是一个关注全局的<strong>服务治理框架</strong>。</li>\n<li>它用于整合和管理多个  <code>Spring Boot</code>  单体微服务。</li>\n<li><code>Spring Cloud</code>  依赖于  <code>Spring Boot</code>  开发，但  <code>Spring Boot</code>  可以独立开发。</li>\n</ul>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li>Spring 是核心，提供了基础功能。</li>\n<li>Spring MVC 是基于 Spring 的一个 MVC 框架。</li>\n<li>Spring Boot 是为简化 Spring 配置的快速开发整合包。</li>\n<li>Spring Cloud 是构建在 Spring Boot 之上的服务治理框架。</li>\n</ul>\n</blockquote>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p><code>spring</code>  是一个专注于  <code>Java EE</code>  开发的框架，它会使我们编写出来的  <code>Java</code>  程序 更快，更容易，更安全。</p>\n<h3 id=\"spring的分层架构设计模式\"><a class=\"markdownIt-Anchor\" href=\"#spring的分层架构设计模式\">#</a> Spring 的分层架构设计模式</h3>\n<ol>\n<li>\n<p><strong>表示层（Controller 层）</strong>：</p>\n<ul>\n<li>表示层是 Web 应用的入口，负责接收 HTTP 请求并处理。</li>\n<li>在 Spring 中，它提供了与 Spring MVC 和 Struts2 等框架的整合。</li>\n<li>控制器层处理用户请求，协调业务逻辑层和持久层之间的交互。</li>\n</ul>\n</li>\n<li>\n<p><strong>服务层（Service 层）</strong>：</p>\n<ul>\n<li>也称为业务逻辑层，负责处理业务逻辑，与项目需求紧密相关。</li>\n<li>在 Spring 中，可以管理事务、记录日志等。</li>\n<li>服务层通过调用持久层的方法来操作数据，对外提供接口。</li>\n</ul>\n</li>\n<li>\n<p><strong>持久层（DAO 层）</strong>：</p>\n<ul>\n<li>也被称为数据访问层，负责将数据持久化到数据库中。</li>\n<li>基本上，它主要用于数据库的增删改查操作。</li>\n<li>DAO 层是一个接口，具体的实现在 Mapper.xml 或者其他地方。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"声明组件扫描器\"><a class=\"markdownIt-Anchor\" href=\"#声明组件扫描器\">#</a> 声明组件扫描器</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>你要扫描的包名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h3 id=\"spring-相关网站\"><a class=\"markdownIt-Anchor\" href=\"#spring-相关网站\">#</a>  <code>Spring</code>  相关网站</h3>\n<ul>\n<li><code>Spring MVC API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvY3VycmVudC9qYXZhZG9jLWFwaS8=\">Overview (Spring Framework 6.1.5 API)</span></li>\n</ul>\n</li>\n<li><code>Spring Boot API</code>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvYXBpLw==\">Overview (Spring Boot 3.2.4 API)</span></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "spring"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/SpringBoot%E5%9F%BA%E7%A1%80/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/SpringBoot/SpringBoot%E5%9F%BA%E7%A1%80/",
            "title": "SpringBoot基础",
            "date_published": "2024-04-16T04:03:49.000Z",
            "content_html": "<h3 id=\"springboot-简介\"><a class=\"markdownIt-Anchor\" href=\"#springboot-简介\">#</a> <em>Springboot</em> 简介</h3>\n<blockquote>\n<blockquote>\n<p>​\t<em>Spring Boot</em> 是由<em> Pivotal</em> 团队提供的全新框架，其设计目的是用来简化新<em> Spring</em> 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，<em>Spring Boot</em> 致力于在蓬勃发展的快速应用开发领域 (<em>rapid application development</em>) 成为领导者。</p>\n</blockquote>\n<p>引用自百度百科</p>\n</blockquote>\n<p>总结：使用 <em>springboot</em> 可以很快的创建一个<em> springweb</em> 项目，极大的简化<em> spring</em> 的配置，让你专注于后端开发而不用关心繁琐的配置。</p>\n<h3 id=\"springboot-项目结构\"><a class=\"markdownIt-Anchor\" href=\"#springboot-项目结构\">#</a> <em>Springboot</em> 项目结构</h3>\n<ul>\n<li><em>resources</em> 资源文件夹\n<ul>\n<li><em>static</em> 保存所有静态资源（<em>js、css、images</em> 等）</li>\n<li><em>templates</em> 保存所有模板页面</li>\n<li><em>application.properties</em> 文件，用来编写一些服务器配置文件。但是更推荐使用 <em>yaml</em> 后缀来配置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jsr303-校验\"><a class=\"markdownIt-Anchor\" href=\"#jsr303-校验\">#</a> <em>JSR303</em> 校验</h3>\n<p>使用 <em>JSR303</em> 校验可以很轻松的在后端完成数据校验工作，只需要在要校验的实体类上加入相应的注解即可。</p>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>空检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Null</td>\n        <td>验证对象是否为null</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotNull</td>\n        <td>验证对象是否不为null，无法检查长度为0的字符串</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotBlank</td>\n        <td>检查约束字符串是不是Null还有被Trim的长度是否大于0，只对字符串，且会去掉前后空格</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@NotEmpty</td>\n        <td>检查约束元素是否为Null或者是EMPTY</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>Booelan检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertTrue</td>\n        <td>验证Boolean对象是否为true</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@AssertFalse</td>\n        <td>验证Boolean对象是否为false</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>长度检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Size(min=,max=)</td>\n        <td>验证对象(Array,Collection,Map,String)大小是否在给定范围之内</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Length(min=,max=)</td>\n        <td>验证对象的长度是否在给定范围内</td>\n    </tr>\n</table>\n<table>\n    <tr align=\"center\">\n        <th colspan=\"2\"><b>日期检查</b></th>\n    </tr>\n    <tr align=\"center\">\n        <td><b>注解</b></td>\n        <td><b>说明</b></td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Past</td>\n        <td>验证Date和Calendar对象是否在当前时间之前</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Future</td>\n        <td>验证Date和Calendar对象是否在当前时间之后</td>\n    </tr>\n    <tr align=\"center\">\n        <td>@Pattern</td>\n        <td>验证String对象是否符合正则表达式的规则</td>\n    </tr>\n</table>\n<p>除了上面的注解标签，还可以自定义数据校验规则</p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "java",
                "springboot"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/JavaWeb/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/JavaWeb/",
            "title": "JavaWeb",
            "date_published": "2024-04-16T03:46:44.000Z",
            "content_html": "<h3 id=\"域\"><a class=\"markdownIt-Anchor\" href=\"#域\">#</a> 域</h3>\n<ul>\n<li>\n<p>域是类的属性或数据成员，用于表示对象的特征或属性。</p>\n</li>\n<li>\n<p>它可以包括各种数据类型，可以是一个类变量，一个对象变量，一个对象方法变量或者是一个函数的参数。</p>\n</li>\n</ul>\n<h4 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h4>\n<ul>\n<li>域存储对象的状态信息，使得我们可以在对象内部访问和操作这些数据。</li>\n<li>通过域，我们可以描述对象的特性，例如一个人的姓名、年龄、工资等。</li>\n</ul>\n<h4 id=\"域对象\"><a class=\"markdownIt-Anchor\" href=\"#域对象\">#</a> 域对象</h4>\n<p>域对象是一种在  <code>Java Web</code>  应用中用于存储数据的容器。它们可以在不同的  <code>Servlet</code>  之间共享数据，以便在整个应用程序生命周期内保持数据的一致性。域对象主要包括以下三种：</p>\n<ol>\n<li><strong>请求域（Request 域）</strong>：请求域是一种用于在同一次 <em>HTTP</em> 请求处理周期内共享数据的域对象。数据存储在请求对象中，只在当前请求内有效。</li>\n<li><strong>会话域（Session 域）</strong>：会话域是一种用于在整个用户会话周期内共享数据的域对象。数据存储在会话对象中，可在用户登录后的多次请求之间共享。</li>\n<li><strong>应用域（Application 域）</strong>：应用域是一种用于在整个 <em>Web</em> 应用程序周期内共享数据的域对象。数据存储在  <code>ServletContext</code>  对象中，可被整个应用程序的所有  <code>Servlet</code>  共享。</li>\n</ol>\n<p>具体参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMzUyNzEz\">【Java 进阶篇】在 Java Web 应用中实现请求数据的共享：域对象详解</span></p>\n<h3 id=\"servlet\"><a class=\"markdownIt-Anchor\" href=\"#servlet\">#</a>  <code>Servlet</code></h3>\n<h4 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h4>\n<blockquote>\n<p><code>Servlet</code> （Server Applet），全称  <code>Java Servlet</code> ，未有中文译文。是用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSmF2YQ==\"> Java</span> 编写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\">服务器</span>端<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUE4JThCJUU1JUJBJThG\">程序</span>。其主要功能在于交互式地浏览和修改数据，生成动态<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2Vi\"> Web</span> 内容。狭义的  <code>Servlet</code>  是指 Java 语言实现的一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JThFJUE1JUU1JThGJUEz\">接口</span>，广义的  <code>Servlet</code>  是指任何实现了这个  <code>Servlet</code>  接口的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUIxJUJCXyglRTglQUUlQTElRTclQUUlOTclRTYlOUMlQkElRTclQTclOTElRTUlQUQlQTYp\">类</span>，一般情况下，人们将  <code>Servlet</code>  理解为后者。</p>\n</blockquote>\n<blockquote>\n<p><code>Servlet</code>  运行于支持 Java 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJBJTk0JUU3JTk0JUE4JUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\">应用服务器</span>中。从实现上讲， <code>Servlet</code>  可以响应任何类型的请求，但绝大多数情况下  <code>Servlet</code>  只用来扩展基于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvSFRUUA==\"> HTTP</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThEJThGJUU4JUFFJUFF\"> 协议</span>的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvV2ViJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\"> Web 服务器</span>。</p>\n<blockquote>\n<p>引用自： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5L2FydGljbGUvZGV0YWlscy84MDI5MjExMA==\">JavaWeb——Servlet（全网最详细教程包括 Servlet 源码分析）</span></p>\n</blockquote>\n</blockquote>\n<h4 id=\"servlet-和-controller-的区别\"><a class=\"markdownIt-Anchor\" href=\"#servlet-和-controller-的区别\">#</a>  <code>servlet</code>  和  <code>controller</code>  的区别</h4>\n<blockquote>\n<p><code>web</code>  应用程序开发人员通常编写 <code>servlet</code>  来处理请求，但是，当要使用  <code>Servlet</code>  完成复杂的功能时，需要编写多个  <code>Servlet</code>  类，并且在  <code>web.xml</code>  进行注册，这对于完成复杂的  <code>Web</code>  应用，代码编写会变得很复杂，开发成本也会很高。所以  <code>Spring</code>  提供了强大的  <code>Web</code>  开发框架 <code> Spring MVC：Spring MVC</code>  是  <code>Spring</code>  产品的一部分， <code>Spring MVC</code>  是一个模型 - 视图 - 控制器的  <code>Web</code>  框架，建立在前端控制器  <code>servlet（DispatcherServlet）</code> ，它负责发送每个请求到合适的处理程序，使用视图来返回响应结果。</p>\n<blockquote>\n<p>引用自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTMwNzk2L2FydGljbGUvZGV0YWlscy8xMjcwNzg1NjI=\">【SpringBoot】controller 与 servlet 区别_servlet 和 controller 的区别</span></p>\n</blockquote>\n</blockquote>\n<p><em>controller</em> 是 <em>spring</em> 中的一个普通的 <em>bean</em> , 通过将请求发送到前端控制器然后经过一系列流程到达合适的 <em>controller</em> 并执行 <em>controller</em> 中的代码，使用 <em>springmvc</em> 可以很轻松的完成处理请求的工作</p>\n<p><em>springmvc</em> 可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvLWxpLmZ1bi8yMDI0LzA0LzE2L1NwcmluZ01WQy8=\">SpringMVC | 渡世之舟 (zero-li.fun)</span></p>\n<h3 id=\"上下文\"><a class=\"markdownIt-Anchor\" href=\"#上下文\">#</a> 上下文</h3>\n<blockquote>\n<p><strong>上下文代表了程序当下所运行的环境，联系你整个  <code>app(应用程序)</code>  的生命周期与资源调用，是程序可以访问到的所有资源的总和，资源可以是一个变量，也可以是一个对象的引用。</strong></p>\n</blockquote>\n<blockquote>\n<p>文章上下文，整片文章的语义。应用上下文，应用的语义 —— 运行时的环境</p>\n</blockquote>\n<p>由上可知，上下文就是整个文章语义环境，是应用程序当前所有能访问的资源的集合。</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NDc1MzQ3Nw==\">到底什么是应用上下文？</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTA2MjkyOTA=\">计算机编程中的上下文（Context）到底是什么？从理解到实践</span></p>\n<h3 id=\"过滤器\"><a class=\"markdownIt-Anchor\" href=\"#过滤器\">#</a> 过滤器</h3>\n<p>顾名思义，过滤一些不符合要求的请求。</p>\n<p>使用过滤器需要实现  <code>Filter</code>  接口，该接口中有三个方法需要实现</p>\n<ul>\n<li><code>init</code> ：\n<ul>\n<li>在容器创建当前过滤器的时候调用</li>\n</ul>\n</li>\n<li><code>doFilter</code> ：\n<ul>\n<li>过滤器的具体过滤规则</li>\n</ul>\n</li>\n<li><code>destroy</code> ：\n<ul>\n<li>在容器中销毁当前过滤器的时候调用</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<p><em>AllFilter</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AllFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 过滤器的初始化方法。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param filterConfig 过滤器配置对象，提供了配置信息。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @throws ServletException 如果初始化过程中出现异常，则抛出 ServletException。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化AllFilter过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 过滤器的核心方法，用于拦截请求并进行处理。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 如果请求来自本机，则放行；否则，返回 403 禁止访问。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param servletRequest  代表客户端的请求</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param servletResponse 用于向客户端发送响应</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param filterChain     过滤器链，用于将请求传递给下一个过滤器或 servlet</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @throws IOException      如果发生输入 / 输出错误</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @throws ServletException 如果处理请求时发生异常</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllFilter过滤器开始工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取客户端 IP 地址</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> servletRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 判断 IP 是否为本机，是则放行，否则返回 403 错误</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0:0:0:0:0:0:0:1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 设置响应编码和类型，写入禁止访问的消息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            servletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;\\\"code\\\":\\\"403\\\",\\\"msg\\\":\\\"非本机IP，禁止访问\\\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; 非本机IP，禁止访问\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AllFilter过滤器结束工作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 过滤器的销毁方法，用于执行过滤器的清理工作。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁AllFilter过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>LoginFilter</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 定义需要过滤的 URL 地址数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"/login.html\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 过滤器初始化方法。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 该方法在过滤器实例化后立即调用，用于执行过滤器的初始化逻辑。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param filterConfig 过滤器配置对象，提供了配置文件中定义的过滤器参数。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @throws ServletException 如果初始化过程中出现 Servlet 相关异常，则抛出。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始化login过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 执行过滤逻辑的方法。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 该方法会在每个请求到达时被调用，用于判断请求是否需要进行过滤处理。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param servletRequest 客户端请求对象，包含了客户端发送的请求信息。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param servletResponse 用于向客户端发送响应的对象。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param filterChain 过滤器链对象，用于将请求传递给下一个过滤器或 servlet。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @throws IOException 如果处理请求或响应时发生 IO 异常，则抛出。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @throws ServletException 如果处理请求或响应时发生 Servlet 相关异常，则抛出。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login过滤器开始执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 URL 数组转换为 List 方便后续操作</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">var</span> httpServletRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> servletRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> httpServletRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取请求的完整 URL</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">String</span> regex <span class=\"token operator\">=</span> <span class=\"token string\">\"/[^/]+\\\\.html$\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义匹配 HTML 文件的正则表达式</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译正则表达式为 Pattern 对象</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">var</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Matcher 对象用于匹配 URL</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果 URL 中存在匹配的部分</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 检查是否为需要过滤的 URL</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 继续过滤链</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问路径错误 &#123;&#125;\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录非法访问尝试</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login过滤器执行结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 过滤器销毁方法。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 该方法在应用停止时调用，用于执行过滤器的销毁逻辑，释放资源。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销毁login过滤器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果需要过滤指定的请求，需要在配置类中添加一个 <code>Bean</code></p>\n<p><em>FilterConfig</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 标识为配置类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AllFilter</span> allFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注入 AllFilter 实例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LoginFilter</span> loginFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注入 LoginFilter 实例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 配置 AllFilter 的注册信息。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return FilterRegistrationBean&lt;AllFilter> 返回 AllFilter 的注册 bean 配置。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AllFilter</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">allFilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AllFilter</span><span class=\"token punctuation\">></span></span> allFilterBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>allFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的 URL 模式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        allFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的执行顺序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> allFilterBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 配置 LoginFilter 的注册信息。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @return FilterRegistrationBean&lt;LoginFilter> 返回 LoginFilter 的注册 bean 配置。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginFilter</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loginFilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginFilter</span><span class=\"token punctuation\">></span></span> loginFilterBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>loginFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器实例</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">addUrlPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的 URL 模式</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loginFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        loginFilterBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置过滤器的执行顺序</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> loginFilterBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>allFilterRegistrationBean</code>  过滤所有请求， <code>loginFilterRegistrationBean()</code>  过滤所有以 <code>.html</code>  结尾的请求</p>\n<h3 id=\"拦截器\"><a class=\"markdownIt-Anchor\" href=\"#拦截器\">#</a> 拦截器</h3>\n<h3 id=\"监听器\"><a class=\"markdownIt-Anchor\" href=\"#监听器\">#</a> 监听器</h3>\n<ol>\n<li><code>ServletContextListener（上下文监听器）</code> ：用于监听  <code>Web</code>  应用程序的启动和关闭事件。当 <code>ServletContext</code>  对象创建或销毁时，可以执行相应的操作。</li>\n<li><code>HttpSessionListener（会话监听器）</code> ：监听会话的创建和销毁事件。这对于跟踪在线用户、管理用户会话状态非常有用。</li>\n<li><code>ServletRequestListener（请求监听器）</code> ：监听请求的创建和销毁事件。可以用于记录请求信息、初始化数据等。</li>\n</ol>\n<p>在  <code>Spring</code>  框架中，也有一些特定的事件监听器：</p>\n<ol>\n<li><code>ApplicationListener</code> ： <code>Spring</code>  提供的通用事件监听器接口。您可以自定义事件，继承 <code>ApplicationEvent</code>  类，并实现 <code>ApplicationListener</code>  接口来处理这些事件。例如，您可以监听自定义事件，如用户登录、订单创建等，以执行相应的业务逻辑。</li>\n<li><code>Spring Boot中的事件监听器</code> ： <code>Spring Boot</code>  继承了  <code>Spring</code>  的事件监听机制。您可以使用 <code>@EventListener</code>  注解来定义事件监听方法，将其与特定事件关联。例如，监听应用启动事件、数据库连接池初始化等。</li>\n</ol>\n<p>参考文章：</p>\n<p><a href=\"https://developer.aliyun.com/article/688320\">spring 监听器 Listener - 阿里云开发者社区 (  <code>aliyun.com</code>  )</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/145927110\">深入浅出  <code>Spring/SpringBoot</code>  事件监听机制 - 知乎 (  <code>zhihu.com</code>  )</a></p>\n<p><em>Controller</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span> <span class=\"token comment\">// 定义一个 RESTful 控制器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 GetStudent 服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">GetStudent</span> getstudent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于获取学生信息的服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 处理 GET 请求，获取学生信息。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return JsonResult&lt;String> 包含学生信息的 JSON 结果，其中数据类型为 String。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/GetStudent\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 调用 getStudent 服务，将结果封装在 JsonResult 中返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>getstudent<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>getStudent</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 标示一个 Spring 框架的服务组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetStudent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 ApplicationContext 对象，用于访问 Spring 应用上下文</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span> <span class=\"token comment\">// 注入 Student 对象，该对象将被用于演示事件发布时的数据载体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 获取并设置学生信息，然后发布一个学生信息更新的事件。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @return 返回设置好的学生信息字符串。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 设置学生的基本信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">setStudentNumber</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20240001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 发布一个自定义事件，通知其他监听器学生信息已更新</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 返回学生信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>Event:</em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * TestEvent 类扩展了 ApplicationEvent 用于表示一个测试事件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 这个类主要用于事件驱动的架构中，用来传递与学生相关的事件信息。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 学生信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 构造函数，用于创建一个 TestEvent 实例。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param source 事件的来源对象。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param student 发生事件的学生信息。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类构造函数，设置事件来源</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>student <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置事件相关的学生信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>EventListener</em>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 测试事件监听器类，用于监听 TestEvent 事件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 使用 Log4j2 进行日志记录，并组件化以便于 Spring 容器管理。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Log4j2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestEventListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestEvent</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 当监听到 TestEvent 事件时，处理该事件。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param event 发生的 TestEvent 事件，包含需要处理的学生信息。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从事件中获取学生信息，并记录到日志中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> student <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"信息：&#123;&#125;\"</span><span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的例子中使用了监听器监听了自定义事件。首先，请求到达控制器，控制器获取学生信息，在学生信息类中发布一个自定义事件，然后监听器会捕获此事件并执行你自定义的事件内容</p>\n<hr>\n<p><code>Servlet API</code>  中文 Doc：<a href=\"https://www.cnblogs.com/haimishasha/p/5609261.html#autoid-3-4-0\">  <code>Java Servlet API</code>  中文说明文档 - 海米傻傻 - 博客园 (  <code>cnblogs.com</code>  )</a></p>\n<p>官方  <code>Servlet API</code>  Doc：<a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html\">  <code>ServletRequest</code>  (Java™ EE 7 Specification APIs) (  <code>oracle.com</code>  )</a></p>\n<h3 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> <em>Cookie</em></h3>\n<blockquote>\n<p><em>Cookie</em>，有时也用其复数形式 <em>Cookies</em>。类型为 “<strong>小型文本文件</strong>”，是某些网站为了辨别用户身份，进行 <a href=\"https://baike.baidu.com/item/Session/479100?fromModule=lemma_inlink\"><em>Session</em></a> 跟踪而储存在用户本地终端上的数据（通常经过加密），由用户<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYvMTAxMDgxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">客户端</span>计算机暂时或永久保存的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYvMTExMTYzP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r\">信息</span> 。</p>\n<blockquote>\n<p>引用自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9jb29raWUvMTExOSNyZWZlcmVuY2UtJTVCMyU1RC01MDYyMzMyLXdyYXA=\">百度百科</span></p>\n</blockquote>\n</blockquote>\n<p>​\t使用 <em>cookie</em> 就可以使浏览器保存一些用户信息，来达到某些特定目的，比如打开网站在一定时间内不需要重复登录，或者使我们登录时可以自动填充账号密码等。</p>\n<p>​\t一般情况下，<em>cookie</em> 是以键值对的形式表示的 <code>(key=value)</code></p>\n<h4 id=\"cookie-常用属性\"><a class=\"markdownIt-Anchor\" href=\"#cookie-常用属性\">#</a> <em>cookie</em> 常用属性</h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjt5fe.png\" alt=\"cookie1\"></p>\n<ul>\n<li>\n<p><em>Path</em>：该属性定义了 <em>Web</em> 站点上可以访问此 <em>Cookie</em> 的目录</p>\n</li>\n<li>\n<p><em>Expires</em>：该属性表示 <em>Cookie</em> 的过期时间，也就是有效值，此 <em>Cookie</em> 在这个值之前都有效</p>\n</li>\n</ul>\n<p>其他属性请参考百度百科</p>\n<h4 id=\"cookie-在浏览器请求中的表现形式\"><a class=\"markdownIt-Anchor\" href=\"#cookie-在浏览器请求中的表现形式\">#</a> <em>cookie</em> 在浏览器请求中的表现形式</h4>\n<p>请求头：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjNt9e.png\" alt=\"cookie2\"></p>\n<blockquote>\n<p>通过上面可以发现， <code>cookie</code>  是以  <code>key=value</code>  表示的。多个  <code>cookie</code>  用  <code>;</code>  号隔开</p>\n</blockquote>\n<p>响应头：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjN0Bt.png\" alt=\"cookie3\"></p>\n<blockquote>\n<p><code>cookie</code>  在响应中的表现形式为  <code>Set-Cookie=value</code>  。多个  <code>cookie</code>  使用多个  <code>Set-Cookie</code>  表示</p>\n</blockquote>\n<h4 id=\"cookie-的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#cookie-的生命周期\">#</a> <em>cookie</em> 的生命周期</h4>\n<p>​\t <code>cookie</code>  有 2 种存储方式，一种是会话性，一种是持久性。</p>\n<ul>\n<li>会话性：如果  <code>cookie</code>  为会话性，那么  <code>cookie</code>  仅会保存在客户端的内存中，当我们关闭客户端时  <code>cookie</code>  也就失效了</li>\n<li>持久性：如果  <code>cookie</code>  为持久性，那么  <code>cookie</code>  会保存在用户的硬盘中，直至生存期结束或者用户主动将其销毁。</li>\n</ul>\n<p>​     <code>cookie</code>  我们是可以进行设置的，我们可以人为设置  <code>cookie</code>  的有效时间，什么时候创建，什么时候销毁。</p>\n<h4 id=\"cookie-的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#cookie-的常用方法\">#</a> cookie 的常用方法</h4>\n<table>\n<tr>\n        <th align=\"center\" colspan=\"2\">构造方法</th>\n    </tr>\n    <tr>\n        <td align=\"center\">Cookie(String name, String value)</td>\n        <td align=\"center\">使用指定的名称和值创建一个新的 Cookie。</td>\n    </tr>\n</table>\n<table>\n    <tr>\n        <th align=\"center\">修饰符与类型</th>\n        <th align=\"center\">方法与描述</th>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">Object</td>\n        <td align=\"center\">clone()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">覆盖标准 java.lang.Object.clone 方法返回此 Cookie 的副本。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getComment()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 用途的注释。如果此 Cookie 没有注释，则返回 null。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">int</td>\n        <td align=\"center\">getMaxAge()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的最大期限（以秒为单位）。默认情况下，此 Cookie 的最大期限是 -1，表示此 Cookie\n            将会持续存在，直至浏览器关闭而消失。\n        </td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getName()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前名称。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getValue()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前值。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">String</td>\n        <td align=\"center\">getPath()</td>\n    </tr>\n    <tr>\n        <td align=\"center\">获取此 Cookie 的当前路径。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setComment(String purpose)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的注释。注释用于说明 Cookie 的用途。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setMaxAge(int expiry)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的最大期限（以秒为单位）。正值表示此 Cookie 将在设置的 expiry 后过期。注意，该值为 Cookie 过期的最长期限，而不是 Cookie 当前年龄。\n            负值表示 Cookie 将在浏览器关闭时过期。零值表示 Cookie 会立马删除。\n        </td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setPath(String uri)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">设置此 Cookie 的当前路径。</td>\n    </tr>\n    <tr>\n        <td align=\"center\" rowspan=\"2\">void</td>\n        <td align=\"center\">setValue(String newValue)</td>\n    </tr>\n    <tr>\n        <td align=\"center\">为此 Cookie 的分配一个新值。</td>\n    </tr>\n</table>\n<blockquote>\n<p>更多请参考：<a href=\"https://docs.oracle.com/javaee/7/api/index.html\">Cookie（Java（TM） EE 7 规范 API） ( <code>oracle.com</code> )</a></p>\n</blockquote>\n<p><em>Cookie</em> 类位于  <code>javax.servlet.http</code>  下</p>\n<p><code>HttpServletRequest</code>  和  <code>HttpServletResponse</code>  对 <em>cookie</em> 进行操作的常用方法</p>\n<ul>\n<li><code>response.addCookie(Cookie cookie)</code>\n<ul>\n<li>将 <em>cookie</em> 给客户端进行保存</li>\n</ul>\n</li>\n<li><code>request.getCookies()</code>\n<ul>\n<li>得到客户端传过来的所有 <em>cookie</em> 对象</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h4>\n<p>使用 <em>cookie</em> 自动填充用户名和密码，使用 <em>session</em> 实现一天内登录过后无需登录</p>\n<p><em><strong>login.html</strong></em>：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 登录表单，向 http://localhost:8080/login 发送 POST 请求 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:8080/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 获取指定名称的 cookie 值</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param name 需要获取的 cookie 的名称</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return 返回 cookie 的值，如果不存在则返回 null</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> arr<span class=\"token punctuation\">,</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(^| )\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"=([^;]*)(;|$)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 从 cookie 中获取用户名和密码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">const</span> username_cookie <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">const</span> password_cookie <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 获取 HTML 中对应的用户名和密码输入框元素</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">const</span> username_eb <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">const</span> password_eb <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 如果 cookie 中存在用户名和密码，且输入框元素存在，则将 cookie 中的用户名和密码填入输入框</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>username_cookie <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> password_cookie <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>username_eb <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> password_eb <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        username_eb<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> username_cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        password_eb<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> password_cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><em><strong>LoginController</strong></em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 登录处理控制器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param request  HttpServletRequest 对象，用于接收客户端请求数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param response HttpServletResponse 对象，用于向客户端发送响应</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return 返回登录成功后重定向到的 URL 或登录失败后重新回到登录页面的 URL</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @throws IOException 如果发生 I/O 错误</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">loginController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于存储用户输入的登录信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前会话对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Cookie</span> cookieUserName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Cookie</span> cookiePassword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 从请求中获取用户名和密码，并存入 hashMap 中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 调用 Login 类的 login 方法进行登录验证</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Login</span><span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 登录成功，创建并设置用户名和密码的 Cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cookieUserName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cookiePassword <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            cookieUserName<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置 Cookie 有效期为 1 天</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cookiePassword<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 设置会话有效期为 1 天</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxInactiveInterval</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookieUserName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookiePassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 在会话中设置用户名，以便在其他页面中使用</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 登录成功，重定向到首页</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 登录失败，重定向回登录页面</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/login.html\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>Index</strong></em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Index</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 处理访问首页的请求。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 如果用户已登录（即会话中包含用户名），则显示欢迎页面；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 否则，重定向到登录页面。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param request  HttpServletRequest 对象，用于获取请求信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param response HttpServletResponse 对象，用于设置响应信息和发送响应</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @throws IOException 如果发生 I/O 错误</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/index*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">var</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试从会话中获取用户名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 用户已登录，设置响应为 HTML 格式，并输出欢迎页面</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    &lt;!DOCTYPE html></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    &lt;html lang=\"en\"></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    &lt;head></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        &lt;meta charset=\"utf-8\"></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        &lt;title>Title&lt;/title></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    &lt;/head></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    &lt;body></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    &lt;h1>success&lt;/h1></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    &lt;div></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        &lt;p></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            welcome\\s\"\"\"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        &lt;/p></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    &lt;/div></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    &lt;/body></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    &lt;/html></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    \"\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 用户未登录，重定向到登录页面</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自动填充逻辑：</p>\n<p>​\t先访问  <code>index</code>  接口，它会判断有没有登录，没有登录的话会重定向到  <code>login.html</code>  界面。在  <code>login</code>  接口中验证用户名和密码，并将  <code>cookie</code>  放到响应头中返回给客户端存储，如果登录成功则重定向到  <code>index</code>  主页，否则重定向到  <code>login.html</code>  重新登录。</p>\n<p>​\t之后关闭浏览器，访问  <code>index</code>  接口，由于请求头会携带  <code>cookie</code>  以及  <code>session</code>  ， 所以只要  <code>session</code>  没有过期就可以直接访问。</p>\n<p>​\t访问  <code>login.html</code>  则  <code>HTML</code>  中的  <code>JavaScript</code>  代码会获取  <code>cookie</code>  ，以便实现自动填充。</p>\n<h4 id=\"流程图\"><a class=\"markdownIt-Anchor\" href=\"#流程图\">#</a> 流程图</h4>\n<p><img data-src=\"https://s21.ax1x.com/2024/04/13/pFjH4SO.png\" alt=\"流程图\"></p>\n<hr>\n<p><em>TODO</em></p>\n",
            "tags": [
                "原创",
                "Java",
                "servlet"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/frame/spring%E5%BC%80%E5%8F%91%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88/",
            "title": "spring开发注解集合",
            "date_published": "2024-04-16T03:35:58.000Z",
            "content_html": "<h3 id=\"spring-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-的常用注解\">#</a> Spring 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Component(value=&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类会被交由  <code>spring</code>  容器管理</p>\n<p>2）value 值为 spring 创建该类对象的 id 值</p>\n<p>3）该注解使用类的无参构造方法创建对象</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Value(&quot;&quot;)</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行基本类型的注入，在括号内的引号中键入属性值</p>\n<p>2）可以给  <code>set</code>  方法进行此注释</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Autowired</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解进行引用类型的注入，即 <code>bean</code>  对象的注入</p>\n<p>2）可以声明在字段 (属性) 或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byType</code>  注入，通过此注解的对象需要在 <code>IoC</code>  容器中存在，否则需要加上 <code>required=false</code> ，表示忽略当前要注入的 <code>bean</code> ，如果有就直接注入，没有跳过，不会报错</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ComponentScan</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注释使组件扫描器扫描本类此包下的  <code>bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Configuration</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解定义配置类</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@Bean</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  中用于方法级别的注解，主要用于在  <code>Java</code>  配置类中定义一个  <code>Bean</code>  。</p>\n<p>2）此注解告诉  <code>spring</code>  这个方法将返回一个对象，该对象应该被注册为  <code>spring</code>  容器中的一个  <code>Bean</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestControllerAdvice</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是  <code>spring</code>  框架的一个注解，用于定义一个全局的异常处理控制器。通常与  <code>@ExceptionHandler</code>  注解一起使用。</p>\n<p>2） <code>@RestControllerAdvice</code>  等同于  <code>@ControllerAdvice</code>  加上  <code>@ResponseBody</code>  注解，表示该类中的方法负责处理异常，并将处理结果作为 <code>HTTP</code>  响应的主体返回。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ResponseStatus</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为  <code>Spring</code>  框架提供的一个注解，用于指示方法应该返回特定的 HTTP 状态码和可选的原因短语。</p>\n<p>2）接收  <code>value</code>  和  <code>code(可选)</code>  ，类型为  <code>HTTPStatus</code>  枚举类的常量值</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"spring-mvc-的常用注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-mvc-的常用注解\">#</a> Spring MVC 的常用注解</h3>\n<ul>\n<li>\n<p><code>@Controller</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解的类，其中的方法如果没有被此注解修饰，一般都是返回一个视图（一个具体的页面），这个视图会和模板引擎结合在一起使用</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RestController</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解基本上等于  <code>@RequesBody</code>   +  <code>@Controller</code></p>\n<p>2）使用此注解会直接返回一个 <code>JSON</code>  数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestMapping</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）使用此注解来映射请求，也就是通过它来指定控制器可以处理那些  <code>URL</code>  请求</p>\n<p>2）此注解除了  <code>name()</code>  方法，其他的方法都可以定义多个属性值，如  <code>value()</code>  和  <code>path()</code>  都可以同时定义多个字符串值来接收多个  <code>URL</code>  请求</p>\n</blockquote>\n<ul>\n<li>\n<p><em>path</em>：可以处理的  <code>url</code>  路径， <code>value</code>  效果和  <code>path</code>  相同</p>\n</li>\n<li>\n<p><em>method</em>：此属性用来定义浏览器的请求方式，可以使用此属性指定方法仅处理哪些请求。有四种基本请求方式：1.  <code>RequestMethod.GET</code> （查）2.  <code>RequestMethod.POST</code> （增） 3.  <code>RequestMethod.PUT</code> （改） 4.  <code>RequestMethod.DELETE</code> （删）。常用的只有 1、2 两种</p>\n</li>\n<li>\n<p><em>params</em>：可以使用此属性限制请求参数，只有带指定参数的请求才会被响应</p>\n</li>\n<li>\n<p><em>headers</em>：此属性表示请求头，可以使用此属性限制客户端发来的请求</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@PathVariable</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）可以通过此注解将  <code>URL</code>  中的占位符绑定到控制器的处理方法的参数中，占位符可以在任何位置，占位符使用 <code>&#123;&#125;</code>  括起来，如： <code>@RequestMapping(&quot;/books/&#123;id&#125;/&#123;authorName&#125;&quot;)</code></p>\n<p>2）通过此注解可以将  <code>URL</code>  中的参数接收，URL 中的参数名需与方法接收参数名保持一致，否则无法接收。可以通过  <code>@PathVariable</code>  的  <code>value</code>  属性指定参数名</p>\n<p>3）此注解是直接放在形参中的，如： <code>public String testBook(@PathVariable Integer id, @PathVariable(value=&quot;authorName&quot;) String name)&#123;&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestParam</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）通过此注解从  <code>request</code> （请求） 中获取数值。</p>\n<p>2）与上一个注解的区别在于请求数据风格不同，如： <code>http://localhost:8080/user?id=1</code></p>\n</blockquote>\n<ul>\n<li><code>value</code> ：当传入的参数和方法参数名不一致时，可以使用  <code>value</code>  指定传入的参数名</li>\n<li><code>required</code> ：是布尔值，用来表示该参数是否为必须传入</li>\n<li><code>defaultValue</code> ：默认值，表示请求中没有同名的参数时的默认值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@RequestBody</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）将  <code>HTTP</code>  请求体数据自动绑定到指定类型的参数</p>\n<p>2）支持多种数据格式（如  <code>JSON</code> 、 <code>XML</code> ）与  <code>Java</code>  类型（如  <code>POJO</code> 、 <code>List</code> 、 <code>Map</code> ）的映射，借助  <code>HttpMessageConverter</code>  实现</p>\n<p>3）可与  <code>@RequestParam</code> 、 <code>@PathVariable</code>  等注解共存，以便在一个方法中处理多种来源的请求数据</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><code>@ExceptionHandler</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解是 <code>Spring MVC</code>  中用于标记处理特定异常的方法</p>\n<p>2）可以接受多种异常 <code>@ExceptionHandler(value = &#123;NullPointerException.class, IllegalArgumentException.class, IllegalStateException.class&#125;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他注解\"><a class=\"markdownIt-Anchor\" href=\"#其他注解\">#</a> 其他注解</h3>\n<p><code>@Resource</code></p>\n<ul>\n<li>\n<blockquote>\n<p>1）此注解为 <code>J2EE</code>  提供</p>\n<p>2）跟 <code>@Autowired</code>  一样，都是为 <code>bean</code>  对象注入，同样可以声明到字段或 <code>setter</code>  方法上</p>\n<p>3）默认使用 <code>byName</code>  注入，没有则通过 <code>byType</code>  方式注入</p>\n<p>更多关于此注解的细节参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTkwNDk0L2FydGljbGUvZGV0YWlscy8xMTQ0NDQzNzE=\">@Autowired 和 @Resource 注解的区别和联系</span></p>\n</blockquote>\n</li>\n</ul>\n<p><code>@WebServlet</code></p>\n<ul>\n<li></li>\n</ul>\n<h3 id=\"注入方式\"><a class=\"markdownIt-Anchor\" href=\"#注入方式\">#</a> 注入方式</h3>\n<ul>\n<li><code>byName</code>\n<ul>\n<li>简单说就是使用变量名去 <code>IoC</code>  容器中匹配合适 <code>bean</code>  的 <code>id</code>  属性</li>\n</ul>\n</li>\n<li><code>byType</code>\n<ul>\n<li>使用变量类型去匹配 <code>bean</code>  的 <code>class</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>具体可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdhODQyNDI4L2FydGljbGUvZGV0YWlscy81NDY5NDQ4NA==\">Spring 中的 byName 与 byType_springboot byname 和 bytype</span></p>\n<h3 id=\"封装实体类接收表单数据\"><a class=\"markdownIt-Anchor\" href=\"#封装实体类接收表单数据\">#</a> 封装实体类接收表单数据</h3>\n<p>在表单数据过多时，可以封装实体类接收参数</p>\n<p><em>Demo</em>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 直接传入实体类的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>getUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "spring注解"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/javascript/JSON/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/javascript/JSON/",
            "title": "JSON",
            "date_published": "2024-04-03T02:05:34.000Z",
            "content_html": "<h3 id=\"json-简介\"><a class=\"markdownIt-Anchor\" href=\"#json-简介\">#</a> JSON 简介</h3>\n<blockquote>\n<p><code>JSON</code> : <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(  <code>JavaScript</code>  对象表示法)</p>\n<p><code>JSON</code>  是存储和交换文本信息的语法，类似  <code>XML</code> 。</p>\n<p><code>JSON</code>  比  <code>XML</code>  更小、更快，更易解析。</p>\n<p><code>JSON</code>  易于人阅读和编写。</p>\n<p><code>C</code> 、 <code>Python</code> 、 <code>C++</code> 、 <code>Java</code> 、 <code>PHP</code> 、 <code>Go</code>  等编程语言都支持  <code>JSON</code></p>\n</blockquote>\n<p>例子：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"sites\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bing\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.bing.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"google\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.google.com\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"baidu\"</span> <span class=\"token punctuation\">,</span> <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"www.baidu.com\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h3>\n<p>在  <code>JSON</code>  中使用 <code>&#123;&#125;</code>  来定义一个对象。左括号 <code>&#123;</code> 开始，右括号 <code>&#125;</code>  结束。每个  <code>&quot;键&quot;</code>  后跟一个冒号  <code>:</code>  ，名称 / 值对使用逗号  <code>,</code>  分隔</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"嵌套对象\"><a class=\"markdownIt-Anchor\" href=\"#嵌套对象\">#</a> 嵌套对象</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"student\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"namelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"name1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token property\">\"name2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token property\">\"agelist\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"age1\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token property\">\"age2\"</span><span class=\"token operator\">:</span><span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h3>\n<p>中括号  <code>[]</code>  保存的数组是值（ <code>value</code> ）的有序集合。一个数组以左中括号  <code>[</code>  开始， 右中括号  <code>]</code>  结束，值之间使用逗号  <code>,</code>  分隔。</p>\n<p>值（ <code>value</code> ）可以是双引号括起来的字符串（ <code>string</code> ）、数值 ( <code>number</code> )、 <code>true</code> 、 <code>false</code> 、  <code>null</code> 、对象（ <code>object</code> ）或者数组（ <code>array</code> ），它们是可以嵌套，值不能为键值对。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"嵌套数组\"><a class=\"markdownIt-Anchor\" href=\"#嵌套数组\">#</a> 嵌套数组</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"jsonparse\"><a class=\"markdownIt-Anchor\" href=\"#jsonparse\">#</a>  <code>JSON.parse()</code></h3>\n<p>此方法为  <code>JavaScript</code>  的内置函数，用于将  <code>JSON</code>  字符串解析为原生  <code>JavaScript</code>  对象或值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>text</code></p>\n<p>​\t要被解析成  <code>JavaScript</code>  值的字符串</p>\n<p><code>reviver</code>  (可选)</p>\n<p>​\t转换器，如果传入该参数 (函数)，可以用来修改解析生成的原始值，调用时机在  <code>parse</code>  函数返回之前</p>\n<p>返回值</p>\n<p>​\t与给定的  <code>JSON text</code>  相对应的  <code>Object</code> 、 <code>Array</code> 、 <code>string</code> 、 <code>number</code> 、 <code>boolean</code>  或者  <code>null</code>  值</p>\n<p>异常</p>\n<p>​\t若传入的字符串不符合 JSON 规范，则会抛出此异常</p>\n<p>使用  <code>reviver</code>  函数</p>\n<blockquote>\n<p>如果指定了  <code>reviver</code>  函数，则解析出的  <code>JavaScript</code>  值（解析值）会经过一次转换后才将被最终返回（返回值）。更具体点讲就是：解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用  <code>reviver</code>  函数，在调用过程中，当前属性所属的对象会作为  <code>this</code>  值，当前属性名和属性值会分别作为第一个和第二个参数传入  <code>reviver</code>  中。如果  <code>reviver</code>  返回  <code>undefined</code> ，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。</p>\n<p>当遍历到最顶层的值（解析值）时，传入  <code>reviver</code>  函数的参数会是空字符串  <code>&quot;&quot;</code> （因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的  <code>this</code>  值会是  <code>&#123;&quot;&quot;: 修改过的解析值&#125;</code> ，在编写  <code>reviver</code>  函数时，要注意到这个特例。（这个函数的遍历顺序依照：从最内层开始，按照层级顺序，依次向外遍历）</p>\n</blockquote>\n<p>更多请参阅:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9wYXJzZQ==\">JSON.parse() - JavaScript | MDN (mozilla.org)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc29uL2pzb24tdHV0b3JpYWwuaHRtbA==\">JSON 教程 | 菜鸟教程 (runoob.com)</span></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "JavaScript",
                "JSON"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/UnitTests/JUnit/",
            "url": "http://yunyat.cloud/MyCodingBook/UnitTests/JUnit/",
            "title": "JUnit",
            "date_published": "2024-03-11T01:02:57.000Z",
            "content_html": "<h3 id=\"junit-介绍\"><a class=\"markdownIt-Anchor\" href=\"#junit-介绍\">#</a> JUnit 介绍</h3>\n<p>在编写程序的过程中，我们常常需要对一个单独的模块进行测试，以判断其是否符合要求。</p>\n<h4 id=\"test-注解\"><a class=\"markdownIt-Anchor\" href=\"#test-注解\">#</a>  <code>@Test</code>  注解</h4>\n<p>一般来说，通过  <code>@Test</code>  注解过的方法就是测试方法，测试方法可以脱离  <code>man()</code>  方法独立运行。</p>\n<h4 id=\"参数化测试\"><a class=\"markdownIt-Anchor\" href=\"#参数化测试\">#</a> 参数化测试</h4>\n<p>为了确保单元测试的严谨性，通常会模拟不同的测试数据来测试方法的处理能力，为此我们需要编写大量的单元测试方法，可这些测试的方法大体框架都是差不多的，它们的结构都是相同的，不同的仅仅是数据和期望值，为此，我们可以使用参数化测试。</p>\n<h5 id=\"参数化测试条件\"><a class=\"markdownIt-Anchor\" href=\"#参数化测试条件\">#</a> 参数化测试条件</h5>\n<ol>\n<li>对需要测试的类添加  <code>@RunWith(Parameterized.class)</code>  注解</li>\n<li>用于存放测试数据及期望值的变量都要声明为私有变量</li>\n<li>将上一步的私有变量作为入参创建构造方法并为其赋值</li>\n<li>创建一个公共的静态方法，此方法的返回值为集合  <code>Collection</code>  ，并且此方法需要被  <code>@Parameters</code>  注解</li>\n<li>使用定义的私有变量编写测试方法</li>\n</ol>\n<p>Demo:</p>\n<p>测试方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fun<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">.</span>li</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token static\">assertEquals</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runners<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parameterized</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runners<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parameterized</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Parameters</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parameterized</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FuntionTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> usesrname <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FuntionTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usesrname <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 返回集合</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Parameters</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Collection</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"用户名或密码不能为空\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的用户名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的密码\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"请输入正确的用户名和密码\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 测试，通过断言判断测试是否成功</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testFuntion_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> funtion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Funtion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> funtion<span class=\"token punctuation\">.</span><span class=\"token function\">funtion_data</span><span class=\"token punctuation\">(</span>usesrname<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>被测试的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">fun<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">.</span>li</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Funtion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">funtion_data</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"用户名或密码不能为空\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的用户名\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的密码\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tmsg <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入正确的用户名和密码\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果示例：</p>\n<p><img data-src=\"https://s21.ax1x.com/2024/03/10/pFy2pWD.png\" alt=\"pFy2pWD.png\"></p>\n<p>​\t还有一些其他的参数化测试方法请自行去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2p1bml0LXRlYW0vanVuaXQ0L3dpa2kvUGFyYW1ldGVyaXplZC10ZXN0cw==\">参数化测试・junit-team/junit4 维基 (github.com)</span> 查看</p>\n<h4 id=\"断言\"><a class=\"markdownIt-Anchor\" href=\"#断言\">#</a> 断言</h4>\n<p>断言 (assertion) 是一种在程序中的一阶逻辑 (如：一个结果为真或假的逻辑判断式)，目的为了表示与验证软件开发者预期的结果 —— 当程序执行到断言的位置时，对应的断言应该为真。若断言不为真时，程序会中止执行，并给出错误信息。</p>\n<p>常用 <code>API</code> ：</p>\n<ul>\n<li>\n<p><code>assertEquals()</code> ：检测两个值是否相等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertTrue()</code> ：检测条件是否为真</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertFalse(true)</code> ：检测条件是否为假</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNotNull()</code> ：检测不为空</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNull()</code> ：检测为空</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertNotSame()</code> ：检测两个相关对象是否不指向同一个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertNotSame</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertSame()</code> ：检测两个相关对象是否指向同一个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertSame</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertArrayEquals()</code> ：检测两个数组是否相等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertArrayEquals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"hamcrest\"><a class=\"markdownIt-Anchor\" href=\"#hamcrest\">#</a>  <code>Hamcrest</code></h5>\n<p><code>Hamcrest</code>  是一款用于校验的 Java 的单元测试框架，可以组合创建灵活的表达的匹配器进行断言。</p>\n<p><code>JUnit</code>  结合  <code>Hamcrest</code>  提供了一个全新的断言语法 ——  <code>assertThat</code> 。程序员可以只使用  <code>assertThat</code>  一个断言语句，结合  <code>Hamcrest</code>  提供的匹配符，就可以表达全部的测试思想。</p>\n<p>要使用  <code>Hamcrest</code>  断言，需要先使用  <code>assertThat</code>  来声明一个断言，然后再在内部进行具体匹配器的断言细节，期望值和实际值进行对比。</p>\n<h5 id=\"一般匹配符断言\"><a class=\"markdownIt-Anchor\" href=\"#一般匹配符断言\">#</a> 一般匹配符断言</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>allOf</code>  表示括号里的所有断言都要成立才测试通过，相当于  <code>&amp;&amp;</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 由于 eclipse 这个水货识别不了 allof ，所以我通过包名的方式引用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>AllOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"he\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>anyOf</code>  表示括号里的所有断言只要有一个成立测试就通过，相当于  <code>||</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>AnyOf</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>anything</code>  表示无论是什么条件，测试都为 <code>true</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>IsAnything</span><span class=\"token punctuation\">.</span><span class=\"token function\">anything</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>is</code>  表示如果前面给出的期望值等于后面给出的值，则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>Is</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>not</code>  与 is 正好相反，如果前面给出的期望值不等于后面给出的值，则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span>IsNot</span><span class=\"token punctuation\">.</span><span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"字符串相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#字符串相关匹配符\">#</a> 字符串相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>containsString</code>  表示如果前面的期望值包含后面的子字符串则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>startsWith</code>  表示如果前面的期望值是以后面的子字符串开头则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>endsWith</code>  表示如果前面的期望值是以后面的子字符串结尾则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalTo</code>  表示如果前面的期望值跟后面的字符串相等则测试通过，相当于  <code>equals()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalToIgnoringCase</code>  表示如果后面的值在忽略大小写的情况下等于期望值则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalToIgnoringCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>equalToIgnoringWhiteSpace</code>  表示如果后面的值在忽略前后任意个空格的情况下等于期望值则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalToIgnoringWhiteSpace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   hello world    \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"数值相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#数值相关匹配符\">#</a> 数值相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>closeTo</code>  匹配符表明如果所<strong>测试的浮点型数在 1.0±0.03 范围之内</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.03</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">closeTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>greaterThan</code>  匹配符表明如果所<strong>测试的数值大于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">greaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>lessThan</code>  匹配符表明如果所<strong>测试的数值小于 2</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>greaterThanOrEqualTo</code>  匹配符表明如果所<strong>测试的数值大于等于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">greaterThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>lessThanOrEqualTo</code>  匹配符表明如果所<strong>测试的数值小于等于 1</strong> 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"集合相关匹配符\"><a class=\"markdownIt-Anchor\" href=\"#集合相关匹配符\">#</a> 集合相关匹配符</h5>\n<ul>\n<li>\n<p><code>assertThat()</code> ： <code>hasEntry</code>  匹配符表明如果测试的<strong> Map 对象含有一个键值为 &quot;bar&quot; 对应元素值为 &quot;foo&quot; 的 Entry 项</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasEntry</span><span class=\"token punctuation\">(</span>“bar”<span class=\"token punctuation\">,</span> “foo”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasItem</code>  匹配符表明如果测试的<strong>迭代对象含有元素以 ba 开头项</strong>则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>“foo”<span class=\"token punctuation\">,</span> “bar”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>“ba”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasKey</code>  匹配符表明如果测试的 **Map 对象含有键值 “bar”** 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>“bar”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>assertThat()</code> ： <code>hasValue</code>  匹配符表明如果测试的 **Map 对象含有元素值 “foo”** 则测试通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">,</span> <span class=\"token function\">hasValue</span><span class=\"token punctuation\">(</span>“foo”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java",
                "junit"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/UnitTests/Selenium-%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://yunyat.cloud/MyCodingBook/UnitTests/Selenium-%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Selenium 的使用",
            "date_published": "2024-03-05T07:47:19.000Z",
            "content_html": "<h3 id=\"selenium-介绍\"><a class=\"markdownIt-Anchor\" href=\"#selenium-介绍\">#</a>  <code>Selenium</code>  介绍</h3>\n<p><code>selenium</code>  是一个广泛使用的模拟浏览器运行的库，它是一个用于  <code>Web</code>  应用程序测试的工具。 <code>Selenium</code>  测试直接运行在浏览器中，就像真正的用户在操作一样，并且支持大多数现代  <code>Web</code>  浏览器。</p>\n<h3 id=\"selenium-自动化测试的八种定位方法\"><a class=\"markdownIt-Anchor\" href=\"#selenium-自动化测试的八种定位方法\">#</a>  <code>Selenium</code>  自动化测试的八种定位方法</h3>\n<h4 id=\"使用场景\"><a class=\"markdownIt-Anchor\" href=\"#使用场景\">#</a> 使用场景：</h4>\n<p>① 优先用 <code>id</code> 、 <code>name</code> （保证唯一性）</p>\n<p>② 是否是超链接，是超链接用 <code>link_text</code> 、 <code>partial_link_text</code> ，否则用 <code>css_selector</code> 、 <code>xpath</code></p>\n<p>③  <code>class_name</code> 、 <code>tag_name</code>  很少用，因为这俩个难以保证被定为元素或属性的唯一性</p>\n<h4 id=\"id-定位\"><a class=\"markdownIt-Anchor\" href=\"#id-定位\">#</a>  <code>ID</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.ID,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"name-定位\"><a class=\"markdownIt-Anchor\" href=\"#name-定位\">#</a>  <code>Name</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"class-定位\"><a class=\"markdownIt-Anchor\" href=\"#class-定位\">#</a>  <code>Class</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.CLASS_NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>CLASS_NAME<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"tag_name-定位\"><a class=\"markdownIt-Anchor\" href=\"#tag_name-定位\">#</a>  <code>Tag_Name</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.TAG_NAME,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>TAG_NAME<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"link_text-定位\"><a class=\"markdownIt-Anchor\" href=\"#link_text-定位\">#</a>  <code>Link_Text</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.LINK_TEXT,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>LINK_TEXT<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"登\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"partial_link-定位\"><a class=\"markdownIt-Anchor\" href=\"#partial_link-定位\">#</a>  <code>Partial_Link</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.PARTIAL_LINK,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>PARTIAL_LINK<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"xpath-定位\"><a class=\"markdownIt-Anchor\" href=\"#xpath-定位\">#</a>  <code>Xpath</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.XPATH,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用 XPATH 定位带有 id='login' 属性和 name='user' 属性的 input 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>XPATH<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"//input[@id='login' and @name='user']\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"css_selector-定位\"><a class=\"markdownIt-Anchor\" href=\"#css_selector-定位\">#</a>  <code>Css_selector</code>  定位</h4>\n<p>方法原型：</p>\n<p><code>driver.find_element(By.CSS_SELECTOR,value)</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driver<span class=\"token punctuation\">.</span>find_element<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span>By<span class=\"token punctuation\">.</span>CSS_SELECTOR<span class=\"token punctuation\">,</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"input#login\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "python",
                "selenium"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-3/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-3/",
            "title": "shell脚本笔记-3",
            "date_published": "2023-12-16T13:32:47.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-1/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-1/",
            "title": "shell脚本笔记-1",
            "date_published": "2023-12-15T07:06:21.000Z",
            "content_html": "<h3 id=\"shell命令解释器\"><a class=\"markdownIt-Anchor\" href=\"#shell命令解释器\">#</a> Shell 命令解释器</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/shells</pre></td></tr></table></figure><p>shell 的命令解释器用于执行 shell 命令或 shell 脚本文件，Centos 下有四种解释器，一般用默认的 /bin/bash 即可</p>\n<h3 id=\"执行shell脚本\"><a class=\"markdownIt-Anchor\" href=\"#执行shell脚本\">#</a> 执行 Shell 脚本</h3>\n<p>要执行 shell 脚本有两种方法：</p>\n<ol>\n<li>将要执行的  <code>.sh</code>  脚本通过  <code>chmod</code>  给予可执行权限，然后执行</li>\n<li>不赋予可执行权限，通过  <code>bash xxx.sh</code>  或  <code>sh xxx.sh</code>  来执行</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x ./hello.sh    <span class=\"token comment\"># 方法一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./hello.sh    <span class=\"token comment\"># 方法二</span></pre></td></tr></table></figure><p>使用  <code>.sh</code>  为后缀只是为了方便区分，对实际运行脚本没有任何影响</p>\n<h4 id=\"shell变量\"><a class=\"markdownIt-Anchor\" href=\"#shell变量\">#</a> Shell 变量</h4>\n<p>shell 脚本定义变量除了等号两边不能加空格，其他和别的编程语言大差不差（值得一提的是，变量名不支持中文命名，其他大部分编程语言是支持的）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr></table></figure><h4 id=\"变量类型\"><a class=\"markdownIt-Anchor\" href=\"#变量类型\">#</a> 变量类型</h4>\n<p>在运行 shell 时，会同时存在三种变量类型：</p>\n<ol>\n<li>局部变量：局部变量在脚本或命令中被定义，只能由当前对象使用，无法被其他 shell 启动的对象访问</li>\n<li>环境变量：环境变量是所有的脚本或程序都能访问的，某些程序或脚本需要环境变量来维持运行，必要时也可以由 shell 脚本自己定义环境变量</li>\n<li>shell 变量：shell 变量是由 shell 程序设置的特殊变量，shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行</li>\n</ol>\n<h4 id=\"使用变量\"><a class=\"markdownIt-Anchor\" href=\"#使用变量\">#</a> 使用变量</h4>\n<p>要使用定义过的变量，只需在变量名前加美元符号，最好在变量名外加花括号以区分边界</p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6gZdO.png\" alt=\"shell1\"></p>\n<p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6gVeK.png\" alt=\"shell2\"></p>\n<h4 id=\"只读变量\"><a class=\"markdownIt-Anchor\" href=\"#只读变量\">#</a> 只读变量</h4>\n<p>使用 readonly 可以将变量定义为只读变量，只读变量不能被改变</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> name</pre></td></tr></table></figure><h4 id=\"删除变量\"><a class=\"markdownIt-Anchor\" href=\"#删除变量\">#</a> 删除变量</h4>\n<p>使用 unset 删除变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> name</pre></td></tr></table></figure><h3 id=\"shell-传递参数\"><a class=\"markdownIt-Anchor\" href=\"#shell-传递参数\">#</a> Shell 传递参数</h3>\n<p>有一些特殊变量在 shell 脚本中有特殊含义，如：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数处理</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>$#</code></td>\n<td style=\"text-align:center\">传递到脚本的参数个数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$*</code></td>\n<td style=\"text-align:center\">以一个单字符串的形式输出所有向脚本输入的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$$</code></td>\n<td style=\"text-align:center\">脚本运行的当前进程  <code>ID</code>  号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$!</code></td>\n<td style=\"text-align:center\">后台运行的最后一个进程的 <code>ID</code>  号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$@</code></td>\n<td style=\"text-align:center\">与 <code>$&#123;*&#125;</code>  效果相同，但是加引号时会返回以引号括起来的每个参数，与 <code>$&#123;*&#125;</code>  的区别是 <code>$&#123;*&#125;</code>  将所有参数当一个字符串处理，而 <code>$&#123;@&#125;</code>  则是分别处理每个参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$-</code></td>\n<td style=\"text-align:center\">显示 Shell 使用的当前选项，与  <code>set</code>  命令功能相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$?</code></td>\n<td style=\"text-align:center\">显示最后命令的退出状态。 <code>0</code>  表示没有错误，其他任何值都表明有错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$0</code></td>\n<td style=\"text-align:center\">表示脚本的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$1</code></td>\n<td style=\"text-align:center\">表示脚本的参数，可以有多个，用 <code>$&#123;1&#125;</code>  、 <code>$&#123;2&#125;</code>  … 表示</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"有<span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>&#125;</span>个参数\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"参数:<span class=\"token variable\">$&#123;*&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"进程ID:<span class=\"token variable\">$&#123;$&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"最后一个进程ID:<span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Shell选项:<span class=\"token variable\">$&#123;-&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"脚本name:<span class=\"token variable\">$&#123;0&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> + <span class=\"token variable\">$&#123;2&#125;</span> = \"</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;?&#125;</span></pre></td></tr></table></figure><p>输入：</p>\n<blockquote>\n<p>bash ./test.sh 10 20</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>有 2 个参数<br>\n参数：10 20<br>\n 进程 ID:71819<br>\n 最后一个进程 ID:<br>\nShell 选项:hB<br>\n 脚本 name:./test.sh<br>\n10 + 20 = 30<br>\n0</p>\n</blockquote>\n<h3 id=\"shell字符串\"><a class=\"markdownIt-Anchor\" href=\"#shell字符串\">#</a> Shell 字符串</h3>\n<p>shell 的字符串可以加双引号、单引号，也可以不加引号</p>\n<h4 id=\"单引号\"><a class=\"markdownIt-Anchor\" href=\"#单引号\">#</a> 单引号</h4>\n<ul>\n<li>\n<p>加单引号的字符串中的变量是无效的，可以使用单引号将变量引用起来达到拼接字符串的目的</p>\n</li>\n<li>\n<p>单引号字符串中不能出现单独的单引号，转义后也不行，只能成对出现</p>\n</li>\n</ul>\n<h4 id=\"双引号\"><a class=\"markdownIt-Anchor\" href=\"#双引号\">#</a> 双引号</h4>\n<ul>\n<li>双引号中可以有变量</li>\n<li>双引号中可以出现转义字符</li>\n</ul>\n<h4 id=\"拼接字符串\"><a class=\"markdownIt-Anchor\" href=\"#拼接字符串\">#</a> 拼接字符串</h4>\n<p>使用双引号拼接字符串：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"QSky\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello! <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Hello<span class=\"token operator\">!</span> QSky</pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/09/09/pP6RMrt.png\" alt=\"shell3\"></p>\n<p>输出结果：</p>\n<blockquote>\n<p>string hello world</p>\n<p name=\"\">string $</p>\n<p>string hello world</p>\n<p>“string” hello world</p>\n</blockquote>\n<h4 id=\"获取字符串的长度\"><a class=\"markdownIt-Anchor\" href=\"#获取字符串的长度\">#</a> 获取字符串的长度</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>str&#125;</span>    <span class=\"token comment\"># $&#123;#str&#125; 等价于 $&#123;#str [0]&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>11</p>\n</blockquote>\n<h4 id=\"提取子字符串\"><a class=\"markdownIt-Anchor\" href=\"#提取子字符串\">#</a> 提取子字符串</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 语法：字符串变量名：要提取的子串的开始位置：要提取的子串的结束位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str<span class=\"token operator\">:</span>6<span class=\"token operator\">:</span>8&#125;</span>    <span class=\"token comment\"># 第一个字符 'h' 索引为 0</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>world</p>\n</blockquote>\n<h4 id=\"查找字符串\"><a class=\"markdownIt-Anchor\" href=\"#查找字符串\">#</a> 查找字符串</h4>\n<p>查找字符  <code>i</code>  或  <code>o</code>  的位置，哪个先出现就计算哪个</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$str</span>\"</span> or<span class=\"token variable\">`</span></span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>5</p>\n</blockquote>\n<h3 id=\"shell数组\"><a class=\"markdownIt-Anchor\" href=\"#shell数组\">#</a> Shell 数组</h3>\n<p>和大多数编程语言一样，shell 脚本也有数组，但与其他编程语言不同的是，shell 不支持多维数组，不过 shell 的数组并没有长度限制，并且可以使用不连续的下标，下标范围也没有限制</p>\n<h4 id=\"定义-shell-数组\"><a class=\"markdownIt-Anchor\" href=\"#定义-shell-数组\">#</a> 定义 shell 数组</h4>\n<p>数组用小括号来表示，用空格区分值</p>\n<p>格式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>value0 value1 value2 value3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>value0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>value1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>value2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>value3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>示例：</p>\n<pre><code>array_name=(\n\n)\n</code></pre>\n<p>也能单独定义数组的单个元素</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array_name<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value5</pre></td></tr></table></figure><h4 id=\"读取数组\"><a class=\"markdownIt-Anchor\" href=\"#读取数组\">#</a> 读取数组</h4>\n<p>和其他编程语言一样，shell 同样是通过数组名加下标来读取元素</p>\n<pre><code>$&#123;数组名[下标]&#125;\n</code></pre>\n<p>可以使用  <code>@</code>  或  <code>*</code>  读取数组的全部元素：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'string '</span><span class=\"token variable\">$&#123;name&#125;</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'string $&#123;name&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"string <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\"<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>string<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> <span class=\"token variable\">$&#123;name&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;str<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\"># 和 echo $&#123;str [*]&#125; 效果相同</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<h6 id=\"为了便于阅读我给输出结果分段处理了\"><a class=\"markdownIt-Anchor\" href=\"#为了便于阅读我给输出结果分段处理了\">#</a> 为了便于阅读，我给输出结果分段处理了</h6>\n<p>string hello world</p>\n<p name=\"\">string $</p>\n<p>string hello world</p>\n<p>“string” hello world</p>\n</blockquote>\n<h4 id=\"获取数组的长度\"><a class=\"markdownIt-Anchor\" href=\"#获取数组的长度\">#</a> 获取数组的长度</h4>\n<p>获取数组长度的方法与获取字符串长度的方法相似</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">array_name</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>value0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>value1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>value2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>value3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">length_1</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">length_2</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 获取单个数组元素的长度</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token assign-left variable\">length_3</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>array_name<span class=\"token punctuation\">[</span>2<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;length_1&#125;</span> <span class=\"token variable\">$&#123;length_2&#125;</span> <span class=\"token variable\">$&#123;length_3&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>4 4 6</p>\n<p>注：6 为第二个下标所表示的元素的长度</p>\n</blockquote>\n<h4 id=\"关联数组\"><a class=\"markdownIt-Anchor\" href=\"#关联数组\">#</a> 关联数组</h4>\n<p>bash 脚本支持关联数组，可以使用任意的字符串或者整数来作为下标来访问数组。</p>\n<p>关联数组的键是唯一的，有点类似于其他编程语言的键值对。</p>\n<p>语法：</p>\n<blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> array-name<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_1\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_2\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_2\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_3\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_3\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_4\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_4\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"key_n\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"value_n\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<p>使用  <code>declare</code>  命令来声明， <code>-A</code>  选项就是用于声明一个关联数组。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> <span class=\"token assign-left variable\">site</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"QSky\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"zero-li.fun\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;site<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>zero-li.fun QSky</p>\n</blockquote>\n<p>同样可以先声明再赋值：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">declare</span> <span class=\"token parameter variable\">-A</span> site</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>site<span class=\"token punctuation\">[</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"zero-li.fun\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;site<span class=\"token punctuation\">[</span>\"zero\"<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>zero-li.fun</p>\n</blockquote>\n<h3 id=\"shell-注释\"><a class=\"markdownIt-Anchor\" href=\"#shell-注释\">#</a> Shell 注释</h3>\n<p>在 shell 脚本中，以  <code>#</code>  开头的就是注释。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这是一句注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> 注释的内容并不会被执行</pre></td></tr></table></figure><h4 id=\"多行注释\"><a class=\"markdownIt-Anchor\" href=\"#多行注释\">#</a> 多行注释</h4>\n<p>可以使用  <code>:</code>  命令，并用单引号  <code>'</code>  将多行内容括起来。</p>\n<p>语法： <code>:</code>  +  <code> </code>  (空格) +  <code>'</code>  (单引号)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是多段注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可以有多行内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>'</span></pre></td></tr></table></figure><p>shell 常用命令及关键字：</p>\n<p><code>readonly</code> ：将变量定义为只读，无法更改其值</p>\n<p><code>unset</code> ：删除变量，无法删除只读变量</p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "shell"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-2/",
            "url": "http://yunyat.cloud/MyCodingBook/shell/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0-2/",
            "title": "shell脚本笔记 - 2",
            "date_published": "2023-11-27T08:59:13.000Z",
            "content_html": "<h3 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> Shell</h3>\n<p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现。</p>\n<h4 id=\"expr\"><a class=\"markdownIt-Anchor\" href=\"#expr\">#</a>  <code>expr</code></h4>\n<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作，一般用于整数值，也可用于字符串。</p>\n<p>使用 expr 时，一定要将 expr 表达式用<b>反引号</b>括起来或使用 <code>$()</code>  将其括起来。</p>\n<p>语法：</p>\n<blockquote>\n<p><code>$(expr 表达式)</code></p>\n</blockquote>\n<h4 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\">#</a> 字符串操作</h4>\n<ol>\n<li>计算字符串的长度\n<ul>\n<li><code>length</code></li>\n<li>语法： <code>expr length string_name</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> length <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输出说明：</p>\n<blockquote>\n<p>11</p>\n</blockquote>\n<ol start=\"2\">\n<li>截取字符串子串\n<ul>\n<li><code>substr</code></li>\n<li>语法： <code>expr substr string_name start_num end_num</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> substr <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span> <span class=\"token number\">1</span> <span class=\"token number\">5</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输出说明：</p>\n<blockquote>\n<p>hello</p>\n</blockquote>\n<ol start=\"3\">\n<li>截取第一个字符串出现的位置\n<ul>\n<li><code>index</code></li>\n<li>语法： <code>expr index string_name substrings_name</code></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> index <span class=\"token string\">\"<span class=\"token variable\">$&#123;str&#125;</span>\"</span> e<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">加法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-</code></td>\n<td style=\"text-align:center\">减法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">乘法运算符，在使用  <code>*</code>  运算符时，需要使用反斜杠 ( <code>\\</code> ) 进行转义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>/</code></td>\n<td style=\"text-align:center\">除法运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>%</code></td>\n<td style=\"text-align:center\">求余运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td style=\"text-align:center\">赋值运算符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>==</code></td>\n<td style=\"text-align:center\">相等运算符，用于比较两个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td style=\"text-align:center\">不相等运算符，用于比较两个数字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"算数运算符\"><a class=\"markdownIt-Anchor\" href=\"#算数运算符\">#</a> 算数运算符</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 减法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span>  <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> - <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> - $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 加法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> + <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> + $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 乘法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> * <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span>* $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 除法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> / <span class=\"token variable\">$&#123;2&#125;</span> = \"</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> / $<span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>输入：</p>\n<blockquote>\n<p>bash ./demo.sh 20 10</p>\n</blockquote>\n<p>输出结果：</p>\n<blockquote>\n<p>20 - 10 = 10</p>\n<p>20 + 10 = 30</p>\n<p>20 * 10 = 200</p>\n<p>20 / 10 = 2</p>\n</blockquote>\n<h5 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\">#</a> 条件运算符</h5>\n<p>以下运算符中，括号内的和括号外的作用相同</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>==(-eq)</code></td>\n<td style=\"text-align:center\">检测两个数是否相等，相等返回  <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=(-ne)</code></td>\n<td style=\"text-align:center\">检测两个数是否不相等，不相等返回 <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;(-gt)</code></td>\n<td style=\"text-align:center\">检测左边的数是否大于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;(-lt)</code></td>\n<td style=\"text-align:center\">检测左边的数是否小于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&gt;=(-ge)</code></td>\n<td style=\"text-align:center\">检测左边的数是否大于等于右边的数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;=(-le)</code></td>\n<td style=\"text-align:center\">检测左边的数是否小于等于右边的数</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"等于:\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 不等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"不等于:\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 不等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于:\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"小于:\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于等于:\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $&#123;<span class=\"token number\">1</span>&#125; <span class=\"token operator\">>=</span> $&#123;<span class=\"token number\">2</span>&#125; <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"小于等于:\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> $&#123;<span class=\"token number\">1</span>&#125; <span class=\"token operator\">&lt;=</span> $&#123;<span class=\"token number\">2</span>&#125; <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 小于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span> 大于等于 <span class=\"token variable\">$&#123;2&#125;</span><span class=\"token entity\" title=\"\\n\">\\n</span>\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输出结果：</p>\n<blockquote>\n<p>等于:<br>\n10 不等于 15</p>\n<p>不等于:<br>\n10 不等于 15</p>\n<p>大于:<br>\n10 小于 15</p>\n<p>小于:<br>\n10 小于 15</p>\n<p>大于等于:<br>\n10 小于等于 15</p>\n<p>小于等于:<br>\n10 小于等于 15</p>\n</blockquote>\n<h5 id=\"布尔运算符\"><a class=\"markdownIt-Anchor\" href=\"#布尔运算符\">#</a> 布尔运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>!</code></td>\n<td style=\"text-align:center\">非运算，对表达式结果取反</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|| <code>(-o)</code></td>\n<td style=\"text-align:center\">或运算，表达式结果有一个为  <code>true</code> ，那么整体结果都为  <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;&amp;(-a)</code></td>\n<td style=\"text-align:center\">与运算，表达式结果都为  <code>true</code>  才返回  <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<p>注意：在  <code>[[]]</code>  中不能使用  <code>-o</code>  和  <code>-a</code>  运算符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">></span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输入：./demo.sh 10 15</p>\n<p>输出结果:</p>\n<blockquote>\n<p>true</p>\n<p>false</p>\n<p>true</p>\n</blockquote>\n<h5 id=\"字符串运算符\"><a class=\"markdownIt-Anchor\" href=\"#字符串运算符\">#</a> 字符串运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>=</code></td>\n<td style=\"text-align:center\">检测两个字符串是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>!=</code></td>\n<td style=\"text-align:center\">检测两个字符串是否不相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-z</code></td>\n<td style=\"text-align:center\">检测字符串的长度是否为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-n</code></td>\n<td style=\"text-align:center\">检测字符串的长度是否不为 <code>0</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td style=\"text-align:center\">检测字符串是否不为空</td>\n</tr>\n</tbody>\n</table>\n<p>注意：在使用 <code>-n</code>  运算符时，应该给要判断的字符串加上  <code>&quot;&quot;</code>  号，否则检测的结果永远是  <code>true</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$&#123;2&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;1&#125;</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>输入：./demo.sh hello world</p>\n<p>输出结果：</p>\n<blockquote>\n<p>false</p>\n<p>true</p>\n<p>false</p>\n<p>true</p>\n<p>true</p>\n</blockquote>\n<h5 id=\"文件测试运算符\"><a class=\"markdownIt-Anchor\" href=\"#文件测试运算符\">#</a> 文件测试运算符</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>-b file</code></td>\n<td style=\"text-align:center\">检测文件是否是块设备文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-c file</code></td>\n<td style=\"text-align:center\">检测文件是否是字符设备文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-d file</code></td>\n<td style=\"text-align:center\">检测文件是否是目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-f file</code></td>\n<td style=\"text-align:center\">检测文件是否是普通文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-g file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了  <code>SGID</code>  位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-k file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了粘着位 <code>(Sticky Bit)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-p file</code></td>\n<td style=\"text-align:center\">检测文件是否是有名管道</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-u file</code></td>\n<td style=\"text-align:center\">检测文件是否设置了  <code>SUID</code>  位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-r file</code></td>\n<td style=\"text-align:center\">检测文件是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-w file</code></td>\n<td style=\"text-align:center\">检测文件是否可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-x file</code></td>\n<td style=\"text-align:center\">检测文件是否可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-s file</code></td>\n<td style=\"text-align:center\">检测文件是否为空（文件大小是否大于 <code>0</code> ）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>-e file</code></td>\n<td style=\"text-align:center\">检测文件（包括目录）是否存在</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "shell"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript%E7%AC%94%E8%AE%B0/",
            "url": "http://yunyat.cloud/MyCodingBook/Front/javascript/JavaScript%E7%AC%94%E8%AE%B0/",
            "title": "JavaScript - 1",
            "date_published": "2023-11-22T06:22:20.000Z",
            "content_html": "<h3 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h3>\n<blockquote>\n<p>因本人主学 <code>Java</code> , 所以下文包括以后的笔记绝大部分都是与 Java 做对比</p>\n</blockquote>\n<hr>\n<h3 id=\"概览\"><a class=\"markdownIt-Anchor\" href=\"#概览\">#</a> 概览</h3>\n<p>JavaScript 的类型有</p>\n<ul>\n<li><code>Number</code>  (数字)</li>\n<li><code>String</code>  (字符串)</li>\n<li><code>Boolean</code>  (布尔值)</li>\n<li><code>Symbol</code>  (符号)</li>\n<li><code>Object</code>  (对象)\n<ul>\n<li><code>Function</code>  (函数)</li>\n<li><code>Array</code>  (数组)</li>\n<li><code>Date</code>  (日期)</li>\n<li><code>RegExp</code>  (正则表达式)</li>\n</ul>\n</li>\n<li><code>null</code>  (空)</li>\n<li><code>undefined</code>  (未定义)</li>\n</ul>\n<p>注：在  <code>JavaScript</code>  中，所有的类型都是对象</p>\n<h4 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h4>\n<h5 id=\"变量-常量\"><a class=\"markdownIt-Anchor\" href=\"#变量-常量\">#</a> 变量 &amp; 常量</h5>\n<p>在 2015 年之前，使用  <code>var</code>  定义变量，但在 2015 年之后，ES 6 新增了两个关键字 ： <code>lei</code>  、 <code>const</code></p>\n<p><code>var</code>  声明的变量在全局都能使用，但是注意，如果在代码块外声明了变量，然后在代码块中声明了同名的变量，在代码块外的变量就会被重新定义</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 此处输出 x 为 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 此处输出 x 为 2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 此处输出 x 为 2</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>2</p>\n</blockquote>\n<p><code>let</code>  声明的变量只在  <code>let</code>  命令所在的代码块有效，即  <code>let</code>  所在的花括号内</p>\n<p><code>const</code>  声明的对象为基本类型（数字，字符串，布尔值等），那么它就是常量，即不可更改的。但是也是相对的，如果它的值为一个复合类型，那么它的值就是可变的，可以修改它的属性或元素</p>\n<blockquote>\n<p><code>let</code>  和  <code>const</code>  都是块级作用域，即只在声明所在的代码块中有效</p>\n</blockquote>\n<h5 id=\"数字\"><a class=\"markdownIt-Anchor\" href=\"#数字\">#</a> 数字</h5>\n<p>与 Java 不一样，JavaScript 没有整数 ( <code>int</code> ) 亦或者整型 ( <code>Integer</code> )，除了  <code>BigInt</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>1.5</p>\n<p>1</p>\n</blockquote>\n<p>JavaScript 提供了两个内置函数用于将字符串转换为整型和将浮点数转换为整型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数名</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>parseInt(String str , Number radix)</code></td>\n<td style=\"text-align:center\">接收两个参数， <code>str</code>  为要转换的字符串， <code>radix</code>  为目标整数的基进制，返回转换后的指定进制数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>parseFloat(String str)</code></td>\n<td style=\"text-align:center\">接收一个参数， <code>str</code>  为要转换的字符串，返回转换后的十进制数</td>\n</tr>\n</tbody>\n</table>\n<p>要转换字符串为整数也可以使用一元运算符  <code>'+'</code> 。</p>\n<p>如果给定的字符串没有  <code>Number</code>  (数值) 类型，那么此时就会返回一个  <code>NaN</code>  (Not a Number 的缩写) 值</p>\n<p>除了  <code>NaN</code> ，JavaScript 还提供了两个特殊值， <code>Infinity</code>  (正无穷) 和  <code>-Infinity</code>  (负无穷)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">id</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">str</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1234.567\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>1234</p>\n<p>1234.567</p>\n<p>123</p>\n<p>NaN</p>\n</blockquote>\n<p>可以使用  <code>isNaN()</code>  来判断一个变量是否为  <code>NaN</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>true</p>\n</blockquote>\n<p>可以使用  <code>isFinite()</code>  来判断一个变量是否为一个有穷数，如果值为  <code>Infinity</code> 、 <code>-Infinity</code>  或  <code>NaN</code>  ，那么就返回  <code>false</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>false</p>\n<p>false</p>\n<p>false</p>\n</blockquote>\n<blockquote>\n<p>小知识 1：使用  <code>parseInt()</code>  及  <code>parseFloat()</code>  时，这两个函数回尝试逐个解析字符串中的字符，直到遇到一个无法被解析的字符，然后返回该字符之前所有数字组成的数字。</p>\n</blockquote>\n<blockquote>\n<p>小知识 2：使用单目运算符  <code>'+'</code>  来转换字符串时，只要字符串中包含无法转换的字符，就会返回  <code>NaN</code></p>\n</blockquote>\n<h5 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h5>\n<blockquote>\n<p>在 JavaScript 中，所有字符串都是一串  <code>Unicode</code>  字符序列。更准确的说，它是一串  <code>UTF-16</code>  编码单元的序列，每一个编码单元由一个 16 位二进制数表示。每一个  <code>Unicode</code>  字符由一个或两个编码单元表示。</p>\n</blockquote>\n<p>在 JavaScript 中， <code>String</code>  是一个对象，因此你可以像操作普通对象一样对它进行操作。</p>\n<p>使用  <code>length</code>  方法获取它的长度，使用  <code>charAt(0)</code>  返回第一个字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>5</p>\n<p>h</p>\n</blockquote>\n<h5 id=\"其他类型\"><a class=\"markdownIt-Anchor\" href=\"#其他类型\">#</a> 其他类型</h5>\n<p><code>null</code>  表示一个空值， <code>undefined</code>  是一个  <code>undefined</code>  (未定义) 类型的对象，表示一个未初始化的值，即没有被分配空间的值。在变量声明之后并未赋值，那么它的值就是  <code>undefined</code> 。</p>\n<p>JavaScript 的逻辑值与 Java 中的一样， <code>false</code> 、 <code>0</code> 、空字符串 ( <code>&quot;&quot;</code> )、 <code>NaN</code> 、 <code>null</code> 、 <code>undefined</code>  都是  <code>false</code> ，其余为  <code>true</code></p>\n<p>逻辑运算符也同 Java 一样， <code>&amp;&amp;</code> (逻辑与)、 <code>||</code> (逻辑或)、 <code>!</code> (逻辑非)，用法也一样</p>\n<p>小技巧：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> CacheName <span class=\"token operator\">&amp;&amp;</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用逻辑与可以事先检测该参数是否为空，防止意外的赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> CacheName <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> CacheName <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用逻辑或可以在参数无效时使用默认值</p>\n</blockquote>\n<h4 id=\"控制结构\"><a class=\"markdownIt-Anchor\" href=\"#控制结构\">#</a> 控制结构</h4>\n<p>JavaScript 的  <code>if</code> 、 <code>else if</code> 、 <code>while</code> 、 <code>do...while</code> 、 <code>switch</code>  都同 Java 一样，稍微有点不同的就是  <code>for</code>  ，普通的  <code>for</code>  和 Java 相同，但是  <code>for...in</code>  和  <code>for...of</code>  稍微有点不同，在 Java 中，与之对应的是  <code>foreach</code>  也就是增强  <code>for</code> 。</p>\n<h5 id=\"forin\"><a class=\"markdownIt-Anchor\" href=\"#forin\">#</a>  <code>for...in</code></h5>\n<p>使用  <code>for...in</code>  迭代可枚举属性，可以遍历属性名和属性值，但是无法使用  <code>for...of</code>  迭代可枚举属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">sex</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> l <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>naem</p>\n<p>Tom</p>\n<p>sex</p>\n<p>男</p>\n<p>age</p>\n<p>18</p>\n</blockquote>\n<h5 id=\"forof\"><a class=\"markdownIt-Anchor\" href=\"#forof\">#</a>  <code>for...of</code></h5>\n<p>使用  <code>for...of</code>  迭代可枚举对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> l <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<blockquote>\n<p>name</p>\n<p>undefined</p>\n<p>sex</p>\n<p>undefined</p>\n<p>age</p>\n<p>undefined</p>\n</blockquote>\n<p>注：之所以是  <code>undefined</code>  是因为  <code>list</code>  的元素并没有初始化，所有未初始化的变量一律是  <code>undefined</code></p>\n<h4 id=\"在任意浏览器中运行\"><a class=\"markdownIt-Anchor\" href=\"#在任意浏览器中运行\">#</a> 在任意浏览器中运行</h4>\n<p>在浏览器中按  <code>F12</code>  进入检查模式，然后在选项卡中找到源代码，在里面可以新建代码片段，也可以直接在控制台输入代码，然后用  <code>Ctrl+Enter</code>  运行</p>\n<p><img data-src=\"https://z1.ax1x.com/2023/11/07/pilWwRS.png\" alt=\"1\"></p>\n<h4 id=\"输入输出\"><a class=\"markdownIt-Anchor\" href=\"#输入输出\">#</a> 输入输出</h4>\n<p>JavaScript 并没有提供任何打印或输出函数。但可以通过不同的方式输出数据。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>window.alert()</code></td>\n<td style=\"text-align:center\">弹出警告窗</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>document.write()</code></td>\n<td style=\"text-align:center\">将内容写入到 HTML 文档中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>innerHTML()</code></td>\n<td style=\"text-align:center\">将内容写入到 HTML 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>console.log()</code></td>\n<td style=\"text-align:center\">将内容写入到浏览器的控制台</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>由当前页面弹出警告信息弹窗</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/11/11/pi8vJsJ.jpg\" alt=\"2\"></p>\n<ol start=\"2\">\n<li>直接将内容写入 HTML 中，如果在 HTML 文档加载完后执行  <code>document.write()</code>  , 则整个页面内容将被覆盖</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以将 JavaScript 直接写在 HTML 文档中，这时的 HTML 文档是不会被覆盖的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>将内容写入指定 HTML 元素中，覆盖原有的元素内容</li>\n</ol>\n<p><code>document.getElementById(&quot;demo&quot;)</code>  是使用 id 属性来查找 HTML 元素的 JavaScript 代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"哈喽\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>将值写到控制台</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JavaScript练习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t你好 世界!</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLO WORLD!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://z1.ax1x.com/2023/11/11/pi8vGM4.jpg\" alt=\"3\"></p>\n<hr>\n<p><em>END</em></p>\n",
            "tags": [
                "原创",
                "JavaScript"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/Java-lambda%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/Java-lambda%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/",
            "title": "Java-lambda的方法引用",
            "date_published": "2023-07-11T07:43:23.000Z",
            "content_html": "<h5 id=\"方法引用\"><a class=\"markdownIt-Anchor\" href=\"#方法引用\">#</a> 方法引用</h5>\n<p>方法引用有四种引用方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">语法</th>\n<th style=\"text-align:center\">对应的 lambda 表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">对象引用非静态方法</td>\n<td style=\"text-align:center\">对象名 : : 实例方法名</td>\n<td style=\"text-align:center\">（ i ) -&gt; 对象名。实例方法名 (i)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用静态方法</td>\n<td style=\"text-align:center\">类名 : : 静态方法名 引用</td>\n<td style=\"text-align:center\">(i) -&gt; 类名。静态方法名 ( i )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用非静态方法</td>\n<td style=\"text-align:center\">类名 : : 实例方法名 引用</td>\n<td style=\"text-align:center\">(i) -&gt; 类名。实例方法名 ( i )</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类引用构造方法</td>\n<td style=\"text-align:center\">类名 : : new\t// 构造引用</td>\n<td style=\"text-align:center\">(i) -&gt; new 类名 ( i )</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>千万注意，要引用的方法的形参和返回值一定要跟接口的一样，要不然找不到这个方法的</strong></li>\n</ul>\n<p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>对象名::实例方法名</code> 引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先定义一个接口，可以接受泛型，接口必须是函数式接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 形参为 Optional，Optional 是一个可以存储 null 值的容器对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 要引用的方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 通过 对象名：：方法名 引用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 方法接收任意类型的对象，new 一个本类对象，引用本类的 m 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> simple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//of 方法将非 null 值转换为 Optional 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        simple<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 对应的 lambda 表达式，结果一样</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Simple1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> simple1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        simple1<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::静态方法名</code> 引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 还是先定义一个接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Integer</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 然后定义一个实现类，这个类里面就是要引用的静态方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 静态方法可以直接通过类名引用</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 对应的 lambda 表达式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple22 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple22<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::实例方法名</code> 引用</p>\n<p>只有接口中有两个及以上形参，且第一个参数是调用者，其他参数是被调用者才能使用此类型引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先定义一个接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main2</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> i <span class=\"token operator\">=</span> <span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 链式调用将字符串拼接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token function\">m</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 花里胡哨的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 对应的 lambda 方式没整出来。。。</span></pre></td></tr></table></figure><p><em><strong>[ code = java ]</strong></em></p>\n<blockquote>\n<p><code>类名::new</code>  引用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将上面的代码小改一手</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Simple4</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 返回值为实现接口的类，参数就是实现类的构造方法参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Main2</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Main2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Simple</span> simple <span class=\"token operator\">=</span> <span class=\"token class-name\">Main2</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//simple.test 返回的其实就是一个实现类对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>simple<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "原创",
                "java",
                "lambda表达式"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%A7%88/",
            "title": "集合接口的继承及实现概览",
            "date_published": "2023-05-14T13:45:06.000Z",
            "content_html": "<h5 id=\"map-根接口包含键和值\"><a class=\"markdownIt-Anchor\" href=\"#map-根接口包含键和值\">#</a> Map    -- 根接口 (包含键和值)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>Bindings</li>\n<li>ConcurrentMap\n<ul>\n<li>ConcurrentNavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n<li>SoredMap\n<ul>\n<li>NavigableMap&lt;K,V&gt;</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Map 接口的类</p>\n<p><code>AbstractMap</code> ,<br>\n <code>Attributes</code> ,<br>\n <code>AuthProvider</code> ,<br>\n <code>ConcurrentHashMap</code> ,<br>\n <code>ConcurrentSkipListMap</code> ,<br>\n <code>EnumMap</code> ,<br>\n <code>HashMap</code> ,<br>\n <code>Hashtable</code> ,<br>\n <code>Headers</code> ,<br>\n <code>IdentityHashMap</code> ,<br>\n <code>LinkedHashMap</code> ,<br>\n <code>PrinterStateReasons</code> ,<br>\n <code>Properties</code> ,<br>\n <code>Provider</code> ,<br>\n <code>RenderingHints</code> ,<br>\n <code>SimpleBindings</code> ,<br>\n <code>TabularDataSupport</code> ,<br>\n <code>TreeMap</code> ,<br>\n <code>UIDefaults</code> ,<br>\n <code>WeakHashMap</code></p>\n<h5 id=\"collection-根接口只有元素\"><a class=\"markdownIt-Anchor\" href=\"#collection-根接口只有元素\">#</a> Collection    -- 根接口 (只有元素)</h5>\n<p>直接继承的接口</p>\n<ul>\n<li>BeanContext\n<ul>\n<li>BeanContextServices</li>\n</ul>\n</li>\n<li>Queue<E>\n<ul>\n<li>BlockingQueue<E>\n<ul>\n<li>BlockingDeque<E></li>\n<li>TransferQueue<E></li>\n</ul>\n</li>\n<li>Deque<E></li>\n</ul>\n</li>\n<li>List<E></li>\n<li>Set<E>\n<ul>\n<li>EventSet</li>\n<li>SortedSet<E>\n<ul>\n<li>NavigableSet<E></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所有实现 Collection 的类</p>\n<p><code>AbstractCollection</code> ,<br>\n <code>AbstractList</code> ,<br>\n <code>AbstractQueue</code> ,<br>\n <code>AbstractSequentialList</code> ,<br>\n <code>AbstractSet</code> ,<br>\n <code>ArrayBlockingQueue</code> ,<br>\n <code>ArrayDeque</code> ,<br>\n <code>ArrayList</code> ,<br>\n <code>AttributeList</code> ,<br>\n <code>BeanContextServicesSupport</code> ,  <code>BeanContextSupport</code> ,  <code>ConcurrentHashMap.KeySetView</code> ,  <code>ConcurrentLinkedDeque</code> ,<br>\n <code>ConcurrentLinkedQueue</code> ,<br>\n <code>ConcurrentSkipListSet</code> ,<br>\n <code>CopyOnWriteArrayList</code> ,<br>\n <code>CopyOnWriteArraySet</code> ,<br>\n <code>DelayQueue</code> ,<br>\n <code>EnumSet</code> ,<br>\n <code>HashSet</code> ,<br>\n <code>JobStateReasons</code> ,<br>\n <code>LinkedBlockingDeque</code> ,<br>\n <code>LinkedBlockingQueue</code> ,<br>\n <code>LinkedHashSet</code> ,<br>\n <code>LinkedList</code> ,<br>\n <code>LinkedTransferQueue</code> ,<br>\n <code>PriorityBlockingQueue</code> ,<br>\n <code>PriorityQueue</code> ,<br>\n <code>RoleList</code> ,<br>\n <code>RoleUnresolvedList</code> ,<br>\n <code>Stack</code> ,<br>\n <code>SynchronousQueue</code> ,<br>\n <code>TreeSet</code> ,<br>\n <code>Vector</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88-Map/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E9%9B%86%E5%90%88-Map/",
            "title": "集合-Map",
            "date_published": "2023-05-02T09:58:51.000Z",
            "content_html": "<h4 id=\"map接口双列队列\"><a class=\"markdownIt-Anchor\" href=\"#map接口双列队列\">#</a> Map 接口 (双列队列)</h4>\n<ul>\n<li>\n<p><code>HashMap</code>  和 <code>LinkedHashMap</code></p>\n<p><code>HashMap</code>  实现了 <code>Map</code>  接口，而 <code>LinkedHashMap</code>  继承自 <code>HashMap</code>  类</p>\n<ul>\n<li><code>hashmap</code>  和 <code>linkedhashmap</code>  的区别\n<ul>\n<li><code>hashmap</code>  采用了哈希表实现 <code>map</code>  接口，但是它的存储是无序的</li>\n<li><code>linkedhashmap</code>  同样也采用了哈希表实现，但不同的是它同时采用了链表结构，这使得它的存储是有序的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"hashmap构造方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap构造方法\">#</a> HashMap 构造方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 其他构造方法都是在此基础上衍生而来</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token comment\">//initialCapacity 初始容量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token comment\">//loadFactor 初始系数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"hashmap的常用方法\"><a class=\"markdownIt-Anchor\" href=\"#hashmap的常用方法\">#</a> HashMap 的常用方法</h5>\n<ul>\n<li>\n<p><em> <code>get()</code> </em>、<em> <code>put()</code> </em>、<em> <code>remove()</code> </em></p>\n<p><code>get()</code></p>\n<ul>\n<li>返回指定键的键值</li>\n</ul>\n<p><code>put()</code></p>\n<ul>\n<li>将指定的键值装入列表</li>\n</ul>\n<p><code>remove()</code></p>\n<ul>\n<li>删除指定健的键值，删除后健的值为 <code>null</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 初始容量为 5，初始系数为 0.75</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 可以使用泛型指定存储类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//key 为键值 1，value 为 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 返回键为 “键值 1” 的对应键值 value</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 注意：此 value 为 Object 类型，输出会自动调用 toString 方法将值转换为 String</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 删除键为 “键值 1” 的对应值 value，删除后键 “键值 1” 的值为 null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>LinkedHashMap</code>  的构造方法同 <code>HashMap</code>  相同</p>\n<ul>\n<li>\n<p><em> <code>containsKey</code> </em>、<em> <code>containsValue</code> </em>、<em> <code>isEmpty</code> </em></p>\n<p><code>containskey</code></p>\n<ul>\n<li>如果此列表中包含指定的键就返回 true，反之 false</li>\n</ul>\n<p><code>containsValue</code></p>\n<ul>\n<li>如果此列表将一个或多个健映射到此键值就返回 true，反之 false</li>\n</ul>\n<p><code>isEmpty</code></p>\n<ul>\n<li>如果此列表不包含健和键值就返回 true，反之 false</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含健 \"键值\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       \t<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containskey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否有指定值的映射</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 查看 hashmap 中是否包含键值对</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序执行结果为</p>\n<p><code>b1=true</code>   <code>b2=true</code>   <code>b3=false</code></p>\n",
            "tags": [
                "原创",
                "java",
                "集合"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/javafx%E4%BD%BF%E7%94%A8maven%E6%89%93%E5%8C%85%E5%8F%8A%E8%BF%90%E8%A1%8C/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/javafx%E4%BD%BF%E7%94%A8maven%E6%89%93%E5%8C%85%E5%8F%8A%E8%BF%90%E8%A1%8C/",
            "title": "JavaFx使用Maven打包及运行",
            "date_published": "2023-05-02T09:53:25.000Z",
            "content_html": "<h4 id=\"javafx使用maven打包依赖及运行\"><a class=\"markdownIt-Anchor\" href=\"#javafx使用maven打包依赖及运行\">#</a> javafx 使用 maven 打包依赖及运行</h4>\n<p>1. 先照图打包<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTPAZ6.png\" alt=\"1\"><br>\n2. 在 target 下会生成 app 文件夹和压缩包，进入 app/bin/ 目录，里面有 app.bat 批处理文件，双击即可运行<br>\n 3. 可以在 app 目录下写一个脚本文件来运行 app.bat，以便隐藏 cmd 命令窗口<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTP6FU.png\" alt=\"3\"><br>\n4. 脚本代码<br>\n<img data-src=\"https://s1.ax1x.com/2023/04/07/ppTP5ex.png\" alt=\"4\"></p>\n<pre><code class=\"language-vbscript\">set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)\nws.Run &quot;.\\bin\\app.bat&quot;,0\n</code></pre>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java",
                "javafx"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%BA%A7%E5%88%AB%E6%AF%94%E8%BE%83/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%BA%A7%E5%88%AB%E6%AF%94%E8%BE%83/",
            "title": "运算符级别比较",
            "date_published": "2023-05-02T09:50:16.000Z",
            "content_html": "<hr>\n<h3 id=\"运算符级别\"><a class=\"markdownIt-Anchor\" href=\"#运算符级别\">#</a> 运算符级别</h3>\n<ul>\n<li>* /</li>\n<li>+ -</li>\n</ul>\n<h6 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*/]\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+-]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 相同级别</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*/]\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+-]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//s1>s2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//code</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//code</span></pre></td></tr></table></figure><p><img data-src=\"https://s1.ax1x.com/2023/04/11/ppLkjaj.md.png\" alt=\"ppLkjaj.md.png\"></p>\n<hr>\n<p>END</p>\n",
            "tags": [
                "原创",
                "java"
            ]
        },
        {
            "id": "http://yunyat.cloud/MyCodingBook/backEnd/java/Java/",
            "url": "http://yunyat.cloud/MyCodingBook/backEnd/java/Java/",
            "title": "Java线程池",
            "date_published": "2023-04-28T15:15:03.000Z",
            "content_html": "<h5 id=\"future\"><a class=\"markdownIt-Anchor\" href=\"#future\">#</a> Future</h5>\n<p>此类用于异步存储计算结果</p>\n<ul>\n<li>\n<p>方法摘要：</p>\n<p><code>get()</code></p>\n<ul>\n<li>此方法会阻塞当前线程直到任务完成，然后检索其结果</li>\n</ul>\n</li>\n</ul>\n<p><code>get(long timeout ,TimeUnit unit)</code></p>\n<ul>\n<li>此方法也会阻塞当前线程，但是到指定时间后立即返回，然后检索其结果 (如果任务完成)</li>\n</ul>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<p><code>isCancelled()</code></p>\n<ul>\n<li>如果任务在完成之前被取消，则返回 true。</li>\n</ul>\n<p><code>isDone()</code></p>\n<ul>\n<li>如果任务结束，无论是正常完成、中途取消，还是发生异常，都返回 true。</li>\n</ul>\n<h5 id=\"runnable任务和calable任务\"><a class=\"markdownIt-Anchor\" href=\"#runnable任务和calable任务\">#</a> Runnable 任务和 Calable 任务</h5>\n<ul>\n<li>\n<p><code>Runnable</code></p>\n</li>\n<li>\n<p>此方法没有返回值也不会抛出异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 被执行时没有返回值也无法抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>可以通过 <code>Executors</code>  工具类将 <code>Runnable</code>  转换为 <code>Callable</code></p>\n<ul>\n<li>\n<p><code>Calable</code></p>\n</li>\n<li>\n<p>指定的泛型返回值  <code>&lt;T&gt;</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * @throws 当无法计算结果则抛出异常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * @return 返回计算结果</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"提交任务\"><a class=\"markdownIt-Anchor\" href=\"#提交任务\">#</a> 提交任务</h5>\n<p><code>execute()</code>  和 <code>submit()</code></p>\n<ul>\n<li>\n<p><code>execute()</code></p>\n<ul>\n<li>此方法用于提交不需要返回值的任务，所以无法判断任务是否被执行成功</li>\n</ul>\n</li>\n<li>\n<p><code>submit()</code></p>\n<ul>\n<li>\n<p>此方法用于提交需要返回值的任务。返回值为 <code>FutureTask</code></p>\n<p><code>FutureTask</code>  继承自 <code>Future</code></p>\n<p>可以调用返回值的 <code>get()</code>  方法判断任务是否执行成功</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"取消任务\"><a class=\"markdownIt-Anchor\" href=\"#取消任务\">#</a> 取消任务</h5>\n<p><code>cancel(boolean mayInterrupt)</code></p>\n<ul>\n<li>使用此方法会尝试取消这个任务的运行。如果任务已经开始，并且 <code>mayInterrupt</code>  参数为 true，那么此任务就会被中断。如果成功的执行了取消操作，则返回 true</li>\n</ul>\n<h5 id=\"关闭线程池\"><a class=\"markdownIt-Anchor\" href=\"#关闭线程池\">#</a> 关闭线程池</h5>\n<p><code>shutdown()</code>  和 <code>shutdowNow()</code></p>\n<ul>\n<li>\n<p><code>shutdown</code></p>\n<ul>\n<li>有序关闭线程池，队列中的任务会被执行，此时线程池不会接受新的任务，此方法无返回值</li>\n</ul>\n</li>\n<li>\n<p><code>shutdowNow</code></p>\n<ul>\n<li>关闭线程池，中止当前正在执行的任务，队列中的任务不会执行并且返回从未开始执行的 <code>list</code>  列表</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"判断线程池是否开始关闭\"><a class=\"markdownIt-Anchor\" href=\"#判断线程池是否开始关闭\">#</a> 判断线程池是否开始关闭</h5>\n<p><code>isShutdown</code>  和 <code>isTerminated</code></p>\n<ul>\n<li>\n<p><code>isShoudown</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后就返回 <code>true</code>  , 此时线程池可能并没有完全关闭 (队列中可能还有待执行的任务)</li>\n</ul>\n</li>\n<li>\n<p><code>isTerminated</code></p>\n<ul>\n<li>调用 <code>shutdown</code>  或 <code>shutdownNow</code>  语句后返回 <code>true</code>  , 此时线程池及队列中的任务应该都已执行完毕，否则返回 <code>false</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h5>\n<ul>\n<li><code>ThreadPoolExecutor</code>  线程池创建的构造方法 (其它构造方法都是在此基础上的衍生)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token comment\">// 保留的核心线程数，定义了最小可以同时运行的线程数量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token comment\">// 当队列中的任务达到队列容量时当前可以同时运行的线程数变成最大线程数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                          <span class=\"token comment\">// 当线程数大于核心线程数时，多余空闲线程在死亡之前等待新任务的最大时长</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          <span class=\"token comment\">//keepAliveTime 的时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                          <span class=\"token comment\">// 任务队列，用来保存等待执行的任务，当新任务被提交的时候先判断当前运行的线程数是否达到了核心线程数，达到的话就存入队列</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                          <span class=\"token comment\">// 创建新线程时使用的工厂方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                          <span class=\"token comment\">// 拒绝策略，当任务过多而拒绝执行时使用的处理程序</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                         <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为非法或不适当的参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 判断参数是否为 null 等非法参数，为 true 抛出异常</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> threadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \t<span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 核心线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 等待时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 时间单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 队列长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 拒绝策略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 execute 提交任务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">sumit</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 sumit 提交任务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        threadPoolExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"时间值单位\"><a class=\"markdownIt-Anchor\" href=\"#时间值单位\">#</a> 时间值单位</h5>\n<p><code>TimeUnit</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>DAYS</code></td>\n<td style=\"text-align:center\">时间单位代表二十四小时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HOURS</code></td>\n<td style=\"text-align:center\">时间单位代表六十分钟。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MICROSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一毫秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MILLISECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>MINUTES</code></td>\n<td style=\"text-align:center\">时间单位代表六十秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NANOSECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表千分之一微秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SECONDS</code></td>\n<td style=\"text-align:center\">时间单位代表一秒。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "原创",
                "java线程"
            ]
        }
    ]
}